/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.metasoft.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-12")
public class MsgToProcess implements org.apache.thrift.TBase<MsgToProcess, MsgToProcess._Fields>, java.io.Serializable, Cloneable, Comparable<MsgToProcess> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MsgToProcess");

  private static final org.apache.thrift.protocol.TField ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("admin", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUBMITUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("submituser", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField APPLID_FIELD_DESC = new org.apache.thrift.protocol.TField("applid", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MsgToProcessStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MsgToProcessTupleSchemeFactory());
  }

  public String admin; // required
  public String status; // required
  public String submituser; // required
  public String title; // required
  public String applid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADMIN((short)1, "admin"),
    STATUS((short)2, "status"),
    SUBMITUSER((short)3, "submituser"),
    TITLE((short)4, "title"),
    APPLID((short)5, "applid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADMIN
          return ADMIN;
        case 2: // STATUS
          return STATUS;
        case 3: // SUBMITUSER
          return SUBMITUSER;
        case 4: // TITLE
          return TITLE;
        case 5: // APPLID
          return APPLID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADMIN, new org.apache.thrift.meta_data.FieldMetaData("admin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBMITUSER, new org.apache.thrift.meta_data.FieldMetaData("submituser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLID, new org.apache.thrift.meta_data.FieldMetaData("applid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MsgToProcess.class, metaDataMap);
  }

  public MsgToProcess() {
  }

  public MsgToProcess(
    String admin,
    String status,
    String submituser,
    String title,
    String applid)
  {
    this();
    this.admin = admin;
    this.status = status;
    this.submituser = submituser;
    this.title = title;
    this.applid = applid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MsgToProcess(MsgToProcess other) {
    if (other.isSetAdmin()) {
      this.admin = other.admin;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetSubmituser()) {
      this.submituser = other.submituser;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetApplid()) {
      this.applid = other.applid;
    }
  }

  public MsgToProcess deepCopy() {
    return new MsgToProcess(this);
  }

  @Override
  public void clear() {
    this.admin = null;
    this.status = null;
    this.submituser = null;
    this.title = null;
    this.applid = null;
  }

  public String getAdmin() {
    return this.admin;
  }

  public MsgToProcess setAdmin(String admin) {
    this.admin = admin;
    return this;
  }

  public void unsetAdmin() {
    this.admin = null;
  }

  /** Returns true if field admin is set (has been assigned a value) and false otherwise */
  public boolean isSetAdmin() {
    return this.admin != null;
  }

  public void setAdminIsSet(boolean value) {
    if (!value) {
      this.admin = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public MsgToProcess setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getSubmituser() {
    return this.submituser;
  }

  public MsgToProcess setSubmituser(String submituser) {
    this.submituser = submituser;
    return this;
  }

  public void unsetSubmituser() {
    this.submituser = null;
  }

  /** Returns true if field submituser is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmituser() {
    return this.submituser != null;
  }

  public void setSubmituserIsSet(boolean value) {
    if (!value) {
      this.submituser = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public MsgToProcess setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getApplid() {
    return this.applid;
  }

  public MsgToProcess setApplid(String applid) {
    this.applid = applid;
    return this;
  }

  public void unsetApplid() {
    this.applid = null;
  }

  /** Returns true if field applid is set (has been assigned a value) and false otherwise */
  public boolean isSetApplid() {
    return this.applid != null;
  }

  public void setApplidIsSet(boolean value) {
    if (!value) {
      this.applid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADMIN:
      if (value == null) {
        unsetAdmin();
      } else {
        setAdmin((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case SUBMITUSER:
      if (value == null) {
        unsetSubmituser();
      } else {
        setSubmituser((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case APPLID:
      if (value == null) {
        unsetApplid();
      } else {
        setApplid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADMIN:
      return getAdmin();

    case STATUS:
      return getStatus();

    case SUBMITUSER:
      return getSubmituser();

    case TITLE:
      return getTitle();

    case APPLID:
      return getApplid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADMIN:
      return isSetAdmin();
    case STATUS:
      return isSetStatus();
    case SUBMITUSER:
      return isSetSubmituser();
    case TITLE:
      return isSetTitle();
    case APPLID:
      return isSetApplid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MsgToProcess)
      return this.equals((MsgToProcess)that);
    return false;
  }

  public boolean equals(MsgToProcess that) {
    if (that == null)
      return false;

    boolean this_present_admin = true && this.isSetAdmin();
    boolean that_present_admin = true && that.isSetAdmin();
    if (this_present_admin || that_present_admin) {
      if (!(this_present_admin && that_present_admin))
        return false;
      if (!this.admin.equals(that.admin))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_submituser = true && this.isSetSubmituser();
    boolean that_present_submituser = true && that.isSetSubmituser();
    if (this_present_submituser || that_present_submituser) {
      if (!(this_present_submituser && that_present_submituser))
        return false;
      if (!this.submituser.equals(that.submituser))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_applid = true && this.isSetApplid();
    boolean that_present_applid = true && that.isSetApplid();
    if (this_present_applid || that_present_applid) {
      if (!(this_present_applid && that_present_applid))
        return false;
      if (!this.applid.equals(that.applid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_admin = true && (isSetAdmin());
    list.add(present_admin);
    if (present_admin)
      list.add(admin);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_submituser = true && (isSetSubmituser());
    list.add(present_submituser);
    if (present_submituser)
      list.add(submituser);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_applid = true && (isSetApplid());
    list.add(present_applid);
    if (present_applid)
      list.add(applid);

    return list.hashCode();
  }

  @Override
  public int compareTo(MsgToProcess other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAdmin()).compareTo(other.isSetAdmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admin, other.admin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmituser()).compareTo(other.isSetSubmituser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmituser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submituser, other.submituser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplid()).compareTo(other.isSetApplid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applid, other.applid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MsgToProcess(");
    boolean first = true;

    sb.append("admin:");
    if (this.admin == null) {
      sb.append("null");
    } else {
      sb.append(this.admin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("submituser:");
    if (this.submituser == null) {
      sb.append("null");
    } else {
      sb.append(this.submituser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applid:");
    if (this.applid == null) {
      sb.append("null");
    } else {
      sb.append(this.applid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MsgToProcessStandardSchemeFactory implements SchemeFactory {
    public MsgToProcessStandardScheme getScheme() {
      return new MsgToProcessStandardScheme();
    }
  }

  private static class MsgToProcessStandardScheme extends StandardScheme<MsgToProcess> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MsgToProcess struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.admin = iprot.readString();
              struct.setAdminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUBMITUSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.submituser = iprot.readString();
              struct.setSubmituserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APPLID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applid = iprot.readString();
              struct.setApplidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MsgToProcess struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.admin != null) {
        oprot.writeFieldBegin(ADMIN_FIELD_DESC);
        oprot.writeString(struct.admin);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.submituser != null) {
        oprot.writeFieldBegin(SUBMITUSER_FIELD_DESC);
        oprot.writeString(struct.submituser);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.applid != null) {
        oprot.writeFieldBegin(APPLID_FIELD_DESC);
        oprot.writeString(struct.applid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MsgToProcessTupleSchemeFactory implements SchemeFactory {
    public MsgToProcessTupleScheme getScheme() {
      return new MsgToProcessTupleScheme();
    }
  }

  private static class MsgToProcessTupleScheme extends TupleScheme<MsgToProcess> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MsgToProcess struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAdmin()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      if (struct.isSetSubmituser()) {
        optionals.set(2);
      }
      if (struct.isSetTitle()) {
        optionals.set(3);
      }
      if (struct.isSetApplid()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAdmin()) {
        oprot.writeString(struct.admin);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetSubmituser()) {
        oprot.writeString(struct.submituser);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetApplid()) {
        oprot.writeString(struct.applid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MsgToProcess struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.admin = iprot.readString();
        struct.setAdminIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.submituser = iprot.readString();
        struct.setSubmituserIsSet(true);
      }
      if (incoming.get(3)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.applid = iprot.readString();
        struct.setApplidIsSet(true);
      }
    }
  }

}

