/* SQLParser.java */
/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package org.teiid.query.parser;

import java.math.BigInteger;
import java.util.*;
import org.teiid.core.types.*;
import org.teiid.core.util.StringUtil;
import org.teiid.core.util.PropertiesUtils;
import org.teiid.query.QueryPlugin;
import org.teiid.query.sql.LanguageObject;
import org.teiid.query.sql.proc.*;
import org.teiid.query.sql.symbol.*;
import org.teiid.query.metadata.*;
import org.teiid.metadata.*;
import org.teiid.metadata.BaseColumn.NullType;
import org.teiid.language.Like.MatchMode;
import org.teiid.translator.*;
import org.teiid.query.sql.lang.*;

import com.test.SqlUtil;

/**
 * <p>The SQLParser is a JavaCC-generated parser that reads a SQL string and produces a
 * Query object.  The SQLParser.java file is generated by JavaCC from the SQLParser.jj
 * file.  <B>WARNING:</B> DO NOT MODIFY the SQLParser.java file as it will be
 * regenerated from the .jj file and your changes will be lost!</p>
 */
@SuppressWarnings({"nls", "unused"})
public class SQLParser extends SQLParserUtil implements SQLParserConstants {

/*
name=string
description=A string literal value.  Use '' to escape ' in the string.
example=[source,sql]\n----\n'a string'\n----\n\n[source,sql]\n----\n'it''s a string'\n----\n
*/
  final public String stringVal() throws ParseException {Token t = null;
    t = jj_consume_token(STRINGVAL);
{if ("" != null) return normalizeStringLiteral(t.image);}
    throw new Error("Missing return statement in function");
}

/*
name=non-reserved identifier
description=Allows non-reserved keywords to be parsed as identifiers
example=SELECT *COUNT* FROM ...
*/
  final public Token nonReserved() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXCEPTION:{
      jj_consume_token(EXCEPTION);
      break;
      }
    case SERIAL:{
      jj_consume_token(SERIAL);
      break;
      }
    case OBJECT:{
      jj_consume_token(OBJECT);
      break;
      }
    case INDEX:{
      jj_consume_token(INDEX);
      break;
      }
    case JSON:{
      jj_consume_token(JSON);
      break;
      }
    case GEOMETRY:{
      jj_consume_token(GEOMETRY);
      break;
      }
    case GEOGRAPHY:{
      jj_consume_token(GEOGRAPHY);
      break;
      }
    case DEFAULT_KEYWORD:{
      jj_consume_token(DEFAULT_KEYWORD);
      break;
      }
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case RAISE:
    case CHAIN:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case UPSERT:
    case AFTER:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:{
      basicNonReserved();
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return getToken(0);}
    throw new Error("Missing return statement in function");
}

  final public Token basicNonReserved() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTEAD:{
      jj_consume_token(INSTEAD);
      break;
      }
    case VIEW:{
      jj_consume_token(VIEW);
      break;
      }
    case ENABLED:{
      jj_consume_token(ENABLED);
      break;
      }
    case DISABLED:{
      jj_consume_token(DISABLED);
      break;
      }
    case KEY:{
      jj_consume_token(KEY);
      break;
      }
    case TEXTAGG:{
      jj_consume_token(TEXTAGG);
      break;
      }
    case COUNT:{
      jj_consume_token(COUNT);
      break;
      }
    case COUNT_BIG:{
      jj_consume_token(COUNT_BIG);
      break;
      }
    case ROW_NUMBER:{
      jj_consume_token(ROW_NUMBER);
      break;
      }
    case RANK:{
      jj_consume_token(RANK);
      break;
      }
    case DENSE_RANK:{
      jj_consume_token(DENSE_RANK);
      break;
      }
    case SUM:{
      jj_consume_token(SUM);
      break;
      }
    case AVG:{
      jj_consume_token(AVG);
      break;
      }
    case MIN:{
      jj_consume_token(MIN);
      break;
      }
    case MAX:{
      jj_consume_token(MAX);
      break;
      }
    case EVERY:{
      jj_consume_token(EVERY);
      break;
      }
    case STDDEV_POP:{
      jj_consume_token(STDDEV_POP);
      break;
      }
    case STDDEV_SAMP:{
      jj_consume_token(STDDEV_SAMP);
      break;
      }
    case VAR_SAMP:{
      jj_consume_token(VAR_SAMP);
      break;
      }
    case VAR_POP:{
      jj_consume_token(VAR_POP);
      break;
      }
    case DOCUMENT:{
      jj_consume_token(DOCUMENT);
      break;
      }
    case CONTENT:{
      jj_consume_token(CONTENT);
      break;
      }
    case TRIM:{
      jj_consume_token(TRIM);
      break;
      }
    case EMPTY:{
      jj_consume_token(EMPTY);
      break;
      }
    case ORDINALITY:{
      jj_consume_token(ORDINALITY);
      break;
      }
    case PATH:{
      jj_consume_token(PATH);
      break;
      }
    case FIRST:{
      jj_consume_token(FIRST);
      break;
      }
    case LAST:{
      jj_consume_token(LAST);
      break;
      }
    case NEXT:{
      jj_consume_token(NEXT);
      break;
      }
    case SUBSTRING:{
      jj_consume_token(SUBSTRING);
      break;
      }
    case EXTRACT:{
      jj_consume_token(EXTRACT);
      break;
      }
    case TO_CHARS:{
      jj_consume_token(TO_CHARS);
      break;
      }
    case TO_BYTES:{
      jj_consume_token(TO_BYTES);
      break;
      }
    case TIMESTAMPADD:{
      jj_consume_token(TIMESTAMPADD);
      break;
      }
    case TIMESTAMPDIFF:{
      jj_consume_token(TIMESTAMPDIFF);
      break;
      }
    case QUERYSTRING:{
      jj_consume_token(QUERYSTRING);
      break;
      }
    case NAMESPACE:{
      jj_consume_token(NAMESPACE);
      break;
      }
    case RESULT:{
      jj_consume_token(RESULT);
      break;
      }
    case ACCESSPATTERN:{
      jj_consume_token(ACCESSPATTERN);
      break;
      }
    case AUTO_INCREMENT:{
      jj_consume_token(AUTO_INCREMENT);
      break;
      }
    case WELLFORMED:{
      jj_consume_token(WELLFORMED);
      break;
      }
    case SQL_TSI_FRAC_SECOND:{
      jj_consume_token(SQL_TSI_FRAC_SECOND);
      break;
      }
    case SQL_TSI_SECOND:{
      jj_consume_token(SQL_TSI_SECOND);
      break;
      }
    case SQL_TSI_MINUTE:{
      jj_consume_token(SQL_TSI_MINUTE);
      break;
      }
    case SQL_TSI_HOUR:{
      jj_consume_token(SQL_TSI_HOUR);
      break;
      }
    case SQL_TSI_DAY:{
      jj_consume_token(SQL_TSI_DAY);
      break;
      }
    case SQL_TSI_WEEK:{
      jj_consume_token(SQL_TSI_WEEK);
      break;
      }
    case SQL_TSI_MONTH:{
      jj_consume_token(SQL_TSI_MONTH);
      break;
      }
    case SQL_TSI_QUARTER:{
      jj_consume_token(SQL_TSI_QUARTER);
      break;
      }
    case SQL_TSI_YEAR:{
      jj_consume_token(SQL_TSI_YEAR);
      break;
      }
    case TEXTTABLE:{
      jj_consume_token(TEXTTABLE);
      break;
      }
    case ARRAYTABLE:{
      jj_consume_token(ARRAYTABLE);
      break;
      }
    case JSONTABLE:{
      jj_consume_token(JSONTABLE);
      break;
      }
    case SELECTOR:{
      jj_consume_token(SELECTOR);
      break;
      }
    case SKIP_KEYWORD:{
      jj_consume_token(SKIP_KEYWORD);
      break;
      }
    case WIDTH:{
      jj_consume_token(WIDTH);
      break;
      }
    case PASSING:{
      jj_consume_token(PASSING);
      break;
      }
    case NAME:{
      jj_consume_token(NAME);
      break;
      }
    case ENCODING:{
      jj_consume_token(ENCODING);
      break;
      }
    case COLUMNS:{
      jj_consume_token(COLUMNS);
      break;
      }
    case DELIMITER:{
      jj_consume_token(DELIMITER);
      break;
      }
    case QUOTE:{
      jj_consume_token(QUOTE);
      break;
      }
    case HEADER:{
      jj_consume_token(HEADER);
      break;
      }
    case NULLS:{
      jj_consume_token(NULLS);
      break;
      }
    case OBJECTTABLE:{
      jj_consume_token(OBJECTTABLE);
      break;
      }
    case VERSION:{
      jj_consume_token(VERSION);
      break;
      }
    case INCLUDING:{
      jj_consume_token(INCLUDING);
      break;
      }
    case EXCLUDING:{
      jj_consume_token(EXCLUDING);
      break;
      }
    case XMLDECLARATION:{
      jj_consume_token(XMLDECLARATION);
      break;
      }
    case VARIADIC:{
      jj_consume_token(VARIADIC);
      break;
      }
    case RAISE:{
      jj_consume_token(RAISE);
      break;
      }
    case CHAIN:{
      jj_consume_token(CHAIN);
      break;
      }
    case JSONARRAY_AGG:{
      jj_consume_token(JSONARRAY_AGG);
      break;
      }
    case JSONOBJECT:{
      jj_consume_token(JSONOBJECT);
      break;
      }
    case PRESERVE:{
      jj_consume_token(PRESERVE);
      break;
      }
    case UPSERT:{
      jj_consume_token(UPSERT);
      break;
      }
    case AFTER:{
      jj_consume_token(AFTER);
      break;
      }
    case TYPE:{
      jj_consume_token(TYPE);
      break;
      }
    case TRANSLATOR:{
      jj_consume_token(TRANSLATOR);
      break;
      }
    case JAAS:{
      jj_consume_token(JAAS);
      break;
      }
    case CONDITION:{
      jj_consume_token(CONDITION);
      break;
      }
    case MASK:{
      jj_consume_token(MASK);
      break;
      }
    case ACCESS:{
      jj_consume_token(ACCESS);
      break;
      }
    case CONTROL:{
      jj_consume_token(CONTROL);
      break;
      }
    case NONE:{
      jj_consume_token(NONE);
      break;
      }
    case DATA:{
      jj_consume_token(DATA);
      break;
      }
    case DATABASE:{
      jj_consume_token(DATABASE);
      break;
      }
    case PRIVILEGES:{
      jj_consume_token(PRIVILEGES);
      break;
      }
    case ROLE:{
      jj_consume_token(ROLE);
      break;
      }
    case SCHEMA:{
      jj_consume_token(SCHEMA);
      break;
      }
    case USE:{
      jj_consume_token(USE);
      break;
      }
    case REPOSITORY:{
      jj_consume_token(REPOSITORY);
      break;
      }
    case RENAME:{
      jj_consume_token(RENAME);
      break;
      }
    case DOMAIN:{
      jj_consume_token(DOMAIN);
      break;
      }
    case USAGE:{
      jj_consume_token(USAGE);
      break;
      }
    case POSITION:{
      jj_consume_token(POSITION);
      break;
      }
    case CURRENT:{
      jj_consume_token(CURRENT);
      break;
      }
    case UNBOUNDED:{
      jj_consume_token(UNBOUNDED);
      break;
      }
    case PRECEDING:{
      jj_consume_token(PRECEDING);
      break;
      }
    case FOLLOWING:{
      jj_consume_token(FOLLOWING);
      break;
      }
    case LISTAGG:{
      jj_consume_token(LISTAGG);
      break;
      }
    case EXPLAIN:{
      jj_consume_token(EXPLAIN);
      break;
      }
    case ANALYZE:{
      jj_consume_token(ANALYZE);
      break;
      }
    case TEXT:{
      jj_consume_token(TEXT);
      break;
      }
    case FORMAT:{
      jj_consume_token(FORMAT);
      break;
      }
    case YAML:{
      jj_consume_token(YAML);
      break;
      }
    case EPOCH:{
      jj_consume_token(EPOCH);
      break;
      }
    case QUARTER:{
      jj_consume_token(QUARTER);
      break;
      }
    case POLICY:{
      jj_consume_token(POLICY);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return getToken(0);}
    throw new Error("Missing return statement in function");
}

/*
name=Unqualified identifier
description=Unqualified name of a single entity.
example=[source,sql]\n----\n"tbl"\n----\n
*/
  final public String unqualifiedId() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
{if ("" != null) return normalizeId(getToken(0).image, ParseInfo.REQUIRE_UNQUALIFIED_NAMES);}
      break;
      }
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:{
      nonReserved();
{if ("" != null) return getToken(0).image;}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=identifier
description=Partial or full name of a single entity.
example=[source,sql]\n----\ntbl.col\n----\n\n[source,sql]\n----\n"tbl"."col"\n----\n
*/
  final public String id(Boolean nonAlias) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
String id = normalizeId(getToken(0).image);
                if (nonAlias != null) {
                        {if ("" != null) return validateName(id, nonAlias);}
                }
                {if ("" != null) return id;}
      break;
      }
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:{
      nonReserved();
{if ("" != null) return getToken(0).image;}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/* TODO: createProcedure should not be here, but is due to all of the legacy tests
unused=true
*/
  final public Command command(ParseInfo info) throws ParseException {Command command = null;
    if (jj_2_1(2)) {
      command = createProcedure(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALTER:
      case BEGIN:
      case CALL:
      case CREATE:
      case DELETE:
      case DROP:
      case EXEC:
      case EXECUTE:
      case INSERT:
      case MERGE:
      case SELECT:
      case TABLE:
      case UPDATE:
      case VALUES:
      case WITH:
      case UPSERT:
      case LPAREN:{
        command = userCommand(info);
        break;
        }
      case LBRACE:{
        command = callableStatement(info);
        break;
        }
      case EXPLAIN:{
        command = explainCommand(info);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      ;
    }
    jj_consume_token(0);
{if ("" != null) return command;}
    throw new Error("Missing return statement in function");
}

/*
name=create trigger
description=Creates a trigger action on the given target.
example=[source,sql]\n----\nCREATE TRIGGER ON vw INSTEAD OF INSERT AS FOR EACH ROW BEGIN ATOMIC ... END\n----\n
*/
  final public Command createTrigger(ParseInfo info, boolean ddl) throws ParseException {String target = null;
        TriggerAction triggerAction = null;
        Token event = null;
        boolean after = false;
        String name = null;
    jj_consume_token(CREATE);
    jj_consume_token(TRIGGER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      name = id(Boolean.TRUE);
      break;
      }
    default:
      ;
    }
    jj_consume_token(ON);
    target = id(null);
if (ddl) {
        String rawId = getToken(0).image;
        if (rawId.indexOf('.') >= 0 && (!(rawId.startsWith("\"") && rawId.endsWith("\"")) || rawId.substring(1, rawId.length()-1).indexOf("\"") >= 0)) {
            //this is not fully correct, but catches all cases except for identifiers containing a quote character
            {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.ddl_id_unqualified", rawId));} //$NON-NLS-1$
        }
          }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTEAD:{
      jj_consume_token(INSTEAD);
      jj_consume_token(OF);
      break;
      }
    case AFTER:{
      jj_consume_token(AFTER);
after = true;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSERT:{
      event = jj_consume_token(INSERT);
      break;
      }
    case UPDATE:{
      event = jj_consume_token(UPDATE);
      break;
      }
    case DELETE:{
      event = jj_consume_token(DELETE);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(AS);
    triggerAction = forEachRowTriggerAction(info);
AlterTrigger alterTrigger = new AlterTrigger();
                alterTrigger.setTarget(new GroupSymbol(target));
                alterTrigger.setDefinition(triggerAction);
                alterTrigger.setEvent(Table.TriggerEvent.valueOf(event.image.toUpperCase()));
                alterTrigger.setCreate(true);
                alterTrigger.setAfter(after);
                alterTrigger.setName(name);
                {if ("" != null) return alterTrigger;}
    throw new Error("Missing return statement in function");
}

/*
name=alter
description=Alter the given target.
example=[source,sql]\n----\nALTER VIEW vw AS SELECT col FROM tbl\n----\n
*/
  final public Command alter(ParseInfo info) throws ParseException {String target = null;
        QueryCommand command = null;
        Statement stmt = null;
        TriggerAction triggerAction = null;
        Token comment = null;
        Token event = null;
        Boolean enabled = null;
        boolean after = false;
        String name = null;
    jj_consume_token(ALTER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIEW:{
      jj_consume_token(VIEW);
      target = id(null);
      jj_consume_token(AS);
comment = getToken(1).specialToken;
      command = queryExpression(info);
if (comment != null) {
                            command.setCacheHint(getQueryCacheOption(comment.image));
                    }
                        AlterView alterView = new AlterView();
                        alterView.setTarget(new GroupSymbol(target));
                        alterView.setDefinition(command);
                        {if ("" != null) return alterView;}
      break;
      }
    case PROCEDURE:{
      jj_consume_token(PROCEDURE);
      target = id(null);
      jj_consume_token(AS);
comment = getToken(1).specialToken;
      stmt = statement(info);
CreateProcedureCommand cup = new CreateProcedureCommand(asBlock(stmt));
                        if (comment != null) {
                            cup.setCacheHint(getQueryCacheOption(comment.image));
                    }
                        AlterProcedure alterProc = new AlterProcedure();
                        alterProc.setTarget(new GroupSymbol(target));
                        alterProc.setDefinition(cup);
                        {if ("" != null) return alterProc;}
      break;
      }
    case TRIGGER:{
      jj_consume_token(TRIGGER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case SERIAL:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case INDEX:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case EXCEPTION:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case DEFAULT_KEYWORD:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:{
        name = id(Boolean.TRUE);
        break;
        }
      default:
        ;
      }
      jj_consume_token(ON);
      target = id(null);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSTEAD:{
        jj_consume_token(INSTEAD);
        jj_consume_token(OF);
        break;
        }
      case AFTER:{
        jj_consume_token(AFTER);
after = true;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSERT:{
        event = jj_consume_token(INSERT);
        break;
        }
      case UPDATE:{
        event = jj_consume_token(UPDATE);
        break;
        }
      case DELETE:{
        event = jj_consume_token(DELETE);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        jj_consume_token(AS);
        triggerAction = forEachRowTriggerAction(info);
        break;
        }
      case ENABLED:{
        jj_consume_token(ENABLED);
enabled=true;
        break;
        }
      case DISABLED:{
        jj_consume_token(DISABLED);
enabled=false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
AlterTrigger alterTrigger = new AlterTrigger();
                        alterTrigger.setTarget(new GroupSymbol(target));
                        alterTrigger.setDefinition(triggerAction);
                        alterTrigger.setEvent(Table.TriggerEvent.valueOf(event.image.toUpperCase()));
                        if (enabled != null) {
                                alterTrigger.setEnabled(enabled);
                        }
                        alterTrigger.setName(name);
                        alterTrigger.setAfter(after);
                        {if ("" != null) return alterTrigger;}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=for each row trigger action
description=Defines an action to perform on each row.
example=[source,sql]\n----\nFOR EACH ROW BEGIN ATOMIC ... END\n----\n
*/
  final public TriggerAction forEachRowTriggerAction(ParseInfo info) throws ParseException {Block b = new Block();
        b.setAtomic(true);
        Statement stmt = null;
    jj_consume_token(FOR);
    jj_consume_token(EACH);
    jj_consume_token(ROW);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BEGIN:{
      jj_consume_token(BEGIN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATOMIC:{
        jj_consume_token(ATOMIC);
        break;
        }
      default:
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALTER:
        case BEGIN:
        case BREAK:
        case CALL:
        case CONTINUE:
        case CREATE:
        case DECLARE:
        case DELETE:
        case DROP:
        case ERROR:
        case EXEC:
        case EXECUTE:
        case IF:
        case INSERT:
        case LEAVE:
        case LOOP:
        case MERGE:
        case RETURN:
        case SELECT:
        case TABLE:
        case UPDATE:
        case VALUES:
        case WITH:
        case WHILE:
        case INSTEAD:
        case ENABLED:
        case DISABLED:
        case VIEW:
        case KEY:
        case SERIAL:
        case TEXTAGG:
        case COUNT_BIG:
        case COUNT:
        case ROW_NUMBER:
        case RANK:
        case DENSE_RANK:
        case CURRENT:
        case UNBOUNDED:
        case PRECEDING:
        case FOLLOWING:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case EVERY:
        case STDDEV_POP:
        case STDDEV_SAMP:
        case VAR_SAMP:
        case VAR_POP:
        case DOCUMENT:
        case CONTENT:
        case TRIM:
        case EMPTY:
        case ORDINALITY:
        case PATH:
        case FIRST:
        case LAST:
        case NEXT:
        case SUBSTRING:
        case EXTRACT:
        case TO_CHARS:
        case TO_BYTES:
        case TIMESTAMPADD:
        case TIMESTAMPDIFF:
        case QUERYSTRING:
        case NAMESPACE:
        case RESULT:
        case INDEX:
        case ACCESSPATTERN:
        case AUTO_INCREMENT:
        case WELLFORMED:
        case SQL_TSI_FRAC_SECOND:
        case SQL_TSI_SECOND:
        case SQL_TSI_MINUTE:
        case SQL_TSI_HOUR:
        case SQL_TSI_DAY:
        case SQL_TSI_WEEK:
        case SQL_TSI_MONTH:
        case SQL_TSI_QUARTER:
        case SQL_TSI_YEAR:
        case TEXTTABLE:
        case ARRAYTABLE:
        case JSONTABLE:
        case SELECTOR:
        case SKIP_KEYWORD:
        case WIDTH:
        case PASSING:
        case NAME:
        case ENCODING:
        case COLUMNS:
        case DELIMITER:
        case QUOTE:
        case HEADER:
        case NULLS:
        case OBJECTTABLE:
        case VERSION:
        case INCLUDING:
        case EXCLUDING:
        case XMLDECLARATION:
        case VARIADIC:
        case EXCEPTION:
        case RAISE:
        case CHAIN:
        case JSON:
        case JSONARRAY_AGG:
        case JSONOBJECT:
        case PRESERVE:
        case GEOMETRY:
        case GEOGRAPHY:
        case UPSERT:
        case AFTER:
        case DEFAULT_KEYWORD:
        case TYPE:
        case TRANSLATOR:
        case JAAS:
        case CONDITION:
        case MASK:
        case ACCESS:
        case CONTROL:
        case NONE:
        case DATA:
        case DATABASE:
        case PRIVILEGES:
        case SCHEMA:
        case ROLE:
        case USE:
        case REPOSITORY:
        case RENAME:
        case DOMAIN:
        case USAGE:
        case POSITION:
        case LISTAGG:
        case OBJECT:
        case EXPLAIN:
        case ANALYZE:
        case TEXT:
        case FORMAT:
        case YAML:
        case POLICY:
        case EPOCH:
        case QUARTER:
        case ID:
        case LPAREN:{
          ;
          break;
          }
        default:
          break label_1;
        }
        stmt = statement(info);
b.addStatement(stmt);
      }
      jj_consume_token(END);
      break;
      }
    case ALTER:
    case BREAK:
    case CALL:
    case CONTINUE:
    case CREATE:
    case DECLARE:
    case DELETE:
    case DROP:
    case ERROR:
    case EXEC:
    case EXECUTE:
    case IF:
    case INSERT:
    case LEAVE:
    case LOOP:
    case MERGE:
    case RETURN:
    case SELECT:
    case TABLE:
    case UPDATE:
    case VALUES:
    case WITH:
    case WHILE:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case LPAREN:{
      stmt = statement(info);
b = asBlock(stmt);
       b.setAtomic(true);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new TriggerAction(b);}
    throw new Error("Missing return statement in function");
}

/*
name=explain
description=Returns the query plan for the statement
example=EXPLAIN select 1
index=true
*/
  final public Command explainCommand(ParseInfo info) throws ParseException {Command command = null;
    ExplainCommand explain = new ExplainCommand();
    Token comment = null;
    jj_consume_token(EXPLAIN);
    if (jj_2_2(2)) {
      jj_consume_token(LPAREN);
      explainOption(info, explain);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_2;
        }
        jj_consume_token(COMMA);
        explainOption(info, explain);
      }
      jj_consume_token(RPAREN);
    } else {
      ;
    }
comment = getToken(1).specialToken;
    command = userCommand(info);
if (comment != null) {
          command.setCacheHint(getQueryCacheOption(comment.image));
        }
        explain.setCommand(command);
        {if ("" != null) return explain;}
    throw new Error("Missing return statement in function");
}

/*
name=explain option
description=Option for the explain statement
example=FORMAT YAML
*/
  final public void explainOption(ParseInfo info, ExplainCommand explain) throws ParseException {boolean val = true;
  ExplainCommand.Format format = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ANALYZE:{
      jj_consume_token(ANALYZE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case TRUE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:{
          jj_consume_token(TRUE);
          break;
          }
        case FALSE:{
          jj_consume_token(FALSE);
val=false;
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        ;
      }
explain.setAnalyze(val);
      break;
      }
    case FORMAT:{
      jj_consume_token(FORMAT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case XML:
      case TEXT:
      case YAML:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case XML:{
          jj_consume_token(XML);
format=ExplainCommand.Format.XML;
          break;
          }
        case TEXT:{
          jj_consume_token(TEXT);
format=ExplainCommand.Format.TEXT;
          break;
          }
        case YAML:{
          jj_consume_token(YAML);
format=ExplainCommand.Format.YAML;
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        ;
      }
explain.setFormat(format);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/*
name=directly executable statement
description=A statement that can be executed at runtime.
example=[source,sql]\n----\nSELECT * FROM tbl\n----\n
index=true
*/
  final public Command userCommand(ParseInfo info) throws ParseException {Command command = null;
        SourceHint sourceHint = null;
        Block block = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:
    case TABLE:
    case VALUES:
    case WITH:
    case LPAREN:{
      command = queryExpression(info);
      break;
      }
    case CALL:
    case EXEC:
    case EXECUTE:{
      command = storedProcedure(info, 1);
      break;
      }
    case INSERT:
    case MERGE:
    case UPSERT:{
sourceHint = getSourceHint(this);
      command = insert(info);
      break;
      }
    case UPDATE:{
sourceHint = getSourceHint(this);
      command = update(info);
      break;
      }
    case DELETE:{
sourceHint = getSourceHint(this);
      command = delete(info);
      break;
      }
    case DROP:{
      command = dropTable(info);
      break;
      }
    default:
      if (jj_2_3(2)) {
        command = createTempTable(info);
      } else if (jj_2_4(2)) {
        command = createForeignTempTable(info);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALTER:{
          command = alter(info);
          break;
          }
        case CREATE:{
          command = createTrigger(info, false);
          break;
          }
        case BEGIN:{
          block = compoundStatement(info);
command = new CreateProcedureCommand(block);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
setSourceHint(sourceHint, command);
                {if ("" != null) return command;}
    throw new Error("Missing return statement in function");
}

/*
name=drop table
description=Drop the given table.
example=[source,sql]\n----\nDROP TABLE #temp\n----\n
*/
  final public Command dropTable(ParseInfo info) throws ParseException {Drop drop = new Drop();
        String table = null;
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    table = id(null);
drop.setTable(new GroupSymbol(table));
                {if ("" != null) return drop;}
    throw new Error("Missing return statement in function");
}

/*
name=create temporary table
description=Creates a temporary table.
example=[source,sql]\n----\nCREATE LOCAL TEMPORARY TABLE tmp (col integer)\n----\n
*/
  final public Command createTempTable(ParseInfo info) throws ParseException {Create create = new Create();
        String table = null;
        String pkId = null;
        Column col = null;
        List<ElementSymbol> pk = null;
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LOCAL:{
      jj_consume_token(LOCAL);
      break;
      }
    default:
      ;
    }
    jj_consume_token(TEMPORARY);
    jj_consume_token(TABLE);
    table = unqualifiedId();
    jj_consume_token(LPAREN);
create.setTable(new GroupSymbol(table));
    col = tableElement(info);
create.getColumns().add(col);
    label_3:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      col = tableElement(info);
create.getColumns().add(col);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      jj_consume_token(PRIMARY);
      jj_consume_token(KEY);
      pk = columnList(true, true);
create.getPrimaryKey().addAll(pk);
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ON:{
      jj_consume_token(ON);
      jj_consume_token(COMMIT);
      jj_consume_token(PRESERVE);
create.setCommitAction(Create.CommitAction.PRESERVE_ROWS);
      jj_consume_token(ROWS);
      break;
      }
    default:
      ;
    }
{if ("" != null) return create;}
    throw new Error("Missing return statement in function");
}

/*
name=temporary table element
description=Defines a temporary table column.
example=[source,sql]\n----\ncol string NOT NULL\n----\n
*/
  final public Column tableElement(ParseInfo info) throws ParseException {String element = null;
        ParsedDataType type = null;
        boolean autoIncrement = false;
        //TODO: once we support udts, then this will need to inherit the nullability from the type
        boolean notNull = false;
    element = id(Boolean.TRUE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:
    case VARBINARY:
    case VARCHAR:
    case BOOLEAN:
    case BYTE:
    case TINYINT:
    case SHORT:
    case SMALLINT:
    case CHAR:
    case INTEGER:
    case LONG:
    case BIGINT:
    case BIGINTEGER:
    case FLOAT:
    case REAL:
    case DOUBLE:
    case BIGDECIMAL:
    case DECIMAL:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case BLOB:
    case CLOB:
    case XML:
    case JSON:
    case GEOMETRY:
    case GEOGRAPHY:
    case OBJECT:{
      type = parseBasicDataType();
      break;
      }
    case SERIAL:{
      jj_consume_token(SERIAL);
type = new ParsedDataType("INTEGER");
            autoIncrement = true;
            notNull = true;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(NULL);
notNull = true;
      break;
      }
    default:
      ;
    }
Column c = new Column();
            c.setName(element);
            c.setRuntimeType(type.type);
            c.setAutoIncremented(autoIncrement);
            c.setNullType(notNull?NullType.No_Nulls:NullType.Nullable);
            {if ("" != null) return c;}
    throw new Error("Missing return statement in function");
}

/*
name=raise error statement
description=Raises an error with the given message.
example=[source,sql]\n----\nERROR 'something went wrong'\n----\n
*/
  final public RaiseStatement errorStatement(ParseInfo info) throws ParseException {Expression errMsg = null;
    jj_consume_token(ERROR);
    errMsg = expression(info);
ExceptionExpression ee = new ExceptionExpression();
        ee.setMessage(errMsg);
        {if ("" != null) return new RaiseStatement(ee);}
    throw new Error("Missing return statement in function");
}

/*
name=raise statement
description=Raises an error or warning with the given message.
example=[source,sql]\n----\nRAISE SQLEXCEPTION 'something went wrong'\n----\n
*/
  final public RaiseStatement raiseStatement(ParseInfo info) throws ParseException {Expression err = null;
    boolean warning = false;
    jj_consume_token(RAISE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SQLWARNING:{
      jj_consume_token(SQLWARNING);
warning = true;
      break;
      }
    default:
      ;
    }
    err = exceptionReference(info);
{if ("" != null) return new RaiseStatement(err, warning);}
    throw new Error("Missing return statement in function");
}

/*
name=exception reference
description=a reference to an exception
example=[source,sql]\n----\nSQLEXCEPTION 'something went wrong' SQLSTATE '00X', 2\n----\n
*/
  final public Expression exceptionReference(ParseInfo info) throws ParseException {String id = null;
        Expression ex;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      id = id(null);
{if ("" != null) return new ElementSymbol(id);}
      break;
      }
    case SQLEXCEPTION:{
      ex = exception(info);
{if ("" != null) return ex;}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=sql exception
description=creates a sql exception or warning with the specified message, state, and code
example=[source,sql]\n----\nSQLEXCEPTION 'something went wrong' SQLSTATE '00X', 2\n----\n
*/
  final public Expression exception(ParseInfo info) throws ParseException {Expression err = null;
        Expression sqlState = null;
        Expression errCode = null;
        Expression parent = null;
    jj_consume_token(SQLEXCEPTION);
    err = commonValueExpression(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SQLSTATE:{
      jj_consume_token(SQLSTATE);
      sqlState = commonValueExpression(info);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        errCode = commonValueExpression(info);
        break;
        }
      default:
        ;
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAIN:{
      jj_consume_token(CHAIN);
      parent = exceptionReference(info);
      break;
      }
    default:
      ;
    }
ExceptionExpression ee = new ExceptionExpression();
                ee.setMessage(err);
                ee.setSqlState(sqlState);
                ee.setErrorCode(errCode);
                ee.setParent(parent);
                {if ("" != null) return ee;}
    throw new Error("Missing return statement in function");
}

/*
name=statement
description=A procedure statement.
example=[source,sql]\n----\nIF (x = 5) BEGIN ... END\n----\n
*/
  final public Statement statement(ParseInfo info) throws ParseException {Statement stmt = null;
    String label = null;
    if (jj_2_6(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case SERIAL:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case INDEX:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case EXCEPTION:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case DEFAULT_KEYWORD:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:{
        label = id(null);
        jj_consume_token(COLON);
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOOP:{
        stmt = loopStatement(info);
        break;
        }
      case WHILE:{
        stmt = whileStatement(info);
        break;
        }
      case BEGIN:{
        stmt = compoundStatement(info);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
((Statement.Labeled)stmt).setLabel(label);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALTER:
      case BEGIN:
      case BREAK:
      case CALL:
      case CONTINUE:
      case CREATE:
      case DECLARE:
      case DELETE:
      case DROP:
      case ERROR:
      case EXEC:
      case EXECUTE:
      case IF:
      case INSERT:
      case LEAVE:
      case MERGE:
      case RETURN:
      case SELECT:
      case TABLE:
      case UPDATE:
      case VALUES:
      case WITH:
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case SERIAL:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case INDEX:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case EXCEPTION:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case DEFAULT_KEYWORD:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:
      case LPAREN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:{
          stmt = ifStatement(info);
          break;
          }
        case ALTER:
        case BEGIN:
        case BREAK:
        case CALL:
        case CONTINUE:
        case CREATE:
        case DECLARE:
        case DELETE:
        case DROP:
        case ERROR:
        case EXEC:
        case EXECUTE:
        case INSERT:
        case LEAVE:
        case MERGE:
        case RETURN:
        case SELECT:
        case TABLE:
        case UPDATE:
        case VALUES:
        case WITH:
        case INSTEAD:
        case ENABLED:
        case DISABLED:
        case VIEW:
        case KEY:
        case SERIAL:
        case TEXTAGG:
        case COUNT_BIG:
        case COUNT:
        case ROW_NUMBER:
        case RANK:
        case DENSE_RANK:
        case CURRENT:
        case UNBOUNDED:
        case PRECEDING:
        case FOLLOWING:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case EVERY:
        case STDDEV_POP:
        case STDDEV_SAMP:
        case VAR_SAMP:
        case VAR_POP:
        case DOCUMENT:
        case CONTENT:
        case TRIM:
        case EMPTY:
        case ORDINALITY:
        case PATH:
        case FIRST:
        case LAST:
        case NEXT:
        case SUBSTRING:
        case EXTRACT:
        case TO_CHARS:
        case TO_BYTES:
        case TIMESTAMPADD:
        case TIMESTAMPDIFF:
        case QUERYSTRING:
        case NAMESPACE:
        case RESULT:
        case INDEX:
        case ACCESSPATTERN:
        case AUTO_INCREMENT:
        case WELLFORMED:
        case SQL_TSI_FRAC_SECOND:
        case SQL_TSI_SECOND:
        case SQL_TSI_MINUTE:
        case SQL_TSI_HOUR:
        case SQL_TSI_DAY:
        case SQL_TSI_WEEK:
        case SQL_TSI_MONTH:
        case SQL_TSI_QUARTER:
        case SQL_TSI_YEAR:
        case TEXTTABLE:
        case ARRAYTABLE:
        case JSONTABLE:
        case SELECTOR:
        case SKIP_KEYWORD:
        case WIDTH:
        case PASSING:
        case NAME:
        case ENCODING:
        case COLUMNS:
        case DELIMITER:
        case QUOTE:
        case HEADER:
        case NULLS:
        case OBJECTTABLE:
        case VERSION:
        case INCLUDING:
        case EXCLUDING:
        case XMLDECLARATION:
        case VARIADIC:
        case EXCEPTION:
        case RAISE:
        case CHAIN:
        case JSON:
        case JSONARRAY_AGG:
        case JSONOBJECT:
        case PRESERVE:
        case GEOMETRY:
        case GEOGRAPHY:
        case UPSERT:
        case AFTER:
        case DEFAULT_KEYWORD:
        case TYPE:
        case TRANSLATOR:
        case JAAS:
        case CONDITION:
        case MASK:
        case ACCESS:
        case CONTROL:
        case NONE:
        case DATA:
        case DATABASE:
        case PRIVILEGES:
        case SCHEMA:
        case ROLE:
        case USE:
        case REPOSITORY:
        case RENAME:
        case DOMAIN:
        case USAGE:
        case POSITION:
        case LISTAGG:
        case OBJECT:
        case EXPLAIN:
        case ANALYZE:
        case TEXT:
        case FORMAT:
        case YAML:
        case POLICY:
        case EPOCH:
        case QUARTER:
        case ID:
        case LPAREN:{
          stmt = delimitedStatement(info);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return stmt;}
    throw new Error("Missing return statement in function");
}

/*
name=delimited statement
description=A procedure statement terminated by ;.
example=[source,sql]\n----\nSELECT * FROM tbl;\n----\n
*/
  final public Statement delimitedStatement(ParseInfo info) throws ParseException {Statement stmt = null;
    if (jj_2_7(2)) {
      stmt = assignStatement(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALTER:
      case BEGIN:
      case CALL:
      case CREATE:
      case DELETE:
      case DROP:
      case EXEC:
      case EXECUTE:
      case INSERT:
      case MERGE:
      case SELECT:
      case TABLE:
      case UPDATE:
      case VALUES:
      case WITH:
      case UPSERT:
      case LPAREN:{
        stmt = sqlStatement(info);
        break;
        }
      case ERROR:{
        stmt = errorStatement(info);
        break;
        }
      case RAISE:{
        stmt = raiseStatement(info);
        break;
        }
      case DECLARE:{
        stmt = declareStatement(info);
        break;
        }
      case BREAK:
      case CONTINUE:
      case LEAVE:{
        stmt = branchingStatement(info);
        break;
        }
      case RETURN:{
        stmt = returnStatement(info);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return stmt;}
    throw new Error("Missing return statement in function");
}

/*
name=compound statement
description=A procedure statement block contained in BEGIN END.
example=[source,sql]\n----\nBEGIN NOT ATOMIC ... END\n----\n
*/
  final public Block compoundStatement(ParseInfo info) throws ParseException {Statement stmt = null;
    Block block = new Block();
    Boolean atomic = null;
    String eId = null;
    jj_consume_token(BEGIN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATOMIC:
    case NOT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        jj_consume_token(NOT);
atomic = Boolean.FALSE;
        break;
        }
      default:
        ;
      }
      jj_consume_token(ATOMIC);
if (atomic == null) {atomic = Boolean.TRUE;}
      break;
      }
    default:
      ;
    }
    label_4:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_4;
      }
      stmt = statement(info);
block.addStatement(stmt, false);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXCEPTION:{
      jj_consume_token(EXCEPTION);
      eId = id(Boolean.FALSE);
block.setExceptionGroup(eId);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALTER:
        case BEGIN:
        case BREAK:
        case CALL:
        case CONTINUE:
        case CREATE:
        case DECLARE:
        case DELETE:
        case DROP:
        case ERROR:
        case EXEC:
        case EXECUTE:
        case IF:
        case INSERT:
        case LEAVE:
        case LOOP:
        case MERGE:
        case RETURN:
        case SELECT:
        case TABLE:
        case UPDATE:
        case VALUES:
        case WITH:
        case WHILE:
        case INSTEAD:
        case ENABLED:
        case DISABLED:
        case VIEW:
        case KEY:
        case SERIAL:
        case TEXTAGG:
        case COUNT_BIG:
        case COUNT:
        case ROW_NUMBER:
        case RANK:
        case DENSE_RANK:
        case CURRENT:
        case UNBOUNDED:
        case PRECEDING:
        case FOLLOWING:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case EVERY:
        case STDDEV_POP:
        case STDDEV_SAMP:
        case VAR_SAMP:
        case VAR_POP:
        case DOCUMENT:
        case CONTENT:
        case TRIM:
        case EMPTY:
        case ORDINALITY:
        case PATH:
        case FIRST:
        case LAST:
        case NEXT:
        case SUBSTRING:
        case EXTRACT:
        case TO_CHARS:
        case TO_BYTES:
        case TIMESTAMPADD:
        case TIMESTAMPDIFF:
        case QUERYSTRING:
        case NAMESPACE:
        case RESULT:
        case INDEX:
        case ACCESSPATTERN:
        case AUTO_INCREMENT:
        case WELLFORMED:
        case SQL_TSI_FRAC_SECOND:
        case SQL_TSI_SECOND:
        case SQL_TSI_MINUTE:
        case SQL_TSI_HOUR:
        case SQL_TSI_DAY:
        case SQL_TSI_WEEK:
        case SQL_TSI_MONTH:
        case SQL_TSI_QUARTER:
        case SQL_TSI_YEAR:
        case TEXTTABLE:
        case ARRAYTABLE:
        case JSONTABLE:
        case SELECTOR:
        case SKIP_KEYWORD:
        case WIDTH:
        case PASSING:
        case NAME:
        case ENCODING:
        case COLUMNS:
        case DELIMITER:
        case QUOTE:
        case HEADER:
        case NULLS:
        case OBJECTTABLE:
        case VERSION:
        case INCLUDING:
        case EXCLUDING:
        case XMLDECLARATION:
        case VARIADIC:
        case EXCEPTION:
        case RAISE:
        case CHAIN:
        case JSON:
        case JSONARRAY_AGG:
        case JSONOBJECT:
        case PRESERVE:
        case GEOMETRY:
        case GEOGRAPHY:
        case UPSERT:
        case AFTER:
        case DEFAULT_KEYWORD:
        case TYPE:
        case TRANSLATOR:
        case JAAS:
        case CONDITION:
        case MASK:
        case ACCESS:
        case CONTROL:
        case NONE:
        case DATA:
        case DATABASE:
        case PRIVILEGES:
        case SCHEMA:
        case ROLE:
        case USE:
        case REPOSITORY:
        case RENAME:
        case DOMAIN:
        case USAGE:
        case POSITION:
        case LISTAGG:
        case OBJECT:
        case EXPLAIN:
        case ANALYZE:
        case TEXT:
        case FORMAT:
        case YAML:
        case POLICY:
        case EPOCH:
        case QUARTER:
        case ID:
        case LPAREN:{
          ;
          break;
          }
        default:
          break label_5;
        }
        stmt = statement(info);
block.addStatement(stmt, true);
      }
      break;
      }
    default:
      ;
    }
    jj_consume_token(END);
if (atomic != null) {
                block.setAtomic(atomic);
        }
        {if ("" != null) return block;}
    throw new Error("Missing return statement in function");
}

/*
name=branching statement
description=A procedure branching control statement, which typically specifies a label to return control to.
example=[source,sql]\n----\nBREAK x\n----\n
*/
  final public BranchingStatement branchingStatement(ParseInfo info) throws ParseException {BranchingStatement breakStmt = new BranchingStatement();
    Token mode = null;
    String label = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BREAK:
    case CONTINUE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BREAK:{
        mode = jj_consume_token(BREAK);
        break;
        }
      case CONTINUE:{
        mode = jj_consume_token(CONTINUE);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case SERIAL:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case INDEX:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case EXCEPTION:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case DEFAULT_KEYWORD:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:{
        label = id(null);
        break;
        }
      default:
        ;
      }
      break;
      }
    case LEAVE:{
      mode = jj_consume_token(LEAVE);
      label = id(null);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
breakStmt.setMode(BranchingStatement.BranchingMode.valueOf(mode.image.toUpperCase()));
            breakStmt.setLabel(label);
                {if ("" != null) return breakStmt;}
    throw new Error("Missing return statement in function");
}

/*
name=return statement
description=A return statement.
example=[source,sql]\n----\nRETURN 1\n----\n
*/
  final public ReturnStatement returnStatement(ParseInfo info) throws ParseException {Expression ex = null;
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY:
    case ARRAY_AGG:
    case CASE:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case FALSE:
    case HOUR:
    case INSERT:
    case LEFT:
    case MINUTE:
    case MONTH:
    case NOT:
    case NULL:
    case RIGHT:
    case SECOND:
    case SESSION_USER:
    case SOME:
    case TRANSLATE:
    case TRUE:
    case UNKNOWN:
    case USER:
    case YEAR:
    case XMLAGG:
    case XMLCAST:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLEXISTS:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case ESCAPEDFUNCTION:
    case ESCAPEDTYPE:
    case DECIMALVAL:
    case FLOATVAL:
    case STRINGVAL:
    case UNSIGNEDINTEGER:
    case BINARYSTRINGVAL:
    case LPAREN:
    case PLUS:
    case MINUS:
    case QMARK:
    case DOLLAR:{
      ex = expression(info);
      break;
      }
    default:
      ;
    }
{if ("" != null) return new ReturnStatement(ex);}
    throw new Error("Missing return statement in function");
}

/*
name=while statement
description=A procedure while statement that executes until its condition is false.
example=[source,sql]\n----\nWHILE (var) BEGIN ... END\n----\n
*/
  final public WhileStatement whileStatement(ParseInfo info) throws ParseException {WhileStatement whileStmt = null;
    Criteria criteria = null;
    Statement stmt = null;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    criteria = criteria(info);
    jj_consume_token(RPAREN);
    stmt = statement(info);
whileStmt = new WhileStatement(criteria, asBlock(stmt));
        {if ("" != null) return whileStmt;}
    throw new Error("Missing return statement in function");
}

/*
name=loop statement
description=A procedure loop statement that executes over the given cursor.
example=[source,sql]\n----\nLOOP ON (SELECT * FROM tbl) AS x BEGIN ... END\n----\n
*/
  final public LoopStatement loopStatement(ParseInfo info) throws ParseException {LoopStatement loopStmt = null;
    String cursor = null;
    QueryCommand query = null;
    Statement stmt = null;
    jj_consume_token(LOOP);
    jj_consume_token(ON);
    jj_consume_token(LPAREN);
    query = queryExpression(info);
    jj_consume_token(RPAREN);
    jj_consume_token(AS);
    cursor = id(null);
    stmt = statement(info);
loopStmt = new LoopStatement(asBlock(stmt), query, cursor);
        {if ("" != null) return loopStmt;}
    throw new Error("Missing return statement in function");
}

/*
name=if statement
description=A procedure loop statement that executes over the given cursor.
example=[source,sql]\n----\nIF (boolVal) BEGIN variables.x = 1 END ELSE BEGIN variables.x = 2 END\n----\n
*/
  final public IfStatement ifStatement(ParseInfo info) throws ParseException {IfStatement ifStmt = null;
    Criteria criteria = null;
    Statement ifStatement = null;
    Statement elseStatement = null;
    String groupID = null;
    String groupID2 = null;
    boolean not = false;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    criteria = criteria(info);
    jj_consume_token(RPAREN);
    ifStatement = statement(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseStatement = statement(info);
      break;
      }
    default:
      ;
    }
ifStmt = new IfStatement(criteria, asBlock(ifStatement));
        ifStmt.setElseBlock(asBlock(elseStatement));
        {if ("" != null) return ifStmt;}
    throw new Error("Missing return statement in function");
}

/*
name=declare statement
description=A procedure declaration statement that creates a variable and optionally assigns a value.
example=[source,sql]\n----\nDECLARE STRING x = 'a'\n----\n
*/
  final public DeclareStatement declareStatement(ParseInfo info) throws ParseException {DeclareStatement declStmt = null;
    String var = null;
    ParsedDataType type = null;
    ElementSymbol variableID = null;
    LanguageObject value = null;
    jj_consume_token(DECLARE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:
    case VARBINARY:
    case VARCHAR:
    case BOOLEAN:
    case BYTE:
    case TINYINT:
    case SHORT:
    case SMALLINT:
    case CHAR:
    case INTEGER:
    case LONG:
    case BIGINT:
    case BIGINTEGER:
    case FLOAT:
    case REAL:
    case DOUBLE:
    case BIGDECIMAL:
    case DECIMAL:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case BLOB:
    case CLOB:
    case XML:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      type = parseDataType();
      break;
      }
    case EXCEPTION:{
      jj_consume_token(EXCEPTION);
type = new ParsedDataType(getToken(0).image);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    var = id(null);
variableID = new ElementSymbol(var);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      jj_consume_token(EQ);
      value = assignStatementOperand(info);
      break;
      }
    default:
      ;
    }
if (value instanceof Expression) {
                {if ("" != null) return new DeclareStatement(variableID, type.type, (Expression)value);}
        }
        if (value instanceof QueryCommand) {
                {if ("" != null) return new DeclareStatement(variableID, type.type, new ScalarSubquery((QueryCommand)value));}
        }
        {if ("" != null) return new DeclareStatement(variableID, type.type, (Command)value);}
    throw new Error("Missing return statement in function");
}

/*
name=assignment statement
description=Assigns a variable a value in a procedure.
example=[source,sql]\n----\nx = 'b'\n----\n
*/
  final public Statement assignStatement(ParseInfo info) throws ParseException {LanguageObject value = null;
    String var = null;
    ElementSymbol elementID = null;
    boolean returnable=true;
    var = id(null);
elementID = new ElementSymbol(var);
    jj_consume_token(EQ);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY:
    case ARRAY_AGG:
    case CASE:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case DELETE:
    case EXISTS:
    case FALSE:
    case HOUR:
    case INSERT:
    case LEFT:
    case MERGE:
    case MINUTE:
    case MONTH:
    case NOT:
    case NULL:
    case RIGHT:
    case SECOND:
    case SELECT:
    case SESSION_USER:
    case SOME:
    case SQLEXCEPTION:
    case TABLE:
    case TRANSLATE:
    case TRUE:
    case UNKNOWN:
    case USER:
    case UPDATE:
    case VALUES:
    case WITH:
    case YEAR:
    case XMLAGG:
    case XMLCAST:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLEXISTS:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case ESCAPEDFUNCTION:
    case ESCAPEDTYPE:
    case DECIMALVAL:
    case FLOATVAL:
    case STRINGVAL:
    case UNSIGNEDINTEGER:
    case BINARYSTRINGVAL:
    case LPAREN:
    case PLUS:
    case MINUS:
    case QMARK:
    case DOLLAR:{
      value = assignStatementOperand(info);
      break;
      }
    case CALL:
    case EXEC:
    case EXECUTE:{
      value = storedProcedure(info, 2);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WITH:
      case WITHOUT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WITH:{
          jj_consume_token(WITH);
          break;
          }
        case WITHOUT:{
          jj_consume_token(WITHOUT);
returnable = false;
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RETURN);
        break;
        }
      default:
        ;
      }
StoredProcedure storedProcedure = (StoredProcedure)value;
            SPParameter parameter = new SPParameter(1, SPParameter.RETURN_VALUE, "return"); //$NON-NLS-1$
            parameter.setExpression(elementID);
                storedProcedure.setParameter(parameter);
                storedProcedure.setCalledWithReturn(true);
                CommandStatement cs = new CommandStatement(storedProcedure);
                cs.setReturnable(returnable);
                {if ("" != null) return cs;}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
if (value instanceof Expression) {
                {if ("" != null) return new AssignmentStatement(elementID, (Expression)value);}
        }
        if (value instanceof QueryCommand) {
                {if ("" != null) return new AssignmentStatement(elementID, (QueryCommand)value);}
        }
        {if ("" != null) return new AssignmentStatement(elementID, (Command)value);}
    throw new Error("Missing return statement in function");
}

/*
name=assignment statement operand
description=A value or command that can be used in an assignment.  {note}All assignments except for expression are deprecated.{note}
*/
  final public LanguageObject assignStatementOperand(ParseInfo info) throws ParseException {LanguageObject value = null;
    if (jj_2_9(2147483647)) {
      value = insert(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UPDATE:{
        //deprecated
              value = update(info);
        break;
        }
      case DELETE:{
        //deprecated
              value = delete(info);
        break;
        }
      case CHAR:
      case DATE:
      case TIME:
      case TIMESTAMP:
      case CAST:
      case CONVERT:
      case ANY:
      case ARRAY:
      case ARRAY_AGG:
      case CASE:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case EXISTS:
      case FALSE:
      case HOUR:
      case INSERT:
      case LEFT:
      case MINUTE:
      case MONTH:
      case NOT:
      case NULL:
      case RIGHT:
      case SECOND:
      case SESSION_USER:
      case SOME:
      case TRANSLATE:
      case TRUE:
      case UNKNOWN:
      case USER:
      case YEAR:
      case XMLAGG:
      case XMLCAST:
      case XMLCONCAT:
      case XMLCOMMENT:
      case XMLELEMENT:
      case XMLEXISTS:
      case XMLFOREST:
      case XMLPARSE:
      case XMLPI:
      case XMLQUERY:
      case XMLSERIALIZE:
      case XMLTEXT:
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case SERIAL:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case PERCENT_RANK:
      case CUME_DIST:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case INDEX:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case EXCEPTION:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case DEFAULT_KEYWORD:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:
      case ESCAPEDFUNCTION:
      case ESCAPEDTYPE:
      case DECIMALVAL:
      case FLOATVAL:
      case STRINGVAL:
      case UNSIGNEDINTEGER:
      case BINARYSTRINGVAL:
      case LPAREN:
      case PLUS:
      case MINUS:
      case QMARK:
      case DOLLAR:{
        value = expression(info);
        break;
        }
      case SELECT:
      case TABLE:
      case VALUES:
      case WITH:{
        value = queryExpression(info);
        break;
        }
      case SQLEXCEPTION:{
        //deprecated should be a scalar subquery
              value = exception(info);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
}

/*
name=data statement
description=A procedure statement that executes a SQL statement.  An update statement can have its update count accessed via the ROWCOUNT variable.
*/
  final public CommandStatement sqlStatement(ParseInfo info) throws ParseException {Command cmd = null;
    String var = null;
    ElementSymbol elementID = null;
    StoredProcedure storedProcedure = null;
    boolean returnable = true;
    if (jj_2_10(2)) {
      cmd = userCommand(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXEC:
      case EXECUTE:{
        cmd = dynamicCommand(info);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITH:
    case WITHOUT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WITH:{
        jj_consume_token(WITH);
        break;
        }
      case WITHOUT:{
        jj_consume_token(WITHOUT);
returnable = false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RETURN);
      break;
      }
    default:
      ;
    }
CommandStatement cs = new CommandStatement(cmd);
        cs.setReturnable(returnable);
        {if ("" != null) return cs;}
    throw new Error("Missing return statement in function");
}

/*
unused=true
*/
  final public CreateProcedureCommand createProcedure(ParseInfo info) throws ParseException {CreateProcedureCommand procCmd =
        new CreateProcedureCommand();
    Statement stmt = null;
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRTUAL:{
      jj_consume_token(VIRTUAL);
      break;
      }
    default:
      ;
    }
    jj_consume_token(PROCEDURE);
    stmt = statement(info);
procCmd.setBlock(asBlock(stmt));
        {if ("" != null) return procCmd;}
    throw new Error("Missing return statement in function");
}

/*
name=procedure body definition
description=Defines a procedure body on a Procedure metadata object.
example=[source,sql]\n----\nBEGIN ... END\n----\n
unused=true
*/
  final public CreateProcedureCommand procedureBodyCommand(ParseInfo info) throws ParseException {CreateProcedureCommand procCmd =
        new CreateProcedureCommand();
    Statement stmt = null;
    if (jj_2_11(2)) {
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRTUAL:{
        jj_consume_token(VIRTUAL);
        break;
        }
      default:
        ;
      }
      jj_consume_token(PROCEDURE);
    } else {
      ;
    }
    stmt = statement(info);
    jj_consume_token(0);
procCmd.setBlock(asBlock(stmt));
        {if ("" != null) return procCmd;}
    throw new Error("Missing return statement in function");
}

/*
name=dynamic data statement
description=A procedure statement that can execute arbitrary sql.
example=[source,sql]\n----\nEXECUTE IMMEDIATE 'SELECT * FROM tbl' AS x STRING INTO #temp\n----\n
*/
  final public DynamicCommand dynamicCommand(ParseInfo info) throws ParseException {Expression sql = null;
    String groupID = null;
        GroupSymbol group = null;
        int updateCount = 0;
        List<TableFunctionReference.ProjectedColumn> elements = null;
        SetClauseList using = null;
        DynamicCommand dcStmt = new DynamicCommand();
        SetClauseList setClauseList = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXECUTE:{
      jj_consume_token(EXECUTE);
      break;
      }
    case EXEC:{
      jj_consume_token(EXEC);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:
    case IMMEDIATE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case IMMEDIATE:{
        jj_consume_token(IMMEDIATE);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    sql = expression(info);
dcStmt.setSql(sql);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      elements = createElementsWithTypes(info);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTO:{
        jj_consume_token(INTO);
        groupID = id(null);
group = new GroupSymbol(groupID);
        break;
        }
      default:
        ;
      }
dcStmt.setIntoGroup(group);
         List<ElementSymbol> symbols = new ArrayList(elements.size());
         for (TableFunctionReference.ProjectedColumn col : elements) {
                symbols.add(col.getSymbol());
         }
         dcStmt.setAsColumns(symbols);
         dcStmt.setAsClauseSet(true);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case USING:{
      jj_consume_token(USING);
      using = setClauseList(true, info);
dcStmt.setUsing(using);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UPDATE:{
      jj_consume_token(UPDATE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNSIGNEDINTEGER:{
        updateCount = intVal();
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
updateCount = 2;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
dcStmt.setUpdatingModelCount(updateCount);
        {if ("" != null) return dcStmt;}
    throw new Error("Missing return statement in function");
}

/*
name=set clause list
description=A list of value assignments.
example=[source,sql]\n----\ncol1 = 'x', col2 = 'y' ...\n----\n
*/
  final public SetClauseList setClauseList(boolean shortName, ParseInfo info) throws ParseException {SetClauseList using = new SetClauseList();
        String element = null;
        Expression value = null;
    element = id(shortName?Boolean.TRUE:null);
    jj_consume_token(EQ);
    value = expression(info);
ElementSymbol symbol = new ElementSymbol(element);
        using.addClause(symbol, value);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      element = id(null);
      jj_consume_token(EQ);
      value = expression(info);
symbol = new ElementSymbol(element);
          using.addClause(symbol, value);
    }
{if ("" != null) return using;}
    throw new Error("Missing return statement in function");
}

/*
name=typed element list
description=A list of typed elements.
example=[source,sql]\n----\ncol1 string, col2 integer ...\n----\n
*/
  final public List<TableFunctionReference.ProjectedColumn> createElementsWithTypes(ParseInfo info) throws ParseException {String element = null;
        ParsedDataType type = null;
        List<TableFunctionReference.ProjectedColumn> elements = new ArrayList<TableFunctionReference.ProjectedColumn>();
    element = id(Boolean.TRUE);
    type = parseBasicDataType();
TableFunctionReference.ProjectedColumn symbol = new TableFunctionReference.ProjectedColumn(element, type.type);
        elements.add(symbol);
    label_7:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(COMMA);
      element = id(Boolean.TRUE);
      type = parseBasicDataType();
symbol = new TableFunctionReference.ProjectedColumn(element, type.type);
                  elements.add(symbol);
    }
{if ("" != null) return elements;}
    throw new Error("Missing return statement in function");
}

/*
name=callable statement
description=A callable statement defined using JDBC escape syntax.
example=[source,sql]\n----\n{? = CALL proc}\n----\n
index=true
*/
  final public StoredProcedure callableStatement(ParseInfo info) throws ParseException {StoredProcedure storedProcedure = new StoredProcedure();
        storedProcedure.setCallableStatement(true);
        String procName = null;
        Option option = null;
        SPParameter parameter = null;
        int parameterIndex = 1;
        List<Expression> values = null;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QMARK:{
      jj_consume_token(QMARK);
      jj_consume_token(EQ);
parameter = new SPParameter(parameterIndex++, SPParameter.RETURN_VALUE, "return"); //$NON-NLS-1$
           storedProcedure.setParameter(parameter);
           storedProcedure.setCalledWithReturn(true);
      break;
      }
    default:
      ;
    }
    jj_consume_token(CALL);
    procName = id(null);
storedProcedure.setProcedureName(procName);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      if (jj_2_13(2)) {
        executeNamedParams(info, storedProcedure, parameterIndex);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHAR:
        case DATE:
        case TIME:
        case TIMESTAMP:
        case CAST:
        case CONVERT:
        case ANY:
        case ARRAY:
        case ARRAY_AGG:
        case CASE:
        case CURRENT_DATE:
        case CURRENT_TIME:
        case CURRENT_TIMESTAMP:
        case EXISTS:
        case FALSE:
        case HOUR:
        case INSERT:
        case LEFT:
        case MINUTE:
        case MONTH:
        case NOT:
        case NULL:
        case RIGHT:
        case SECOND:
        case SESSION_USER:
        case SOME:
        case TRANSLATE:
        case TRUE:
        case UNKNOWN:
        case USER:
        case YEAR:
        case XMLAGG:
        case XMLCAST:
        case XMLCONCAT:
        case XMLCOMMENT:
        case XMLELEMENT:
        case XMLEXISTS:
        case XMLFOREST:
        case XMLPARSE:
        case XMLPI:
        case XMLQUERY:
        case XMLSERIALIZE:
        case XMLTEXT:
        case INSTEAD:
        case ENABLED:
        case DISABLED:
        case VIEW:
        case KEY:
        case SERIAL:
        case TEXTAGG:
        case COUNT_BIG:
        case COUNT:
        case ROW_NUMBER:
        case RANK:
        case DENSE_RANK:
        case PERCENT_RANK:
        case CUME_DIST:
        case CURRENT:
        case UNBOUNDED:
        case PRECEDING:
        case FOLLOWING:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case EVERY:
        case STDDEV_POP:
        case STDDEV_SAMP:
        case VAR_SAMP:
        case VAR_POP:
        case DOCUMENT:
        case CONTENT:
        case TRIM:
        case EMPTY:
        case ORDINALITY:
        case PATH:
        case FIRST:
        case LAST:
        case NEXT:
        case SUBSTRING:
        case EXTRACT:
        case TO_CHARS:
        case TO_BYTES:
        case TIMESTAMPADD:
        case TIMESTAMPDIFF:
        case QUERYSTRING:
        case NAMESPACE:
        case RESULT:
        case INDEX:
        case ACCESSPATTERN:
        case AUTO_INCREMENT:
        case WELLFORMED:
        case SQL_TSI_FRAC_SECOND:
        case SQL_TSI_SECOND:
        case SQL_TSI_MINUTE:
        case SQL_TSI_HOUR:
        case SQL_TSI_DAY:
        case SQL_TSI_WEEK:
        case SQL_TSI_MONTH:
        case SQL_TSI_QUARTER:
        case SQL_TSI_YEAR:
        case TEXTTABLE:
        case ARRAYTABLE:
        case JSONTABLE:
        case SELECTOR:
        case SKIP_KEYWORD:
        case WIDTH:
        case PASSING:
        case NAME:
        case ENCODING:
        case COLUMNS:
        case DELIMITER:
        case QUOTE:
        case HEADER:
        case NULLS:
        case OBJECTTABLE:
        case VERSION:
        case INCLUDING:
        case EXCLUDING:
        case XMLDECLARATION:
        case VARIADIC:
        case EXCEPTION:
        case RAISE:
        case CHAIN:
        case JSON:
        case JSONARRAY_AGG:
        case JSONOBJECT:
        case PRESERVE:
        case GEOMETRY:
        case GEOGRAPHY:
        case UPSERT:
        case AFTER:
        case DEFAULT_KEYWORD:
        case TYPE:
        case TRANSLATOR:
        case JAAS:
        case CONDITION:
        case MASK:
        case ACCESS:
        case CONTROL:
        case NONE:
        case DATA:
        case DATABASE:
        case PRIVILEGES:
        case SCHEMA:
        case ROLE:
        case USE:
        case REPOSITORY:
        case RENAME:
        case DOMAIN:
        case USAGE:
        case POSITION:
        case LISTAGG:
        case OBJECT:
        case EXPLAIN:
        case ANALYZE:
        case TEXT:
        case FORMAT:
        case YAML:
        case POLICY:
        case EPOCH:
        case QUARTER:
        case ID:
        case ESCAPEDFUNCTION:
        case ESCAPEDTYPE:
        case DECIMALVAL:
        case FLOATVAL:
        case STRINGVAL:
        case UNSIGNEDINTEGER:
        case BINARYSTRINGVAL:
        case LPAREN:
        case PLUS:
        case MINUS:
        case QMARK:
        case DOLLAR:{
          values = expressionList(info);
convertToParameters(values, storedProcedure, parameterIndex);
          break;
          }
        default:
          ;
        }
      }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      ;
    }
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTION:{
      option = option(info);
storedProcedure.setOption(option);
      break;
      }
    default:
      ;
    }
{if ("" != null) return storedProcedure;}
    throw new Error("Missing return statement in function");
}

/*
name=call statement
description=Executes the procedure with the given parameters.
example=[source,sql]\n----\nCALL proc('a', 1)\n----\n
*/
  final public StoredProcedure storedProcedure(ParseInfo info, int startIndex) throws ParseException {String procName = null;
        Option option = null;
        List<Expression> values = null;
        StoredProcedure storedProcedure = new StoredProcedure();
        SourceHint sourceHint = null;
sourceHint = getSourceHint(this);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXEC:{
      jj_consume_token(EXEC);
      break;
      }
    case EXECUTE:{
      jj_consume_token(EXECUTE);
      break;
      }
    case CALL:{
      jj_consume_token(CALL);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    procName = id(null);
storedProcedure.setProcedureName(procName);
    jj_consume_token(LPAREN);
    if (jj_2_14(2)) {
      executeNamedParams(info, storedProcedure, startIndex);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR:
      case DATE:
      case TIME:
      case TIMESTAMP:
      case CAST:
      case CONVERT:
      case ANY:
      case ARRAY:
      case ARRAY_AGG:
      case CASE:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case EXISTS:
      case FALSE:
      case HOUR:
      case INSERT:
      case LEFT:
      case MINUTE:
      case MONTH:
      case NOT:
      case NULL:
      case RIGHT:
      case SECOND:
      case SESSION_USER:
      case SOME:
      case TRANSLATE:
      case TRUE:
      case UNKNOWN:
      case USER:
      case YEAR:
      case XMLAGG:
      case XMLCAST:
      case XMLCONCAT:
      case XMLCOMMENT:
      case XMLELEMENT:
      case XMLEXISTS:
      case XMLFOREST:
      case XMLPARSE:
      case XMLPI:
      case XMLQUERY:
      case XMLSERIALIZE:
      case XMLTEXT:
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case SERIAL:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case PERCENT_RANK:
      case CUME_DIST:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case INDEX:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case EXCEPTION:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case DEFAULT_KEYWORD:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:
      case ESCAPEDFUNCTION:
      case ESCAPEDTYPE:
      case DECIMALVAL:
      case FLOATVAL:
      case STRINGVAL:
      case UNSIGNEDINTEGER:
      case BINARYSTRINGVAL:
      case LPAREN:
      case PLUS:
      case MINUS:
      case QMARK:
      case DOLLAR:{
        values = expressionList(info);
convertToParameters(values, storedProcedure, startIndex);
        break;
        }
      default:
        ;
      }
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTION:{
      option = option(info);
storedProcedure.setOption(option);
      break;
      }
    default:
      ;
    }
storedProcedure.setSourceHint(sourceHint);
                {if ("" != null) return storedProcedure;}
    throw new Error("Missing return statement in function");
}

/*
name=named parameter list
description=A list of named parameters.
example=[source,sql]\n----\nparam1 => 'x', param2 => 1\n----\n
*/
  final public void executeNamedParams(ParseInfo info, StoredProcedure storedProcedure, int parameterIndex) throws ParseException {String name = null;
    Expression value = null;
        SPParameter parameter = null;
storedProcedure.setDisplayNamedParameters(true);
    name = id(null);
    jj_consume_token(EQ);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GT:{
      jj_consume_token(GT);
      break;
      }
    default:
      ;
    }
    value = expression(info);
parameter = new SPParameter(parameterIndex++, value);
                        parameter.setName(name);
                        parameter.setParameterType(SPParameter.IN);
                        storedProcedure.setParameter(parameter);
                        parameter = null;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_8;
      }
      jj_consume_token(COMMA);
      name = id(null);
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:{
        jj_consume_token(GT);
        break;
        }
      default:
        ;
      }
      value = expression(info);
parameter = new SPParameter(parameterIndex++, value);
                                parameter.setName(name);
                                parameter.setParameterType(SPParameter.IN);
                                storedProcedure.setParameter(parameter);
                                parameter = null;
    }
}

/*
name=insert statement
description=Inserts values into the given target.
example=[source,sql]\n----\nINSERT INTO tbl (col1, col2) VALUES ('a', 1)\n----\n
*/
  final public Insert insert(ParseInfo info) throws ParseException {Insert insert = new Insert();
        boolean upsert = false;
        String group = null;
        List values = null;
        List<ElementSymbol> columns = null;
        Option option = null;
        QueryCommand query = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSERT:{
      jj_consume_token(INSERT);
      break;
      }
    case MERGE:{
      jj_consume_token(MERGE);
upsert=true;
      break;
      }
    case UPSERT:{
      jj_consume_token(UPSERT);
upsert=true;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(INTO);
    group = id(null);
    if (jj_2_15(2147483647)) {
      columns = columnList(false, true);
insert.setVariables(columns);
    } else {
      ;
    }
    query = queryExpression(info);
insert.setQueryExpression(query);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTION:{
      option = option(info);
insert.setOption(option);
      break;
      }
    default:
      ;
    }
// Store group
                insert.setGroup(new GroupSymbol(group) );
                insert.setUpsert(upsert);
                {if ("" != null) return insert;}
    throw new Error("Missing return statement in function");
}

/*
name=expression list
description=A list of expressions.
example=[source,sql]\n----\ncol1, 'a', ...\n----\n
*/
  final public ArrayList<Expression> expressionList(ParseInfo info) throws ParseException {ArrayList<Expression> rowVals = new ArrayList<Expression>(4);
        Expression value = null;
    value = expression(info);
rowVals.add(value);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_9;
      }
      jj_consume_token(COMMA);
      value = expression(info);
rowVals.add(value);
    }
{if ("" != null) return rowVals;}
    throw new Error("Missing return statement in function");
}

/*
name=update statement
description=Update values in the given target.
example=[source,sql]\n----\nUPDATE tbl SET (col1 = 'a') WHERE col2 = 1\n----\n
*/
  final public Update update(ParseInfo info) throws ParseException {Update update = new Update();
        String group = null;
        SetClauseList setClauseList = null;
        Criteria criteria = null;
        Option option = null;
        String aliasID = null;
    jj_consume_token(UPDATE);
    group = id(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        jj_consume_token(AS);
        break;
        }
      default:
        ;
      }
      aliasID = id(Boolean.FALSE);
      break;
      }
    default:
      ;
    }
    jj_consume_token(SET);
    setClauseList = setClauseList(false, info);
update.setChangeList(setClauseList);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      criteria = where(info);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTION:{
      option = option(info);
update.setOption(option);
      break;
      }
    default:
      ;
    }
// Store group
                if(aliasID != null) {
            update.setGroup(new GroupSymbol(aliasID, group));
        } else {
            update.setGroup(new GroupSymbol(group));
        }

                // Store optional criteria
        update.setCriteria(criteria);

                {if ("" != null) return update;}
    throw new Error("Missing return statement in function");
}

/*
name=delete statement
description=Delete rows from the given target.
example=[source,sql]\n----\nDELETE FROM tbl WHERE col2 = 1\n----\n
*/
  final public Delete delete(ParseInfo info) throws ParseException {String group = null;
        Criteria criteria = null;
        Delete delete = new Delete();
        Option option = null;
        String aliasID = null;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    group = id(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        jj_consume_token(AS);
        break;
        }
      default:
        ;
      }
      aliasID = id(Boolean.FALSE);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      criteria = where(info);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTION:{
      option = option(info);
delete.setOption(option);
      break;
      }
    default:
      ;
    }
if(aliasID != null) {
            delete.setGroup(new GroupSymbol(aliasID, group));
        } else {
            delete.setGroup(new GroupSymbol(group));
        }
                delete.setCriteria(criteria);

        {if ("" != null) return delete;}
    throw new Error("Missing return statement in function");
}

/*
name=query expression
description=A declarative query for data.
example=[source,sql]\n----\nSELECT * FROM tbl WHERE col2 = 1\n----\n
*/
  final public QueryCommand queryExpression(ParseInfo info) throws ParseException {QueryCommand query = null;
        List<WithQueryCommand> withList = null;
        WithQueryCommand withQueryCommand = null;
        SourceHint sourceHint = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITH:{
      jj_consume_token(WITH);
      withQueryCommand = withListElement(info);
withList = new LinkedList<WithQueryCommand>();
            withList.add(withQueryCommand);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_10;
        }
        jj_consume_token(COMMA);
        withQueryCommand = withListElement(info);
withList.add(withQueryCommand);
      }
      break;
      }
    default:
      ;
    }
sourceHint = getSourceHint(this);
    query = queryExpressionBody(info);
query.setWith(withList);
                setSourceHint(sourceHint, query);
                {if ("" != null) return query;}
    throw new Error("Missing return statement in function");
}

/*
name=with list element
description=A query expression for use in the enclosing query.
example=[source,sql]\n----\nX (Y, Z) AS (SELECT 1, 2)\n----\n
*/
  final public WithQueryCommand withListElement(ParseInfo info) throws ParseException {String name = null;
   List<ElementSymbol> columns = null;
   QueryCommand queryExpression = null;
   Token lparen = null;
    name = id(Boolean.FALSE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      columns = columnList(true, true);
      break;
      }
    default:
      ;
    }
    jj_consume_token(AS);
    lparen = jj_consume_token(LPAREN);
    queryExpression = queryExpression(info);
    jj_consume_token(RPAREN);
WithQueryCommand result = new WithQueryCommand(new GroupSymbol(name), columns, queryExpression);
            parseWithHints(lparen, result);
            {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=query expression body
description=The body of a query expression, which can optionally be ordered and limited.
example=[source,sql]\n----\nSELECT * FROM tbl ORDER BY col1 LIMIT 1\n----\n
*/
  final public QueryCommand queryExpressionBody(ParseInfo info) throws ParseException {QueryCommand query = null;
    QueryCommand rightQuery = null;
    boolean all = false;
    Option option = null;
        OrderBy orderby = null;
        Limit limit = null;
        SetQuery.Operation type;
    query = queryTerm(info);
    label_11:
    while (true) {
      if (jj_2_16(1)) {
        ;
      } else {
        break label_11;
      }
      if (jj_2_17(2147483647) && (getToken(2).kind != JOIN)) {
        jj_consume_token(UNION);
type = SetQuery.Operation.UNION;
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXCEPT:{
          jj_consume_token(EXCEPT);
type = SetQuery.Operation.EXCEPT;
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALL:
      case DISTINCT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALL:{
          jj_consume_token(ALL);
all = true;
          break;
          }
        case DISTINCT:{
          jj_consume_token(DISTINCT);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        ;
      }
      rightQuery = queryTerm(info);
query = addQueryToSetOperation(query, rightQuery, type, all);
                all = false;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDER:{
      orderby = orderby(info);
query.setOrderBy( orderby );
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FETCH:
    case LIMIT:
    case OFFSET:{
      limit = limit(info);
query.setLimit( limit );
      break;
      }
    default:
      ;
    }
    if (jj_2_18(2147483647)) {
      option = option(info);
query.setOption(option);
    } else {
      ;
    }
{if ("" != null) return query;}
    throw new Error("Missing return statement in function");
}

/*
name=query term
description=Used to establish INTERSECT precedence.
example=[source,sql]\n----\nSELECT * FROM tbl\n----\n\n[source,sql]\n----\nSELECT * FROM tbl1 INTERSECT SELECT * FROM tbl2\n----\n
*/
  final public QueryCommand queryTerm(ParseInfo info) throws ParseException {QueryCommand query = null;
    QueryCommand rightQuery = null;
    boolean all = false;
    query = queryPrimary(info);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTERSECT:{
        ;
        break;
        }
      default:
        break label_12;
      }
      jj_consume_token(INTERSECT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALL:
      case DISTINCT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALL:{
          jj_consume_token(ALL);
all = true;
          break;
          }
        case DISTINCT:{
          jj_consume_token(DISTINCT);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        ;
      }
      rightQuery = queryPrimary(info);
query = addQueryToSetOperation(query, rightQuery, SetQuery.Operation.INTERSECT, all);
                all = false;
    }
{if ("" != null) return query;}
    throw new Error("Missing return statement in function");
}

/*
name=query primary
description=A declarative source of rows.
example=[source,sql]\n----\nTABLE tbl\n----\n\n[source,sql]\n----\nSELECT * FROM tbl1\n----\n
*/
  final public QueryCommand queryPrimary(ParseInfo info) throws ParseException {QueryCommand query = null;
    String name = null;
    List<Expression> expr = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:{
      query = query(info);
      break;
      }
    case VALUES:{
      jj_consume_token(VALUES);
      jj_consume_token(LPAREN);
      expr = expressionList(info);
query = Query.rowConstructor(expr);
      jj_consume_token(RPAREN);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_13;
        }
        jj_consume_token(COMMA);
        jj_consume_token(LPAREN);
        expr = expressionList(info);
query = new SetQuery(SetQuery.Operation.UNION, true, query, Query.rowConstructor(expr));
        jj_consume_token(RPAREN);
      }
      break;
      }
    case TABLE:{
      jj_consume_token(TABLE);
      name = id(null);
Query q = new Query();
           q.setSelect(new Select(Arrays.asList(new MultipleElementSymbol())));
           q.setFrom(new From(Arrays.asList(new UnaryFromClause(new GroupSymbol(name)))));
           query = q;
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      query = queryExpressionBody(info);
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return query;}
    throw new Error("Missing return statement in function");
}

/*
name=query
description=A SELECT query.
example=[source,sql]\n----\nSELECT col1, max(col2) FROM tbl GROUP BY col1\n----\n
*/
  final public Query query(ParseInfo info) throws ParseException {Select   select         = null;
        From     from           = null;
        Into     into                   = null;
        Criteria criteria       = null;
        GroupBy  groupBy        = null;
        Criteria having         = null;
    select = select(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTO:{
      into = into(info);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FROM:{
      from = from(info);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHERE:{
        criteria = where(info);
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GROUP:{
        groupBy = groupBy(info);
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HAVING:{
        having = having(info);
        break;
        }
      default:
        ;
      }
      break;
      }
    default:
      ;
    }
// Build query from parsed pieces
                Query query = new Query();
                query.setSelect( select );
                query.setFrom( from );
                query.setInto( into );
                query.setCriteria(criteria);
                query.setGroupBy(groupBy);
                query.setHaving(having);

                {if ("" != null) return query;}
    throw new Error("Missing return statement in function");
}

/*
name=into clause
description=Used to direct the query into a table.  {note}This is deprecated.  Use INSERT INTO with a query expression instead.{note}
example=[source,sql]\n----\nINTO tbl\n----\n
*/
  final public Into into(ParseInfo info) throws ParseException {String groupID = null;
        Into into = null;
    jj_consume_token(INTO);
    groupID = id(null);
into = new Into(new GroupSymbol(groupID));
                {if ("" != null) return into;}
    throw new Error("Missing return statement in function");
}

/*
name=select clause
description=The columns returned by a query.  Can optionally be distinct.
example=[source,sql]\n----\nSELECT *\n----\n\n[source,sql]\n----\nSELECT DISTINCT a, b, c\n----\n
 */
  final public Select select(ParseInfo info) throws ParseException {boolean isDistinct = false;             // unless DISTINCT keyword in SELECT
        Expression symbol = null;
        Select select = new Select();
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ALL:
    case DISTINCT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALL:{
        jj_consume_token(ALL);
        break;
        }
      case DISTINCT:{
        jj_consume_token(DISTINCT);
isDistinct=true;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:{
      jj_consume_token(STAR);
select.addSymbol(new MultipleElementSymbol());
      break;
      }
    case CHAR:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY:
    case ARRAY_AGG:
    case CASE:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case FALSE:
    case HOUR:
    case INSERT:
    case LEFT:
    case MINUTE:
    case MONTH:
    case NOT:
    case NULL:
    case RIGHT:
    case SECOND:
    case SESSION_USER:
    case SOME:
    case TRANSLATE:
    case TRUE:
    case UNKNOWN:
    case USER:
    case YEAR:
    case XMLAGG:
    case XMLCAST:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLEXISTS:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ALL_IN_GROUP:
    case ID:
    case ESCAPEDFUNCTION:
    case ESCAPEDTYPE:
    case DECIMALVAL:
    case FLOATVAL:
    case STRINGVAL:
    case UNSIGNEDINTEGER:
    case BINARYSTRINGVAL:
    case LPAREN:
    case PLUS:
    case MINUS:
    case QMARK:
    case DOLLAR:{
      symbol = selectSymbol(info);
select.addSymbol(symbol);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_14;
        }
        jj_consume_token(COMMA);
        symbol = selectSymbol(info);
select.addSymbol(symbol);
      }
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
select.setDistinct(isDistinct);

SqlUtil.Select(select);

                {if ("" != null) return select;}
    throw new Error("Missing return statement in function");
}

/*
name=select sublist
description=An element in the select clause
example=[source,sql]\n----\ntbl.*\n----\n\n[source,sql]\n----\ntbl.col AS x\n----\n
*/
  final public Expression selectSymbol(ParseInfo info) throws ParseException {Expression symbol = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY:
    case ARRAY_AGG:
    case CASE:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case FALSE:
    case HOUR:
    case INSERT:
    case LEFT:
    case MINUTE:
    case MONTH:
    case NOT:
    case NULL:
    case RIGHT:
    case SECOND:
    case SESSION_USER:
    case SOME:
    case TRANSLATE:
    case TRUE:
    case UNKNOWN:
    case USER:
    case YEAR:
    case XMLAGG:
    case XMLCAST:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLEXISTS:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case ESCAPEDFUNCTION:
    case ESCAPEDTYPE:
    case DECIMALVAL:
    case FLOATVAL:
    case STRINGVAL:
    case UNSIGNEDINTEGER:
    case BINARYSTRINGVAL:
    case LPAREN:
    case PLUS:
    case MINUS:
    case QMARK:
    case DOLLAR:{
      symbol = selectExpression(info);
      break;
      }
    case ALL_IN_GROUP:{
      symbol = allInGroupSymbol();
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return symbol;}
    throw new Error("Missing return statement in function");
}

/*
name=select derived column
description=A select clause item that selects a single column. {note}This is slightly different than a derived column in that the AS keyword is optional.{note}
example=[source,sql]\n----\ntbl.col AS x\n----\n
*/
  final public Expression selectExpression(ParseInfo info) throws ParseException {Expression expression = null;
    String alias = null;
    // Expression
                    expression = expression(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        jj_consume_token(AS);
        break;
        }
      default:
        ;
      }
      alias = id(Boolean.FALSE);
      break;
      }
    default:
      ;
    }
if(alias != null) {
                        {if ("" != null) return new AliasSymbol(alias, expression);}
                }
                {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

/*
name=derived column
description=An optionally named expression.
example=[source,sql]\n----\ntbl.col AS x\n----\n
*/
  final public DerivedColumn derivedColumn(ParseInfo info) throws ParseException {Expression expression = null;
    String alias = null;
    // Expression
                    expression = expression(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      alias = id(Boolean.FALSE);
      break;
      }
    default:
      ;
    }
{if ("" != null) return new DerivedColumn(alias, expression);}
    throw new Error("Missing return statement in function");
}

/*
name=all in group
description=A select sublist that can select all columns from the given group.
example=[source,sql]\n----\ntbl.*\n----\n
*/
  final public MultipleElementSymbol allInGroupSymbol() throws ParseException {Token allInGroupToken = null;
    allInGroupToken = jj_consume_token(ALL_IN_GROUP);
{if ("" != null) return new MultipleElementSymbol(normalizeId(allInGroupToken.image.substring(0, allInGroupToken.image.length() - 2)));}
    throw new Error("Missing return statement in function");
}

/*
name=ordered aggregate function
description=An aggregate function that can optionally be ordered.
example=[source,sql]\n----\nXMLAGG(col1) ORDER BY col2\n----\n\n[source,sql]\n----\nARRAY_AGG(col1)\n----\n
*/
  final public AggregateSymbol orderedAgg(ParseInfo info) throws ParseException {Token t = null;
        Expression expression = null;
        OrderBy orderBy = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case XMLAGG:{
      t = jj_consume_token(XMLAGG);
      break;
      }
    case ARRAY_AGG:{
      t = jj_consume_token(ARRAY_AGG);
      break;
      }
    case JSONARRAY_AGG:{
      t = jj_consume_token(JSONARRAY_AGG);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    expression = expression(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDER:{
      orderBy = orderby(info);
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
String aggName = t.image.toUpperCase();
                AggregateSymbol agg = new AggregateSymbol(aggName, false, expression);
                agg.setOrderBy(orderBy);
                {if ("" != null) return agg;}
    throw new Error("Missing return statement in function");
}

/*
name=text aggreate function
description=An aggregate function for creating separated value clobs.
example=[source,sql]\n----\nTEXTAGG (col1 as t1, col2 as t2 DELIMITER ',' HEADER)\n----\n
*/
  final public AggregateSymbol textAgg(ParseInfo info) throws ParseException {DerivedColumn expression = null;
        Character delimiter = null;
        Character quote = null;
        boolean header = false;
        List<DerivedColumn> expressions = new ArrayList<DerivedColumn>();
        OrderBy orderBy = null;
        String encoding = null;
    jj_consume_token(TEXTAGG);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:{
      jj_consume_token(FOR);
      break;
      }
    default:
      ;
    }
    expression = derivedColumn(info);
expressions.add(expression);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_15;
      }
      jj_consume_token(COMMA);
      expression = derivedColumn(info);
expressions.add(expression);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DELIMITER:{
      jj_consume_token(DELIMITER);
      delimiter = charVal(info, "DELMITER");
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NO:
    case QUOTE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTE:{
        jj_consume_token(QUOTE);
        quote = charVal(info, "QUOTE");
        break;
        }
      case NO:{
        jj_consume_token(NO);
        jj_consume_token(QUOTE);
quote = (char)0;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HEADER:{
      jj_consume_token(HEADER);
header = true;
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENCODING:{
      jj_consume_token(ENCODING);
      encoding = id(null);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDER:{
      orderBy = orderby(info);
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
TextLine tf = new TextLine();
                tf.setDelimiter(delimiter);
                tf.setQuote(quote);
                tf.setIncludeHeader(header);
                tf.setExpressions(expressions);
                tf.setEncoding(encoding);
                AggregateSymbol agg = new AggregateSymbol("TEXTAGG", false, tf);
                agg.setOrderBy(orderBy);
                {if ("" != null) return agg;}
    throw new Error("Missing return statement in function");
}

/*
name=standard aggregate function
description=A standard aggregate function.
example=[source,sql]\n----\nCOUNT(*)\n----\n
*/
  final public AggregateSymbol aggregateSymbol(ParseInfo info) throws ParseException {Token func = null;
        Token starToken = null;
        AggregateSymbol agg = null;
        boolean isDistinct = false;
        Expression expression = null;
    if (jj_2_19(3)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COUNT:{
        func = jj_consume_token(COUNT);
        break;
        }
      case COUNT_BIG:{
        func = jj_consume_token(COUNT_BIG);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      starToken = jj_consume_token(STAR);
      jj_consume_token(RPAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ANY:
      case SOME:
      case COUNT_BIG:
      case COUNT:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COUNT:{
          jj_consume_token(COUNT);
          break;
          }
        case COUNT_BIG:{
          jj_consume_token(COUNT_BIG);
          break;
          }
        case SUM:{
          jj_consume_token(SUM);
          break;
          }
        case AVG:{
          jj_consume_token(AVG);
          break;
          }
        case MIN:{
          jj_consume_token(MIN);
          break;
          }
        case MAX:{
          jj_consume_token(MAX);
          break;
          }
        case EVERY:{
          jj_consume_token(EVERY);
          break;
          }
        case STDDEV_POP:{
          jj_consume_token(STDDEV_POP);
          break;
          }
        case STDDEV_SAMP:{
          jj_consume_token(STDDEV_SAMP);
          break;
          }
        case VAR_SAMP:{
          jj_consume_token(VAR_SAMP);
          break;
          }
        case VAR_POP:{
          jj_consume_token(VAR_POP);
          break;
          }
        case SOME:{
          jj_consume_token(SOME);
          break;
          }
        case ANY:{
          jj_consume_token(ANY);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
func = getToken(0);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALL:
        case DISTINCT:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DISTINCT:{
            jj_consume_token(DISTINCT);
isDistinct=true;
            break;
            }
          case ALL:{
            jj_consume_token(ALL);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          ;
        }
        expression = expression(info);
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
String name = func.image.toUpperCase();
                if(starToken == null) {
                        // Aggregate
                        agg = new AggregateSymbol(name, isDistinct, expression);
                } else {
                        // COUNT(*)
                        agg = new AggregateSymbol(name, false, null);
                }
                {if ("" != null) return agg;}
    throw new Error("Missing return statement in function");
}

/*
name=analytic aggregate function
description=An analytic aggregate function.
example=[source,sql]\n----\nROW_NUMBER()\n----\n
*/
  final public AggregateSymbol analyticAggregateSymbol(ParseInfo info) throws ParseException {Token func = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ROW_NUMBER:{
      jj_consume_token(ROW_NUMBER);
      break;
      }
    case RANK:{
      jj_consume_token(RANK);
      break;
      }
    case DENSE_RANK:{
      jj_consume_token(DENSE_RANK);
      break;
      }
    case PERCENT_RANK:{
      jj_consume_token(PERCENT_RANK);
      break;
      }
    case CUME_DIST:{
      jj_consume_token(CUME_DIST);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
func = getToken(0);
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
{if ("" != null) return new AggregateSymbol(func.image.toUpperCase(), false, null);}
    throw new Error("Missing return statement in function");
}

/*
name=filter clause
description=An aggregate filter clause applied prior to accumulating the value.
example=[source,sql]\n----\nFILTER (WHERE col1='a')\n----\n
*/
  final public Expression filterClause(ParseInfo info) throws ParseException {Expression condition = null;
    jj_consume_token(FILTER);
    jj_consume_token(LPAREN);
    jj_consume_token(WHERE);
    condition = booleanPrimary(info);
    jj_consume_token(RPAREN);
{if ("" != null) return condition;}
    throw new Error("Missing return statement in function");
}

/*
name=from clause
description=A query from clause containing a list of table references.
example=[source,sql]\n----\nFROM a, b\n----\n\n[source,sql]\n----\nFROM a right outer join b, c, d join e".</p>\n----\n
*/
  final public From from(ParseInfo info) throws ParseException {FromClause clause = null;
        List clauseList = new LinkedList();
    jj_consume_token(FROM);
    clause = tableReference(info);
clauseList.add(clause);
                        clause = null;
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_16;
      }
      jj_consume_token(COMMA);
      clause = tableReference(info);
clauseList.add(clause);
                                clause = null;
    }
SqlUtil.From(clauseList);
{if ("" != null) return new From(clauseList);}
    throw new Error("Missing return statement in function");
}

/*
name=table reference
description=An optionally escaped joined table.
example=[source,sql]\n----\na\n----\n\n[source,sql]\n----\na inner join b\n----\n
*/
  final public FromClause tableReference(ParseInfo info) throws ParseException {FromClause result = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ESCAPEDJOIN:{
      jj_consume_token(ESCAPEDJOIN);
      result = joinedTable(info);
      jj_consume_token(RBRACE);
      break;
      }
    case TABLE:
    case LATERAL:
    case XMLTABLE:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case LPAREN:{
      result = joinedTable(info);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=joined table
description=A table or join.
example=[source,sql]\n----\na\n----\n\n[source,sql]\n----\na inner join b\n----\n
*/
  final public FromClause joinedTable(ParseInfo info) throws ParseException {FromClause result = null;
        JoinPredicate jp = null;
    result = tablePrimary(info);
    label_17:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CROSS:
      case UNION:{
        jp = crossJoin(info);
        break;
        }
      case FULL:
      case INNER:
      case JOIN:
      case LEFT:
      case RIGHT:{
        jp = qualifiedJoin(info);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
jp.setLeftClause(result);
                        result = jp;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=cross join
description=A cross join.
example=[source,sql]\n----\na CROSS JOIN b\n----\n
*/
  final public JoinPredicate crossJoin(ParseInfo info) throws ParseException {JoinPredicate result = new JoinPredicate();
        FromClause clause = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CROSS:{
      jj_consume_token(CROSS);
result.setJoinType(JoinType.JOIN_CROSS);
      break;
      }
    case UNION:{
      jj_consume_token(UNION);
result.setJoinType(JoinType.JOIN_UNION);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(JOIN);
    clause = tablePrimary(info);
result.setRightClause(clause);
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=qualified table
description=An INNER or OUTER join.
example=[source,sql]\n----\na inner join b\n----\n
*/
  final public JoinPredicate qualifiedJoin(ParseInfo info) throws ParseException {JoinPredicate result = new JoinPredicate();
        FromClause clause = null;
        Criteria onCriteria = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FULL:
    case INNER:
    case LEFT:
    case RIGHT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RIGHT:{
        jj_consume_token(RIGHT);
result.setJoinType(JoinType.JOIN_RIGHT_OUTER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OUTER:{
          jj_consume_token(OUTER);
          break;
          }
        default:
          ;
        }
        break;
        }
      case LEFT:{
        jj_consume_token(LEFT);
result.setJoinType(JoinType.JOIN_LEFT_OUTER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OUTER:{
          jj_consume_token(OUTER);
          break;
          }
        default:
          ;
        }
        break;
        }
      case FULL:{
        jj_consume_token(FULL);
result.setJoinType(JoinType.JOIN_FULL_OUTER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OUTER:{
          jj_consume_token(OUTER);
          break;
          }
        default:
          ;
        }
        break;
        }
      case INNER:{
        jj_consume_token(INNER);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    jj_consume_token(JOIN);
    clause = tableReference(info);
result.setRightClause(clause);
    jj_consume_token(ON);
    onCriteria = criteria(info);
result.setJoinCriteria(Criteria.separateCriteriaByAnd(onCriteria));
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=table primary
description=A single source of rows.
example=[source,sql]\n----\na\n----\n
*/
  final public FromClause tablePrimary(ParseInfo info) throws ParseException {FromClause clause = null;
        Token lparen = null;
        Option.MakeDep makedep = null;
    if (jj_2_21(2)) {
      clause = textTable(info);
    } else if (jj_2_22(2)) {
      clause = arrayTable(info);
    } else if (jj_2_23(2)) {
      clause = jsonTable(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case XMLTABLE:{
        clause = xmlTable(info);
        break;
        }
      default:
        if (jj_2_24(2)) {
          clause = objectTable(info);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INSTEAD:
          case ENABLED:
          case DISABLED:
          case VIEW:
          case KEY:
          case SERIAL:
          case TEXTAGG:
          case COUNT_BIG:
          case COUNT:
          case ROW_NUMBER:
          case RANK:
          case DENSE_RANK:
          case CURRENT:
          case UNBOUNDED:
          case PRECEDING:
          case FOLLOWING:
          case SUM:
          case AVG:
          case MIN:
          case MAX:
          case EVERY:
          case STDDEV_POP:
          case STDDEV_SAMP:
          case VAR_SAMP:
          case VAR_POP:
          case DOCUMENT:
          case CONTENT:
          case TRIM:
          case EMPTY:
          case ORDINALITY:
          case PATH:
          case FIRST:
          case LAST:
          case NEXT:
          case SUBSTRING:
          case EXTRACT:
          case TO_CHARS:
          case TO_BYTES:
          case TIMESTAMPADD:
          case TIMESTAMPDIFF:
          case QUERYSTRING:
          case NAMESPACE:
          case RESULT:
          case INDEX:
          case ACCESSPATTERN:
          case AUTO_INCREMENT:
          case WELLFORMED:
          case SQL_TSI_FRAC_SECOND:
          case SQL_TSI_SECOND:
          case SQL_TSI_MINUTE:
          case SQL_TSI_HOUR:
          case SQL_TSI_DAY:
          case SQL_TSI_WEEK:
          case SQL_TSI_MONTH:
          case SQL_TSI_QUARTER:
          case SQL_TSI_YEAR:
          case TEXTTABLE:
          case ARRAYTABLE:
          case JSONTABLE:
          case SELECTOR:
          case SKIP_KEYWORD:
          case WIDTH:
          case PASSING:
          case NAME:
          case ENCODING:
          case COLUMNS:
          case DELIMITER:
          case QUOTE:
          case HEADER:
          case NULLS:
          case OBJECTTABLE:
          case VERSION:
          case INCLUDING:
          case EXCLUDING:
          case XMLDECLARATION:
          case VARIADIC:
          case EXCEPTION:
          case RAISE:
          case CHAIN:
          case JSON:
          case JSONARRAY_AGG:
          case JSONOBJECT:
          case PRESERVE:
          case GEOMETRY:
          case GEOGRAPHY:
          case UPSERT:
          case AFTER:
          case DEFAULT_KEYWORD:
          case TYPE:
          case TRANSLATOR:
          case JAAS:
          case CONDITION:
          case MASK:
          case ACCESS:
          case CONTROL:
          case NONE:
          case DATA:
          case DATABASE:
          case PRIVILEGES:
          case SCHEMA:
          case ROLE:
          case USE:
          case REPOSITORY:
          case RENAME:
          case DOMAIN:
          case USAGE:
          case POSITION:
          case LISTAGG:
          case OBJECT:
          case EXPLAIN:
          case ANALYZE:
          case TEXT:
          case FORMAT:
          case YAML:
          case POLICY:
          case EPOCH:
          case QUARTER:
          case ID:{
            clause = unaryFromClause(info);
            break;
            }
          default:
            if (jj_2_25(2147483647)) {
              clause = subqueryFromClause(info);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LPAREN:{
                lparen = jj_consume_token(LPAREN);
                clause = joinedTable(info);
setFromClauseOptions(lparen, clause);
                jj_consume_token(RPAREN);
                break;
                }
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAKEDEP:
    case MAKENOTDEP:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAKEDEP:{
        jj_consume_token(MAKEDEP);
        makedep = makedepOptions();
clause.setMakeDep(makedep);
        break;
        }
      case MAKENOTDEP:{
        jj_consume_token(MAKENOTDEP);
clause.setMakeNotDep(true);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAKEIND:{
      jj_consume_token(MAKEIND);
      makedep = makedepOptions();
clause.setMakeInd(makedep);
      break;
      }
    default:
      ;
    }
{if ("" != null) return clause;}
    throw new Error("Missing return statement in function");
}

/*
name=make dep options
description=options for the make dep hint
example=[source,sql]\n----\n(min:10000)\n----\n
*/
  final public Option.MakeDep makedepOptions() throws ParseException {Integer max = null;
        Boolean join = null;
        boolean no = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAX:{
        jj_consume_token(MAX);
        jj_consume_token(COLON);
        max = intVal();
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case JOIN:
      case NO:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NO:{
          jj_consume_token(NO);
no = true;
          break;
          }
        default:
          ;
        }
        jj_consume_token(JOIN);
join = true;
        break;
        }
      default:
        ;
      }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      ;
    }
Option.MakeDep result = new Option.MakeDep();
        result.setMax(max);
        result.setJoin(no?Boolean.FALSE:join);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=xml serialize
description=Serializes an XML value.
example=[source,sql]\n----\nXMLSERIALIZE(col1 AS CLOB)\n----\n
*/
  final public XMLSerialize xmlSerialize(ParseInfo info) throws ParseException {Expression expr = null;
        Boolean doc = null;
        Token t = null;
        String enc = null;
        Boolean declr = null;
        String ver = null;
    jj_consume_token(XMLSERIALIZE);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOCUMENT:
    case CONTENT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOCUMENT:{
        jj_consume_token(DOCUMENT);
doc = true;
        break;
        }
      case CONTENT:{
        jj_consume_token(CONTENT);
doc = false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    expr = expression(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        jj_consume_token(STRING);
        break;
        }
      case VARCHAR:{
        jj_consume_token(VARCHAR);
        break;
        }
      case CLOB:{
        jj_consume_token(CLOB);
        break;
        }
      case VARBINARY:{
        jj_consume_token(VARBINARY);
        break;
        }
      case BLOB:{
        jj_consume_token(BLOB);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
t = getToken(0);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENCODING:{
      jj_consume_token(ENCODING);
      enc = id(null);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VERSION:{
      jj_consume_token(VERSION);
      ver = stringVal();
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCLUDING:
    case EXCLUDING:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCLUDING:{
        jj_consume_token(INCLUDING);
declr = true;
        break;
        }
      case EXCLUDING:{
        jj_consume_token(EXCLUDING);
declr = false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(XMLDECLARATION);
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
XMLSerialize result = new XMLSerialize();
                result.setEncoding(enc);
                result.setVersion(ver);
                result.setDeclaration(declr);
                result.setExpression(expr);
                if (doc != null) {
                        result.setDocument(doc);
                }
                if (t != null) {
                        result.setTypeString(t.image);
                }
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=array table
description=The ARRAYTABLE table function creates tabular results from arrays.  It can be used as a nested table reference.
example=[source,sql]\n----\nARRAYTABLE (col1 COLUMNS x STRING) AS y\n----\n
*/
  final public ArrayTable arrayTable(ParseInfo info) throws ParseException {Expression array = null;
    List<TableFunctionReference.ProjectedColumn> columns;
    String aliasID = null;
    Boolean single = null;
    jj_consume_token(ARRAYTABLE);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ROW:
    case ROWS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ROW:{
        jj_consume_token(ROW);
        break;
        }
      case ROWS:{
        jj_consume_token(ROWS);
single=false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    array = valueExpressionPrimary(info);
    jj_consume_token(COLUMNS);
    columns = createElementsWithTypes(info);
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      break;
      }
    default:
      ;
    }
    aliasID = id(Boolean.FALSE);
ArrayTable result = new ArrayTable();
        result.setArrayValue(array);
        result.setColumns(columns);
        result.setName(aliasID);
        result.setSingleRow(single);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=json table
description=The JSONTABLE table function creates tabular results from JSON.  It can be used as a nested table reference.
example=[source,sql]\n----\nJSONTABLE (col1, '$..book', false COLUMNS x STRING) AS y\n----\n
*/
  final public JsonTable jsonTable(ParseInfo info) throws ParseException {Expression json = null;
    JsonTable.JsonColumn column = null;
    List<JsonTable.JsonColumn> columns = new ArrayList<JsonTable.JsonColumn>();
    String aliasID = null;
    Boolean nullLeaf = null;
    String rowPath = null;
    jj_consume_token(JSONTABLE);
    jj_consume_token(LPAREN);
    json = valueExpressionPrimary(info);
    jj_consume_token(COMMA);
    rowPath = stringVal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        jj_consume_token(TRUE);
nullLeaf=true;
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
nullLeaf=false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    jj_consume_token(COLUMNS);
    column = jsonColumn(info);
columns.add(column);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_18;
      }
      jj_consume_token(COMMA);
      column = jsonColumn(info);
columns.add(column);
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      break;
      }
    default:
      ;
    }
    aliasID = id(Boolean.FALSE);
JsonTable result = new JsonTable();
        result.setJson(json);
        result.setRowPath(rowPath);
        result.setNullLeaf(nullLeaf);
        result.setColumns(columns);
        result.setName(aliasID);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=json table column
description=json table column.
example=[source,sql]\n----\ncol FOR ORDINALITY\n----\n
*/
  final public JsonTable.JsonColumn jsonColumn(ParseInfo info) throws ParseException {String name = null;
    ParsedDataType datatype = null;
    String path = null;
    name = id(Boolean.TRUE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:{
      jj_consume_token(FOR);
      jj_consume_token(ORDINALITY);
{if ("" != null) return new JsonTable.JsonColumn(name);}
      break;
      }
    case STRING:
    case VARBINARY:
    case VARCHAR:
    case BOOLEAN:
    case BYTE:
    case TINYINT:
    case SHORT:
    case SMALLINT:
    case CHAR:
    case INTEGER:
    case LONG:
    case BIGINT:
    case BIGINTEGER:
    case FLOAT:
    case REAL:
    case DOUBLE:
    case BIGDECIMAL:
    case DECIMAL:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case BLOB:
    case CLOB:
    case XML:
    case JSON:
    case GEOMETRY:
    case GEOGRAPHY:
    case OBJECT:{
      datatype = parseBasicDataType();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PATH:{
        jj_consume_token(PATH);
        path = stringVal();
        break;
        }
      default:
        ;
      }
{if ("" != null) return new JsonTable.JsonColumn(name, datatype.type, path);}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=text table
description=The TEXTTABLE table function creates tabular results from text.  It can be used as a nested table reference.
example=[source,sql]\n----\nTEXTTABLE (file COLUMNS x STRING) AS y\n----\n
*/
  final public TextTable textTable(ParseInfo info) throws ParseException {Expression file = null;
        TextTable.TextColumn column = null;
        List<TextTable.TextColumn> columns = new ArrayList<TextTable.TextColumn>();
        boolean useRowDelimiter = true;
        Character delimiter = null;
        Character rowDelimiter = null;
        boolean escape = false;
        Character quote = null;
        Integer header = null;
        Integer skip = null;
        String selector = null;
        String aliasID = null;
        boolean noTrim = false;
    jj_consume_token(TEXTTABLE);
    jj_consume_token(LPAREN);
    file = commonValueExpression(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECTOR:{
      jj_consume_token(SELECTOR);
      selector = stringVal();
      break;
      }
    default:
      ;
    }
    jj_consume_token(COLUMNS);
    column = textColumn(info);
columns.add(column);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_19;
      }
      jj_consume_token(COMMA);
      column = textColumn(info);
columns.add(column);
    }
    if (jj_2_26(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NO:{
        jj_consume_token(NO);
        jj_consume_token(ROW);
        jj_consume_token(DELIMITER);
useRowDelimiter = false;
        break;
        }
      case ROW:{
        jj_consume_token(ROW);
        jj_consume_token(DELIMITER);
        rowDelimiter = charVal(info, " ROW DELMITER");
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DELIMITER:{
      jj_consume_token(DELIMITER);
      delimiter = charVal(info, "DELMITER");
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ESCAPE:
    case QUOTE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESCAPE:{
        jj_consume_token(ESCAPE);
        quote = charVal(info, "ESCAPE");
escape = true;
        break;
        }
      case QUOTE:{
        jj_consume_token(QUOTE);
        quote = charVal(info, "QUOTE");
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HEADER:{
      jj_consume_token(HEADER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNSIGNEDINTEGER:{
        header = intVal();
        break;
        }
      default:
        ;
      }
if (header == null) {
                        header = 1;
                }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SKIP_KEYWORD:{
      jj_consume_token(SKIP_KEYWORD);
      skip = intVal();
      break;
      }
    default:
      ;
    }
    if (jj_2_27(2)) {
      jj_consume_token(NO);
      jj_consume_token(TRIM);
noTrim = true;
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      break;
      }
    default:
      ;
    }
    aliasID = id(null);
validateQuotedName(aliasID, getToken(0).image);
TextTable result = new TextTable();
                result.setFile(file);
                result.setColumns(columns);
                result.setDelimiter(delimiter);
                result.setEscape(escape);
                result.setHeader(header);
                result.setSkip(skip);
                result.setName(aliasID);
                result.setQuote(quote);
                result.setUsingRowDelimiter(useRowDelimiter);
                result.setSelector(selector);
                if (noTrim) {
                        result.setNoTrim();
                }
                result.setRowDelimiter(rowDelimiter);
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=text table column
description=A text table column.
example=[source,sql]\n----\nx INTEGER WIDTH 6\n----\n
*/
  final public TextTable.TextColumn textColumn(ParseInfo info) throws ParseException {String name = null;
        ParsedDataType datatype = null;
        Integer width = null;
        boolean noTrim = false;
        String selector = null;
        Integer position = null;
        String header = null;
    name = id(Boolean.TRUE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:{
      jj_consume_token(FOR);
      jj_consume_token(ORDINALITY);
{if ("" != null) return new TextTable.TextColumn(name);}
      break;
      }
    case STRING:
    case VARBINARY:
    case VARCHAR:
    case BOOLEAN:
    case BYTE:
    case TINYINT:
    case SHORT:
    case SMALLINT:
    case CHAR:
    case INTEGER:
    case LONG:
    case BIGINT:
    case BIGINTEGER:
    case FLOAT:
    case REAL:
    case DOUBLE:
    case BIGDECIMAL:
    case DECIMAL:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case BLOB:
    case CLOB:
    case XML:
    case HEADER:
    case JSON:
    case GEOMETRY:
    case GEOGRAPHY:
    case OBJECT:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HEADER:{
        jj_consume_token(HEADER);
        header = stringVal();
        break;
        }
      default:
        ;
      }
      datatype = parseBasicDataType();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WIDTH:{
        jj_consume_token(WIDTH);
        width = intVal();
        if (jj_2_28(2)) {
          jj_consume_token(NO);
          jj_consume_token(TRIM);
noTrim = true;
        } else {
          ;
        }
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELECTOR:{
        jj_consume_token(SELECTOR);
        selector = stringVal();
        position = intVal();
        break;
        }
      default:
        ;
      }
TextTable.TextColumn result = new TextTable.TextColumn(name, datatype.type, width, noTrim);
                        result.setSelector(selector);
                        result.setPosition(position);
                        result.setHeader(header);
                        {if ("" != null) return result;}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=xml query
description=Executes an XQuery to return an XML result.
example=[source,sql]\n----\nXMLQUERY('<a>...</a>' PASSING doc)\n----\n
*/
  final public Expression xmlExists(ParseInfo info) throws ParseException {String xquery = null;
    XMLNamespaces xmlNamespaces = null;
    DerivedColumn passing = null;
    ArrayList<DerivedColumn> passingValues = new ArrayList<DerivedColumn>();
    Boolean content = null;
    Boolean empty = null;
    jj_consume_token(XMLEXISTS);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case XMLNAMESPACES:{
      xmlNamespaces = xmlNamespaces(info);
      jj_consume_token(COMMA);
      break;
      }
    default:
      ;
    }
    xquery = stringVal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PASSING:{
      jj_consume_token(PASSING);
      passing = derivedColumn(info);
passingValues.add(passing);
        passing.setPropagateName(false);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_20;
        }
        jj_consume_token(COMMA);
        passing = derivedColumn(info);
passingValues.add(passing);
          passing.setPropagateName(false);
      }
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
XMLQuery result = new XMLQuery();
        result.setXquery(xquery);
        result.setNamespaces(xmlNamespaces);
        result.setPassing(passingValues);
        result.setEmptyOnEmpty(true);
        {if ("" != null) return new XMLExists(result);}
    throw new Error("Missing return statement in function");
}

/*
name=xml query
description=Executes an XQuery to return an XML result.
example=[source,sql]\n----\nXMLQUERY('<a>...</a>' PASSING doc)\n----\n
*/
  final public XMLQuery xmlQuery(ParseInfo info) throws ParseException {String xquery = null;
        XMLNamespaces xmlNamespaces = null;
        DerivedColumn passing = null;
        ArrayList<DerivedColumn> passingValues = new ArrayList<DerivedColumn>();
        Boolean content = null;
        Boolean empty = null;
    jj_consume_token(XMLQUERY);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case XMLNAMESPACES:{
      xmlNamespaces = xmlNamespaces(info);
      jj_consume_token(COMMA);
      break;
      }
    default:
      ;
    }
    xquery = stringVal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PASSING:{
      jj_consume_token(PASSING);
      passing = derivedColumn(info);
passingValues.add(passing);
                passing.setPropagateName(false);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_21;
        }
        jj_consume_token(COMMA);
        passing = derivedColumn(info);
passingValues.add(passing);
                  passing.setPropagateName(false);
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NULL:
    case EMPTY:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NULL:{
        jj_consume_token(NULL);
empty = false;
        break;
        }
      case EMPTY:{
        jj_consume_token(EMPTY);
empty = true;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ON);
      jj_consume_token(EMPTY);
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
XMLQuery result = new XMLQuery();
                result.setXquery(xquery);
                result.setNamespaces(xmlNamespaces);
                result.setPassing(passingValues);
                result.setEmptyOnEmpty(empty);
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=object table
description=Returns table results by processing a script.
example=[source,sql]\n----\nOBJECTTABLE('z' PASSING val AS z COLUMNS col OBJECT 'teiid_row') AS X\n----\n
*/
  final public ObjectTable objectTable(ParseInfo info) throws ParseException {String rowScript = null;
        String lang = null;
        DerivedColumn passing = null;
        ArrayList<DerivedColumn> passingValues = new ArrayList<DerivedColumn>();
        ObjectTable.ObjectColumn column = null;
        ArrayList<ObjectTable.ObjectColumn> columns = new ArrayList<ObjectTable.ObjectColumn>();
        String aliasID = null;
    jj_consume_token(OBJECTTABLE);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LANGUAGE:{
      jj_consume_token(LANGUAGE);
      lang = stringVal();
      break;
      }
    default:
      ;
    }
    rowScript = stringVal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PASSING:{
      jj_consume_token(PASSING);
      passing = derivedColumn(info);
passingValues.add(passing);
                passing.setPropagateName(false);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_22;
        }
        jj_consume_token(COMMA);
        passing = derivedColumn(info);
passingValues.add(passing);
                  passing.setPropagateName(false);
      }
      break;
      }
    default:
      ;
    }
    jj_consume_token(COLUMNS);
    column = objectColumn(info);
columns.add(column);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_23;
      }
      jj_consume_token(COMMA);
      column = objectColumn(info);
columns.add(column);
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      break;
      }
    default:
      ;
    }
    aliasID = id(null);
validateQuotedName(aliasID, getToken(0).image);
ObjectTable result = new ObjectTable();
                result.setScriptingLanguage(lang);
                result.setRowScript(rowScript);
                result.setPassing(passingValues);
                result.setColumns(columns);
                result.setName(aliasID);
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=object table column
description=object table column.
example=[source,sql]\n----\ny integer 'teiid_row_number'\n----\n
*/
  final public ObjectTable.ObjectColumn objectColumn(ParseInfo info) throws ParseException {String name = null;
        ParsedDataType datatype = null;
        String path = null;
        Expression defaultExpr = null;
    name = id(null);
    datatype = parseBasicDataType();
    path = stringVal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFAULT_KEYWORD:{
      jj_consume_token(DEFAULT_KEYWORD);
      defaultExpr = expression(info);
      break;
      }
    default:
      ;
    }
{if ("" != null) return new ObjectTable.ObjectColumn(name, datatype.type, path, defaultExpr);}
    throw new Error("Missing return statement in function");
}

/*
name=xml table
description=Returns table results by processing an XQuery.
example=[source,sql]\n----\nXMLTABLE('/a/b' PASSING doc COLUMNS col XML PATH '.') AS X\n----\n
*/
  final public XMLTable xmlTable(ParseInfo info) throws ParseException {String xquery = null;
        XMLNamespaces xmlNamespaces = null;
        DerivedColumn passing = null;
        ArrayList<DerivedColumn> passingValues = new ArrayList<DerivedColumn>();
        XMLTable.XMLColumn column = null;
        ArrayList<XMLTable.XMLColumn> columns = new ArrayList<XMLTable.XMLColumn>();
        String aliasID = null;
    jj_consume_token(XMLTABLE);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case XMLNAMESPACES:{
      xmlNamespaces = xmlNamespaces(info);
      jj_consume_token(COMMA);
      break;
      }
    default:
      ;
    }
    xquery = stringVal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PASSING:{
      jj_consume_token(PASSING);
      passing = derivedColumn(info);
passingValues.add(passing);
                passing.setPropagateName(false);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_24;
        }
        jj_consume_token(COMMA);
        passing = derivedColumn(info);
passingValues.add(passing);
                  passing.setPropagateName(false);
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLUMNS:{
      jj_consume_token(COLUMNS);
      column = xmlColumn(info);
columns.add(column);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_25;
        }
        jj_consume_token(COMMA);
        column = xmlColumn(info);
columns.add(column);
      }
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      break;
      }
    default:
      ;
    }
    aliasID = id(null);
validateQuotedName(aliasID, getToken(0).image);
XMLTable result = new XMLTable();
                result.setXquery(xquery);
                result.setNamespaces(xmlNamespaces);
                result.setPassing(passingValues);
                result.setColumns(columns);
                result.setName(aliasID);
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=xml table column
description=XML table column.
example=[source,sql]\n----\ny FOR ORDINALITY\n----\n
*/
  final public XMLTable.XMLColumn xmlColumn(ParseInfo info) throws ParseException {String name = null;
        ParsedDataType datatype = null;
        String path = null;
        Expression defaultExpr = null;
    name = id(Boolean.TRUE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:{
      jj_consume_token(FOR);
      jj_consume_token(ORDINALITY);
{if ("" != null) return new XMLTable.XMLColumn(name);}
      break;
      }
    case STRING:
    case VARBINARY:
    case VARCHAR:
    case BOOLEAN:
    case BYTE:
    case TINYINT:
    case SHORT:
    case SMALLINT:
    case CHAR:
    case INTEGER:
    case LONG:
    case BIGINT:
    case BIGINTEGER:
    case FLOAT:
    case REAL:
    case DOUBLE:
    case BIGDECIMAL:
    case DECIMAL:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case BLOB:
    case CLOB:
    case XML:
    case JSON:
    case GEOMETRY:
    case GEOGRAPHY:
    case OBJECT:{
      datatype = parseBasicDataType();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEFAULT_KEYWORD:{
        jj_consume_token(DEFAULT_KEYWORD);
        defaultExpr = expression(info);
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PATH:{
        jj_consume_token(PATH);
        path = stringVal();
        break;
        }
      default:
        ;
      }
{if ("" != null) return new XMLTable.XMLColumn(name, datatype.type, path, defaultExpr);}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=unsigned integer
description=An unsigned interger value.
example=[source,sql]\n----\n12345\n----\n
*/
  final public int intVal() throws ParseException {Token t;
    t = jj_consume_token(UNSIGNEDINTEGER);
try {
                        {if ("" != null) return Integer.valueOf(t.image);}
                } catch(NumberFormatException e1) {
                        {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.Integer_parse", t.image));} //$NON-NLS-1$
                }
    throw new Error("Missing return statement in function");
}

/*
name=table subquery
description=A table defined by a subquery.
example=[source,sql]\n----\n(SELECT * FROM tbl) AS x\n----\n
*/
  final public SubqueryFromClause subqueryFromClause(ParseInfo info) throws ParseException {String aliasID = null;
        Command command = null;
        Token lparen = null;
        boolean table = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TABLE:
    case LATERAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TABLE:{
        jj_consume_token(TABLE);
        break;
        }
      case LATERAL:{
        jj_consume_token(LATERAL);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
table = true;
      break;
      }
    default:
      ;
    }
    lparen = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:
    case TABLE:
    case VALUES:
    case WITH:
    case LPAREN:{
      command = queryExpression(info);
      break;
      }
    case CALL:
    case EXEC:
    case EXECUTE:{
      command = storedProcedure(info, 1);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      break;
      }
    default:
      ;
    }
    aliasID = id(null);
validateQuotedName(aliasID, getToken(0).image);
SubqueryFromClause clause = new SubqueryFromClause(aliasID, command);
        setFromClauseOptions(lparen, clause);
        clause.setLateral(table);
        {if ("" != null) return clause;}
    throw new Error("Missing return statement in function");
}

/*
name=table name
description=A table named in the FROM clause.
example=[source,sql]\n----\ntbl AS x\n----\n
*/
  final public UnaryFromClause unaryFromClause(ParseInfo info) throws ParseException {GroupSymbol group = null;
        String groupID = null;
        Token groupToken = null;
    String aliasID = null;
        UnaryFromClause clause = null;
    groupID = id(null);
groupToken = getToken(0);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        jj_consume_token(AS);
        break;
        }
      default:
        ;
      }
      aliasID = id(null);
validateQuotedName(aliasID, getToken(0).image);
      break;
      }
    default:
      ;
    }
if(aliasID != null) {
            group = new GroupSymbol(aliasID, groupID);
        } else {
                        group = new GroupSymbol(groupID);
        }
        clause = new UnaryFromClause(group);
        setFromClauseOptions(groupToken, clause);
                {if ("" != null) return clause;}
    throw new Error("Missing return statement in function");
}

/*
name=where clause
description=Specifies a search condition
example=[source,sql]\n----\nWHERE x = 'a'\n----\n
*/
  final public Criteria where(ParseInfo info) throws ParseException {Criteria criteria = null;
    jj_consume_token(WHERE);
    criteria = criteria(info);
{if ("" != null) return criteria;}
    throw new Error("Missing return statement in function");
}

/*
name=condition
description=A boolean expression.
*/
  final public Criteria criteria(ParseInfo info) throws ParseException {Criteria criteria = null;
    criteria = compoundCritOr(info);
{if ("" != null) return criteria;}
    throw new Error("Missing return statement in function");
}

/*
name=boolean value expression
description=An optionally ORed boolean expression.
*/
  final public Criteria compoundCritOr(ParseInfo info) throws ParseException {ArrayList logicList = null;
    Criteria logicPart = null;
    Criteria logicPart1 = null;
    logicPart = compoundCritAnd(info);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        break label_26;
      }
      jj_consume_token(OR);
      logicPart1 = compoundCritAnd(info);
if (logicList == null) { logicList = new ArrayList(2); logicList.add(logicPart); } logicList.add(logicPart1);
    }
if(logicList == null) {
                        {if ("" != null) return logicPart;}
                } else {
                {if ("" != null) return new CompoundCriteria(CompoundCriteria.OR,logicList);}
                }
    throw new Error("Missing return statement in function");
}

/*
name=boolean term
description=An optional ANDed boolean factor.
*/
  final public Criteria compoundCritAnd(ParseInfo info) throws ParseException {ArrayList logicList = null;
    Criteria logicPart = null;
    Criteria logicPart1 = null;
    logicPart = notCrit(info);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        break label_27;
      }
      jj_consume_token(AND);
      logicPart1 = notCrit(info);
if (logicList == null) { logicList = new ArrayList(2); logicList.add(logicPart); } logicList.add(logicPart1);
    }
if(logicList == null) {
                        {if ("" != null) return logicPart;}
                } else {
                {if ("" != null) return new CompoundCriteria(CompoundCriteria.AND,logicList);}
                }
    throw new Error("Missing return statement in function");
}

/*
name=boolean factor
description=A boolean factor.
example=[source,sql]\n----\nNOT x = 'a'\n----\n
*/
  final public Criteria notCrit(ParseInfo info) throws ParseException {Expression ex = null;
        boolean isNot = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
isNot=true;
      break;
      }
    default:
      ;
    }
    ex = booleanPrimary(info);
Criteria crit = null;
            if (ex instanceof Criteria) {
              crit = (Criteria)ex;
            } else {
              crit = new ExpressionCriteria(ex);
            }
                if(isNot) {
                        {if ("" != null) return new NotCriteria(crit);}
                } else {
                        {if ("" != null) return crit;}
                }
    throw new Error("Missing return statement in function");
}

/*
name=boolean primary
description=A boolean predicate or simple expression.
example=[source,sql]\n----\ncol LIKE 'a%'\n----\n
*/
  final public Expression booleanPrimary(ParseInfo info) throws ParseException {Expression ex = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY:
    case ARRAY_AGG:
    case CASE:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case FALSE:
    case HOUR:
    case INSERT:
    case LEFT:
    case MINUTE:
    case MONTH:
    case NULL:
    case RIGHT:
    case SECOND:
    case SESSION_USER:
    case SOME:
    case TRANSLATE:
    case TRUE:
    case UNKNOWN:
    case USER:
    case YEAR:
    case XMLAGG:
    case XMLCAST:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case ESCAPEDFUNCTION:
    case ESCAPEDTYPE:
    case DECIMALVAL:
    case FLOATVAL:
    case STRINGVAL:
    case UNSIGNEDINTEGER:
    case BINARYSTRINGVAL:
    case LPAREN:
    case PLUS:
    case MINUS:
    case QMARK:
    case DOLLAR:{
      ex = commonValueExpression(info);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BETWEEN:
      case IN:
      case IS:
      case LIKE:
      case LIKE_REGEX:
      case NOT:
      case SIMILAR:
      case EQ:
      case NE:
      case NE2:
      case LT:
      case LE:
      case GT:
      case GE:{
        if (jj_2_29(2)) {
          ex = betweenCrit(info, ex);
        } else if (jj_2_30(2)) {
          ex = matchCrit(info, ex);
        } else if (jj_2_31(2)) {
          ex = regexMatchCrit(info, ex);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IN:
          case NOT:{
            ex = setCrit(info, ex);
            break;
            }
          default:
            if (jj_2_32(2147483647)) {
              ex = isNullCrit(info, ex);
            } else if (jj_2_33(2147483647)) {
              ex = subqueryCompareCriteria(info, ex);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EQ:
              case NE:
              case NE2:
              case LT:
              case LE:
              case GT:
              case GE:{
                ex = compareCrit(info, ex);
                break;
                }
              case IS:{
                ex = isDistinct(info, ex);
                break;
                }
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
        break;
        }
      default:
        ;
      }
      break;
      }
    case EXISTS:{
      ex = existsCriteria(info);
      break;
      }
    case XMLEXISTS:{
      ex = xmlExists(info);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ex;}
    throw new Error("Missing return statement in function");
}

/*
name=comparison operator
description=A comparison operator.
example=[source,sql]\n----\n=\n----\n
*/
  final public Token operator() throws ParseException {Token operator = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      operator = jj_consume_token(EQ);
      break;
      }
    case NE:{
      operator = jj_consume_token(NE);
      break;
      }
    case NE2:{
      operator = jj_consume_token(NE2);
      break;
      }
    case LT:{
      operator = jj_consume_token(LT);
      break;
      }
    case LE:{
      operator = jj_consume_token(LE);
      break;
      }
    case GT:{
      operator = jj_consume_token(GT);
      break;
      }
    case GE:{
      operator = jj_consume_token(GE);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return operator;}
    throw new Error("Missing return statement in function");
}

/*
name=is distinct
description=Is Distinct Right Hand Side
example=[source,sql]\n----\nIS DISTINCT FROM expression\n----\n
*/
  final public IsDistinctCriteria isDistinct(ParseInfo info, Expression expression) throws ParseException {Expression value = null;
    Token operator = null;
    boolean not = false;
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
not = true;
      break;
      }
    default:
      ;
    }
    jj_consume_token(DISTINCT);
    jj_consume_token(FROM);
    value = commonValueExpression(info);
IsDistinctCriteria idc = new IsDistinctCriteria();
      idc.setLeftRowValue(expression);
      idc.setRightRowValue(value);
      idc.setNegated(not);
      {if ("" != null) return idc;}
    throw new Error("Missing return statement in function");
}

/*
name=comparison predicate
description=A value comparison.
example=[source,sql]\n----\n= 'a'\n----\n
*/
  final public CompareCriteria compareCrit(ParseInfo info, Expression expression) throws ParseException {Expression value = null;
    Token operator = null;
    operator = operator();
    value = commonValueExpression(info);
CompareCriteria compareCriteria = new CompareCriteria();

                // Set left expression
                compareCriteria.setLeftExpression(expression);

                compareCriteria.setOperator(getOperator(operator.image));

                // Set value
                compareCriteria.setRightExpression(value);

            {if ("" != null) return compareCriteria;}
    throw new Error("Missing return statement in function");
}

/*
name=subquery
description=A subquery.
example=[source,sql]\n----\n(SELECT * FROM tbl)\n----\n
*/
  final public QueryCommand subquery(ParseInfo info) throws ParseException {QueryCommand subquery = null;
    StoredProcedure proc = null;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:
    case TABLE:
    case VALUES:
    case WITH:
    case LPAREN:{
      subquery = queryExpression(info);
      break;
      }
    case CALL:
    case EXEC:
    case EXECUTE:{
      proc = storedProcedure(info, 1);
subquery = new Query(new Select(Arrays.asList(new MultipleElementSymbol())), new From(Arrays.asList(new SubqueryFromClause("x", proc))), null, null, null);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
{if ("" != null) return subquery;}
    throw new Error("Missing return statement in function");
}

/*
name=quantified comparison predicate
description=A subquery comparison.
example=[source,sql]\n----\n= ANY (SELECT col FROM tbl)\n----\n
*/
  final public SubqueryCompareCriteria subqueryCompareCriteria(ParseInfo info, Expression expression) throws ParseException {SubqueryCompareCriteria subqueryCrit = null;
    QueryCommand subquery = null;
    Token operator = null;
    Token quantifier = null;
    ExistsCriteria.SubqueryHint hint = null;
    Expression expr = null;
    operator = operator();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ANY:{
      quantifier = jj_consume_token(ANY);
      break;
      }
    case SOME:{
      quantifier = jj_consume_token(SOME);
      break;
      }
    case ALL:{
      quantifier = jj_consume_token(ALL);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
hint = getSubqueryHint(getToken(1));
    if (jj_2_34(2147483647)) {
      subquery = subquery(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        expr = expression(info);
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
subqueryCrit = new SubqueryCompareCriteria();
            subqueryCrit.setLeftExpression(expression);
            subqueryCrit.setCommand(subquery);
            subqueryCrit.setArrayExpression(expr);

                // Set operator
                subqueryCrit.setOperator(getOperator(operator.image));

                // Set predicate quantifier
                if(quantifier.image.equalsIgnoreCase("any")) { //$NON-NLS-1$
                        subqueryCrit.setPredicateQuantifier(SubqueryCompareCriteria.ANY);
                } else if(quantifier.image.equalsIgnoreCase("some")) { //$NON-NLS-1$
                        subqueryCrit.setPredicateQuantifier(SubqueryCompareCriteria.SOME);
                } else if(quantifier.image.equalsIgnoreCase("all")) { //$NON-NLS-1$
                        subqueryCrit.setPredicateQuantifier(SubqueryCompareCriteria.ALL);
                }
        subqueryCrit.setSubqueryHint(hint);
            {if ("" != null) return subqueryCrit;}
    throw new Error("Missing return statement in function");
}

/*
name=match predicate
description=Matches based upon a pattern.
example=[source,sql]\n----\nLIKE 'a_'\n----\n
*/
  final public MatchCriteria matchCrit(ParseInfo info, Expression expression) throws ParseException {Character esc = null;
        Expression value = null;
        boolean negated = false;
        boolean similar = false;
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
negated = true;
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIKE:{
      jj_consume_token(LIKE);
      break;
      }
    case SIMILAR:{
      jj_consume_token(SIMILAR);
      jj_consume_token(TO);
similar = true;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
t = getToken(1);
    value = commonValueExpression(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ESCAPE:
    case LBRACE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ESCAPE:{
        jj_consume_token(ESCAPE);
        esc = charVal(info, "LIKE/SIMILAR TO ESCAPE");
        break;
        }
      case LBRACE:{
        jj_consume_token(LBRACE);
        jj_consume_token(ESCAPE);
        esc = charVal(info, "LIKE/SIMILAR TO ESCAPE");
        jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
MatchCriteria matchcriteria = new MatchCriteria(expression, value);
                matchcriteria.setNegated(negated);
            if(esc == null
                        && ((value instanceof Constant && t.image != null && t.image.startsWith("E'"))
                            || info.isBackslashDefaultMatchEscape())) {
                                esc = '\\';
            }
                if (esc != null) {
                    matchcriteria.setEscapeChar(esc.charValue());
                }
                matchcriteria.setMode(similar?MatchMode.SIMILAR:MatchMode.LIKE);
                {if ("" != null) return matchcriteria;}
    throw new Error("Missing return statement in function");
}

/*
name=like regex predicate
description=A regular expression match.
example=[source,sql]\n----\nLIKE_REGEX 'a.*b'\n----\n
*/
  final public MatchCriteria regexMatchCrit(ParseInfo info, Expression expression) throws ParseException {Expression value = null;
        boolean negated = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
negated = true;
      break;
      }
    default:
      ;
    }
    jj_consume_token(LIKE_REGEX);
    value = commonValueExpression(info);
MatchCriteria matchcriteria = new MatchCriteria(expression, value);
                matchcriteria.setNegated(negated);
                matchcriteria.setMode(MatchMode.REGEX);
                {if ("" != null) return matchcriteria;}
    throw new Error("Missing return statement in function");
}

/*
name=character
description=A single character.
example=[source,sql]\n----\n'a'\n----\n
*/
  final public Character charVal(ParseInfo info, String type) throws ParseException {String escStr = null;
    escStr = stringVal();
if (escStr.length() != 1) {
                        {if (true) throw new ParseException(QueryPlugin.Util.gs(QueryPlugin.Event.TEIID30398, type, escStr));} //$NON-NLS-1$
                }
                {if ("" != null) return Character.valueOf(escStr.charAt(0));}
    throw new Error("Missing return statement in function");
}

/*
name=between predicate
description=A comparison between two values.
example=[source,sql]\n----\nBETWEEN 1 AND 5\n----\n
*/
  final public BetweenCriteria betweenCrit(ParseInfo info, Expression expression) throws ParseException {Expression lowerExpression = null, upperExpression = null;
        boolean negated = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
negated=true;
      break;
      }
    default:
      ;
    }
    jj_consume_token(BETWEEN);
    lowerExpression = commonValueExpression(info);
    jj_consume_token(AND);
    upperExpression = commonValueExpression(info);
BetweenCriteria criteria = new BetweenCriteria(expression, lowerExpression, upperExpression);
                criteria.setNegated(negated);
                {if ("" != null) return criteria;}
    throw new Error("Missing return statement in function");
}

/*
name=is null predicate
description=A null test.
example=[source,sql]\n----\nIS NOT NULL\n----\n
*/
  final public IsNullCriteria isNullCrit(ParseInfo info, Expression expression) throws ParseException {boolean negated = false;
        IsNullCriteria criteria = null;
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
negated = true;
      break;
      }
    default:
      ;
    }
    jj_consume_token(NULL);
criteria = new IsNullCriteria(expression);
        criteria.setNegated(negated);
        {if ("" != null) return criteria;}
    throw new Error("Missing return statement in function");
}

/*
name=in predicate
description=A comparison with multiple values.
example=[source,sql]\n----\nIN (1, 5)\n----\n
*/
  final public AbstractSetCriteria setCrit(ParseInfo info, Expression expression) throws ParseException {Expression value = null;
        List setList = new ArrayList();
        QueryCommand command = null;
        ExistsCriteria.SubqueryHint hint = null;
        boolean negated = false;
        AbstractSetCriteria criteria = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
negated = true;
      break;
      }
    default:
      ;
    }
    jj_consume_token(IN);
    if (jj_2_35(2147483647)) {
hint = getSubqueryHint(getToken(1));
      command = subquery(info);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        value = commonValueExpression(info);
setList.add(value);
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            break label_28;
          }
          jj_consume_token(COMMA);
          value = commonValueExpression(info);
setList.add(value);
        }
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
if (command != null) {
                        SubquerySetCriteria ssc = new SubquerySetCriteria(expression, command);
                        ssc.setSubqueryHint(hint);
                        criteria = ssc;
                } else {
                    criteria = new SetCriteria(expression, setList);
                }
            criteria.setNegated(negated);
            {if ("" != null) return criteria;}
    throw new Error("Missing return statement in function");
}

/*
name=exists predicate
description=A test if rows exist.
example=[source,sql]\n----\nEXISTS (SELECT col FROM tbl)\n----\n
*/
  final public ExistsCriteria existsCriteria(ParseInfo info) throws ParseException {QueryCommand subquery = null;
    ExistsCriteria.SubqueryHint hint = null;
    jj_consume_token(EXISTS);
hint = getSubqueryHint(getToken(1));
    subquery = subquery(info);
ExistsCriteria existsCrit = new ExistsCriteria(subquery);
                existsCrit.setSubqueryHint(hint);
            {if ("" != null) return existsCrit;}
    throw new Error("Missing return statement in function");
}

/*
name=group by clause
description=Defines the grouping columns
example=[source,sql]\n----\nGROUP BY col1, col2\n----\n
*/
  final public GroupBy groupBy(ParseInfo info) throws ParseException {List<Expression> expressions = null;
        boolean rollup = false;
    jj_consume_token(GROUP);
    jj_consume_token(BY);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ROLLUP:{
      jj_consume_token(ROLLUP);
      jj_consume_token(LPAREN);
      expressions = expressionList(info);
      jj_consume_token(RPAREN);
rollup = true;
      break;
      }
    case CHAR:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY:
    case ARRAY_AGG:
    case CASE:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case FALSE:
    case HOUR:
    case INSERT:
    case LEFT:
    case MINUTE:
    case MONTH:
    case NOT:
    case NULL:
    case RIGHT:
    case SECOND:
    case SESSION_USER:
    case SOME:
    case TRANSLATE:
    case TRUE:
    case UNKNOWN:
    case USER:
    case YEAR:
    case XMLAGG:
    case XMLCAST:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLEXISTS:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case ESCAPEDFUNCTION:
    case ESCAPEDTYPE:
    case DECIMALVAL:
    case FLOATVAL:
    case STRINGVAL:
    case UNSIGNEDINTEGER:
    case BINARYSTRINGVAL:
    case LPAREN:
    case PLUS:
    case MINUS:
    case QMARK:
    case DOLLAR:{
      expressions = expressionList(info);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
GroupBy result = new GroupBy(expressions);
                result.setRollup(rollup);
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=having clause
description=Search condition applied after grouping.
example=[source,sql]\n----\nHAVING max(col1) = 5\n----\n
*/
  final public Criteria having(ParseInfo info) throws ParseException {Criteria criteria = null;
    jj_consume_token(HAVING);
    criteria = criteria(info);
{if ("" != null) return criteria;}
    throw new Error("Missing return statement in function");
}

/*
name=order by clause
description=Specifices row ordering.
example=[source,sql]\n----\nORDER BY x, y DESC\n----\n
*/
  final public OrderBy orderby(ParseInfo info) throws ParseException {OrderBy orderby = new OrderBy();
    OrderByItem item = null;
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    item = sortSpecification(info);
orderby.getOrderByItems().add(item);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_29;
      }
      jj_consume_token(COMMA);
      item = sortSpecification(info);
orderby.getOrderByItems().add(item);
    }
{if ("" != null) return orderby;}
    throw new Error("Missing return statement in function");
}

/*
name=sort specification
description=Defines how to sort on a particular expression
example=[source,sql]\n----\ncol1 NULLS FIRST\n----\n
*/
  final public OrderByItem sortSpecification(ParseInfo info) throws ParseException {Expression ex = null;
    boolean ascending = true;
    org.teiid.language.SortSpecification.NullOrdering nullOrdering = null;
    ex = sortKey(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASC:
    case DESC:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASC:{
        jj_consume_token(ASC);
        break;
        }
      case DESC:{
        jj_consume_token(DESC);
ascending=false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NULLS:{
      jj_consume_token(NULLS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FIRST:{
        jj_consume_token(FIRST);
nullOrdering=org.teiid.language.SortSpecification.NullOrdering.FIRST;
        break;
        }
      case LAST:{
        jj_consume_token(LAST);
nullOrdering=org.teiid.language.SortSpecification.NullOrdering.LAST;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
OrderByItem item = new OrderByItem(ex, ascending);
        if (nullOrdering != null) {
                item.setNullOrdering(nullOrdering);
        }
        {if ("" != null) return item;}
    throw new Error("Missing return statement in function");
}

/*
name=sort key
description=A sort expression.
example=[source,sql]\n----\ncol1\n----\n
*/
  final public Expression sortKey(ParseInfo info) throws ParseException {Expression ex = null;
    ex = expression(info);
//legacy support check for positional constants
        if (ex instanceof Constant) {
                boolean valid = false;
            Constant c = (Constant)ex;
            if (c.getValue() instanceof Integer) {
                Integer val = (Integer)c.getValue();
                valid = val.intValue() > 0;
            }
            if (!valid) {
                {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.non_position_constant", ex));} //$NON-NLS-1$
            }
        }
        {if ("" != null) return ex;}
    throw new Error("Missing return statement in function");
}

/*
name=integer parameter
description=A literal integer or parameter reference to an integer.
example=[source,sql]\n----\n?\n----\n
*/
  final public Expression intParam(ParseInfo info) throws ParseException {Expression ex = null;
   Integer val = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNSIGNEDINTEGER:{
      val = intVal();
{if ("" != null) return new Constant(val, DataTypeManager.DefaultDataClasses.INTEGER);}
      break;
      }
    case CHAR:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY:
    case ARRAY_AGG:
    case CASE:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case HOUR:
    case INSERT:
    case LEFT:
    case MINUTE:
    case MONTH:
    case RIGHT:
    case SECOND:
    case SESSION_USER:
    case SOME:
    case TRANSLATE:
    case USER:
    case YEAR:
    case XMLAGG:
    case XMLCAST:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case ESCAPEDFUNCTION:
    case LPAREN:
    case QMARK:
    case DOLLAR:{
      ex = unsignedValueExpressionPrimary(info);
{if ("" != null) return ex;}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=limit clause
description=Limits and/or offsets the resultant rows.
example=[source,sql]\n----\nLIMIT 2\n----\n
*/
  final public Limit limit(ParseInfo info) throws ParseException {Expression limit = null;
        Expression offset = null;
        Token t = null;
t = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIMIT:{
      jj_consume_token(LIMIT);
      offset = intParam(info);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OFFSET:
      case COMMA:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          limit = intParam(info);
          break;
          }
        case OFFSET:{
          jj_consume_token(OFFSET);
          limit = intParam(info);
Expression temp = limit; limit = offset; offset = temp;
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        ;
      }
if (limit == null) {
            limit = offset;
            offset = null;
          }
      break;
      }
    case OFFSET:{
      jj_consume_token(OFFSET);
      offset = intParam(info);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ROW:{
        jj_consume_token(ROW);
        break;
        }
      case ROWS:{
        jj_consume_token(ROWS);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FETCH:{
        limit = fetchLimit(info);
        break;
        }
      default:
        ;
      }
      break;
      }
    case FETCH:{
      limit = fetchLimit(info);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
Limit result = new Limit(offset, limit);
                result.setStrict(!isNonStrictHint(t));
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=fetch clause
description=ANSI limit.
example=[source,sql]\n----\nFETCH FIRST 1 ROWS ONLY\n----\n
*/
  final public Expression fetchLimit(ParseInfo info) throws ParseException {Expression limit = null;
    jj_consume_token(FETCH);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FIRST:{
      jj_consume_token(FIRST);
      break;
      }
    case NEXT:{
      jj_consume_token(NEXT);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY:
    case ARRAY_AGG:
    case CASE:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case HOUR:
    case INSERT:
    case LEFT:
    case MINUTE:
    case MONTH:
    case RIGHT:
    case SECOND:
    case SESSION_USER:
    case SOME:
    case TRANSLATE:
    case USER:
    case YEAR:
    case XMLAGG:
    case XMLCAST:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case ESCAPEDFUNCTION:
    case UNSIGNEDINTEGER:
    case LPAREN:
    case QMARK:
    case DOLLAR:{
      limit = intParam(info);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ROW:{
      jj_consume_token(ROW);
      break;
      }
    case ROWS:{
      jj_consume_token(ROWS);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ONLY);
if (limit == null) {
        {if ("" != null) return new Constant(1, DataTypeManager.DefaultDataClasses.INTEGER);}
      }
      {if ("" != null) return limit;}
    throw new Error("Missing return statement in function");
}

/*
name=option clause
description=Specifies query options.
example=[source,sql]\n----\nOPTION MAKEDEP tbl\n----\n
*/
  final public Option option(ParseInfo info) throws ParseException {String id = null;
        Token nocache = null;
        Option option = new Option();
        Option.MakeDep makedep = null;
    jj_consume_token(OPTION);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAKEDEP:
      case MAKEIND:
      case MAKENOTDEP:
      case NOCACHE:{
        ;
        break;
        }
      default:
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAKEDEP:{
        jj_consume_token(MAKEDEP);
        id = id(null);
        makedep = makedepOptions();
option.addDependentGroup(id, makedep);
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            break label_31;
          }
          jj_consume_token(COMMA);
          id = id(null);
          makedep = makedepOptions();
option.addDependentGroup(id, makedep);
        }
        break;
        }
      case MAKEIND:{
        jj_consume_token(MAKEIND);
        id = id(null);
        makedep = makedepOptions();
option.addIndependentGroup(id, makedep);
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            break label_32;
          }
          jj_consume_token(COMMA);
          id = id(null);
          makedep = makedepOptions();
option.addIndependentGroup(id, makedep);
        }
        break;
        }
      case MAKENOTDEP:{
        jj_consume_token(MAKENOTDEP);
        id = id(null);
option.addNotDependentGroup(id);
        label_33:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            break label_33;
          }
          jj_consume_token(COMMA);
          id = id(null);
option.addNotDependentGroup(id);
        }
        break;
        }
      case NOCACHE:{
        nocache = jj_consume_token(NOCACHE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INSTEAD:
        case ENABLED:
        case DISABLED:
        case VIEW:
        case KEY:
        case SERIAL:
        case TEXTAGG:
        case COUNT_BIG:
        case COUNT:
        case ROW_NUMBER:
        case RANK:
        case DENSE_RANK:
        case CURRENT:
        case UNBOUNDED:
        case PRECEDING:
        case FOLLOWING:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case EVERY:
        case STDDEV_POP:
        case STDDEV_SAMP:
        case VAR_SAMP:
        case VAR_POP:
        case DOCUMENT:
        case CONTENT:
        case TRIM:
        case EMPTY:
        case ORDINALITY:
        case PATH:
        case FIRST:
        case LAST:
        case NEXT:
        case SUBSTRING:
        case EXTRACT:
        case TO_CHARS:
        case TO_BYTES:
        case TIMESTAMPADD:
        case TIMESTAMPDIFF:
        case QUERYSTRING:
        case NAMESPACE:
        case RESULT:
        case INDEX:
        case ACCESSPATTERN:
        case AUTO_INCREMENT:
        case WELLFORMED:
        case SQL_TSI_FRAC_SECOND:
        case SQL_TSI_SECOND:
        case SQL_TSI_MINUTE:
        case SQL_TSI_HOUR:
        case SQL_TSI_DAY:
        case SQL_TSI_WEEK:
        case SQL_TSI_MONTH:
        case SQL_TSI_QUARTER:
        case SQL_TSI_YEAR:
        case TEXTTABLE:
        case ARRAYTABLE:
        case JSONTABLE:
        case SELECTOR:
        case SKIP_KEYWORD:
        case WIDTH:
        case PASSING:
        case NAME:
        case ENCODING:
        case COLUMNS:
        case DELIMITER:
        case QUOTE:
        case HEADER:
        case NULLS:
        case OBJECTTABLE:
        case VERSION:
        case INCLUDING:
        case EXCLUDING:
        case XMLDECLARATION:
        case VARIADIC:
        case EXCEPTION:
        case RAISE:
        case CHAIN:
        case JSON:
        case JSONARRAY_AGG:
        case JSONOBJECT:
        case PRESERVE:
        case GEOMETRY:
        case GEOGRAPHY:
        case UPSERT:
        case AFTER:
        case DEFAULT_KEYWORD:
        case TYPE:
        case TRANSLATOR:
        case JAAS:
        case CONDITION:
        case MASK:
        case ACCESS:
        case CONTROL:
        case NONE:
        case DATA:
        case DATABASE:
        case PRIVILEGES:
        case SCHEMA:
        case ROLE:
        case USE:
        case REPOSITORY:
        case RENAME:
        case DOMAIN:
        case USAGE:
        case POSITION:
        case LISTAGG:
        case OBJECT:
        case EXPLAIN:
        case ANALYZE:
        case TEXT:
        case FORMAT:
        case YAML:
        case POLICY:
        case EPOCH:
        case QUARTER:
        case ID:{
          id = id(null);
option.addNoCacheGroup(id);
          label_34:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              break label_34;
            }
            jj_consume_token(COMMA);
            id = id(null);
option.addNoCacheGroup(id);
          }
          break;
          }
        default:
          ;
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
option.setNoCache( (nocache != null) );
                {if ("" != null) return option;}
    throw new Error("Missing return statement in function");
}

/*
name=expression
description=A value.
example=[source,sql]\n----\ncol1\n----\n
*/
  final public Expression expression(ParseInfo info) throws ParseException {Expression expression = null;
    expression = criteria(info);
if (expression instanceof ExpressionCriteria) {
                        {if ("" != null) return ((ExpressionCriteria)expression).getExpression();}
                }
                {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

/*
name=common value expression
description=Establishes the precedence of concat.
example=[source,sql]\n----\n'a' || 'b'\n----\n
*/
  final public Expression commonValueExpression(ParseInfo info) throws ParseException {Expression leftExpression = null;
        Expression rightExpression = null;
        Token operator = null;
    leftExpression = plusExpression(info);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONCAT_OP:
      case DOUBLE_AMP_OP:{
        ;
        break;
        }
      default:
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOUBLE_AMP_OP:{
        operator = jj_consume_token(DOUBLE_AMP_OP);
        break;
        }
      case CONCAT_OP:{
        operator = jj_consume_token(CONCAT_OP);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightExpression = plusExpression(info);
leftExpression = new Function(operator.image, new Expression[] {leftExpression, rightExpression}); //$NON-NLS-1$
                                rightExpression = null;
    }
{if ("" != null) return leftExpression;}
    throw new Error("Missing return statement in function");
}

/*
name=numeric value expression
example=[source,sql]\n----\n1 + 2\n----\n
*/
  final public Expression plusExpression(ParseInfo info) throws ParseException {Expression leftExpression = null;
        Expression rightExpression = null;
        String operator = null;
    leftExpression = timesExpression(info);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        break label_36;
      }
      operator = plusMinus();
      rightExpression = timesExpression(info);
leftExpression = new Function(operator, new Expression[] { leftExpression, rightExpression });
                                rightExpression = null;
                                operator = null;
    }
{if ("" != null) return leftExpression;}
    throw new Error("Missing return statement in function");
}

/*
name=plus or minus
description=The + or - operator.
example=[source,sql]\n----\n+\n----\n
*/
  final public String plusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return getToken(0).image;}
    throw new Error("Missing return statement in function");
}

/*
name=term
description=A numeric term
example=[source,sql]\n----\n1 * 2\n----\n
*/
  final public Expression timesExpression(ParseInfo info) throws ParseException {Expression leftExpression = null;
        Expression rightExpression = null;
        String operator = null;
    leftExpression = valueExpressionPrimary(info);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:
      case SLASH:{
        ;
        break;
        }
      default:
        break label_37;
      }
      operator = timesOperator();
      rightExpression = valueExpressionPrimary(info);
leftExpression = new Function(operator, new Expression[] {leftExpression, rightExpression});
                                rightExpression = null;
                                operator = null;
    }
{if ("" != null) return leftExpression;}
    throw new Error("Missing return statement in function");
}

/*
name=star or slash
description=The * or / operator.
example=[source,sql]\n----\n/\n----\n
*/
  final public String timesOperator() throws ParseException {Token operator = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:{
      operator = jj_consume_token(STAR);
      break;
      }
    case SLASH:{
      operator = jj_consume_token(SLASH);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return operator.image;}
    throw new Error("Missing return statement in function");
}

/*
name=value expression primary
description=A simple value expression.
example=[source,sql]\n----\n+col1\n----\n
*/
  final public Expression valueExpressionPrimary(ParseInfo info) throws ParseException {String strVal = null;
        Expression ex = null;
        Expression indexExpr = null;
    List<Expression> indexExprs = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATE:
    case TIME:
    case TIMESTAMP:
    case FALSE:
    case NULL:
    case TRUE:
    case UNKNOWN:
    case ESCAPEDTYPE:
    case STRINGVAL:
    case BINARYSTRINGVAL:{
      ex = nonNumericLiteral();
      break;
      }
    case CHAR:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY:
    case ARRAY_AGG:
    case CASE:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case HOUR:
    case INSERT:
    case LEFT:
    case MINUTE:
    case MONTH:
    case RIGHT:
    case SECOND:
    case SESSION_USER:
    case SOME:
    case TRANSLATE:
    case USER:
    case YEAR:
    case XMLAGG:
    case XMLCAST:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case ESCAPEDFUNCTION:
    case DECIMALVAL:
    case FLOATVAL:
    case UNSIGNEDINTEGER:
    case LPAREN:
    case PLUS:
    case MINUS:
    case QMARK:
    case DOLLAR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        strVal = plusMinus();
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECIMALVAL:
      case FLOATVAL:
      case UNSIGNEDINTEGER:{
        ex = unsignedNumericLiteral(strVal);
        break;
        }
      case CHAR:
      case CAST:
      case CONVERT:
      case ANY:
      case ARRAY:
      case ARRAY_AGG:
      case CASE:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case HOUR:
      case INSERT:
      case LEFT:
      case MINUTE:
      case MONTH:
      case RIGHT:
      case SECOND:
      case SESSION_USER:
      case SOME:
      case TRANSLATE:
      case USER:
      case YEAR:
      case XMLAGG:
      case XMLCAST:
      case XMLCONCAT:
      case XMLCOMMENT:
      case XMLELEMENT:
      case XMLFOREST:
      case XMLPARSE:
      case XMLPI:
      case XMLQUERY:
      case XMLSERIALIZE:
      case XMLTEXT:
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case SERIAL:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case PERCENT_RANK:
      case CUME_DIST:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case INDEX:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case EXCEPTION:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case DEFAULT_KEYWORD:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:
      case ESCAPEDFUNCTION:
      case LPAREN:
      case QMARK:
      case DOLLAR:{
        ex = unsignedValueExpressionPrimary(info);
        label_38:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LSBRACE:{
            ;
            break;
            }
          default:
            break label_38;
          }
          jj_consume_token(LSBRACE);
          indexExpr = plusExpression(info);
          jj_consume_token(RSBRACE);
indexExprs = arrayExpressions(indexExprs, indexExpr);
        }
if (indexExprs != null) {
            for (Expression expr : indexExprs) {
                ex = new Function("array_get", new Expression[] {ex, expr});
            }
          }
if (strVal != null && strVal.charAt(0) == '-') {
            ex = new Function("*", new Expression[] { new Constant(-1), ex });
         }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return ex;}
    throw new Error("Missing return statement in function");
}

/*
name=parameter reference
description=A parameter reference to be bound later.
example=[source,sql]\n----\n?\n----\n
*/
  final public Reference parameterReference(ParseInfo info) throws ParseException {Integer index = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QMARK:{
      jj_consume_token(QMARK);
{if ("" != null) return new Reference(info.referenceCount++);}
      break;
      }
    case DOLLAR:{
      jj_consume_token(DOLLAR);
      index = intVal();
{if ("" != null) return new Reference(index -1);}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Expression unescapedFunction(ParseInfo info) throws ParseException {Expression expression = null;
    Expression condition = null;
    ParsedDataType type = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY_AGG:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case HOUR:
    case INSERT:
    case LEFT:
    case MINUTE:
    case MONTH:
    case RIGHT:
    case SECOND:
    case SESSION_USER:
    case SOME:
    case TRANSLATE:
    case USER:
    case YEAR:
    case XMLAGG:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      if (jj_2_36(2)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TEXTAGG:{
          expression = textAgg(info);
          break;
          }
        case ANY:
        case SOME:
        case COUNT_BIG:
        case COUNT:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case EVERY:
        case STDDEV_POP:
        case STDDEV_SAMP:
        case VAR_SAMP:
        case VAR_POP:{
          expression = aggregateSymbol(info);
          break;
          }
        case ARRAY_AGG:
        case XMLAGG:
        case JSONARRAY_AGG:{
          expression = orderedAgg(info);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FILTER:{
          condition = filterClause(info);
          break;
          }
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OVER:{
          expression = windowSpecification(expression, info);
          break;
          }
        default:
          ;
        }
      } else if (jj_2_37(2)) {
        expression = analyticAggregateSymbol(info);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FILTER:{
          condition = filterClause(info);
          break;
          }
        default:
          ;
        }
        expression = windowSpecification(expression, info);
      } else if (jj_2_38(2)) {
        expression = function(info);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OVER:{
          expression = windowSpecification(expression, info);
          break;
          }
        default:
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
if (condition != null) {
            if (expression instanceof WindowFunction) {
                ((WindowFunction)expression).getFunction().setCondition(condition);
            } else {
                ((AggregateSymbol)expression).setCondition(condition);
            }
        }
        {if ("" != null) return expression;}
      break;
      }
    case XMLCAST:{
      jj_consume_token(XMLCAST);
      jj_consume_token(LPAREN);
      expression = expression(info);
      jj_consume_token(AS);
      type = parseDataType();
      jj_consume_token(RPAREN);
{if ("" != null) return new XMLCast(expression, type.type);}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=nested expression
description=An expression nested in parens
example=[source,sql]\n----\n(1)\n----\n
*/
  final public Expression nestedExpression(ParseInfo info) throws ParseException {Expression expression = null;
    Expression arrayExpression = null;
    List<Expression> arrayExpressions = null;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case CAST:
    case CONVERT:
    case ANY:
    case ARRAY:
    case ARRAY_AGG:
    case CASE:
    case CURRENT_DATE:
    case CURRENT_TIME:
    case CURRENT_TIMESTAMP:
    case EXISTS:
    case FALSE:
    case HOUR:
    case INSERT:
    case LEFT:
    case MINUTE:
    case MONTH:
    case NOT:
    case NULL:
    case RIGHT:
    case SECOND:
    case SESSION_USER:
    case SOME:
    case TRANSLATE:
    case TRUE:
    case UNKNOWN:
    case USER:
    case YEAR:
    case XMLAGG:
    case XMLCAST:
    case XMLCONCAT:
    case XMLCOMMENT:
    case XMLELEMENT:
    case XMLEXISTS:
    case XMLFOREST:
    case XMLPARSE:
    case XMLPI:
    case XMLQUERY:
    case XMLSERIALIZE:
    case XMLTEXT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case PERCENT_RANK:
    case CUME_DIST:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:
    case ESCAPEDFUNCTION:
    case ESCAPEDTYPE:
    case DECIMALVAL:
    case FLOATVAL:
    case STRINGVAL:
    case UNSIGNEDINTEGER:
    case BINARYSTRINGVAL:
    case LPAREN:
    case PLUS:
    case MINUS:
    case QMARK:
    case DOLLAR:{
      expression = expression(info);
      label_39:
      while (true) {
        if (jj_2_39(2)) {
          ;
        } else {
          break label_39;
        }
        jj_consume_token(COMMA);
        arrayExpression = expression(info);
if (expression != null) {
             arrayExpressions = arrayExpressions(arrayExpressions, expression);
             expression = null;
          }
          arrayExpressions = arrayExpressions(arrayExpressions, arrayExpression);
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
arrayExpressions = arrayExpressions(arrayExpressions, expression);
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
if (arrayExpressions != null) {
            expression = new Array(arrayExpressions);
        } else if (expression == null) {
            expression = new Array(new ArrayList<Expression>(0));
        }
        {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

/*
name=unsigned value expression primary
description=An unsigned simple value expression.
example=[source,sql]\n----\ncol1\n----\n
*/
  final public Expression unsignedValueExpressionPrimary(ParseInfo info) throws ParseException {Expression expression = null;
        Token symbol = null;
        QueryCommand subquery = null;
        ExistsCriteria.SubqueryHint hint = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QMARK:
    case DOLLAR:{
      // Reference
                      expression = parameterReference(info);
      break;
      }
    case ESCAPEDFUNCTION:{
      jj_consume_token(ESCAPEDFUNCTION);
      expression = function(info);
      jj_consume_token(RBRACE);
      break;
      }
    default:
      if (jj_2_40(2)) {
        expression = unescapedFunction(info);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INSTEAD:
        case ENABLED:
        case DISABLED:
        case VIEW:
        case KEY:
        case SERIAL:
        case TEXTAGG:
        case COUNT_BIG:
        case COUNT:
        case ROW_NUMBER:
        case RANK:
        case DENSE_RANK:
        case CURRENT:
        case UNBOUNDED:
        case PRECEDING:
        case FOLLOWING:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case EVERY:
        case STDDEV_POP:
        case STDDEV_SAMP:
        case VAR_SAMP:
        case VAR_POP:
        case DOCUMENT:
        case CONTENT:
        case TRIM:
        case EMPTY:
        case ORDINALITY:
        case PATH:
        case FIRST:
        case LAST:
        case NEXT:
        case SUBSTRING:
        case EXTRACT:
        case TO_CHARS:
        case TO_BYTES:
        case TIMESTAMPADD:
        case TIMESTAMPDIFF:
        case QUERYSTRING:
        case NAMESPACE:
        case RESULT:
        case INDEX:
        case ACCESSPATTERN:
        case AUTO_INCREMENT:
        case WELLFORMED:
        case SQL_TSI_FRAC_SECOND:
        case SQL_TSI_SECOND:
        case SQL_TSI_MINUTE:
        case SQL_TSI_HOUR:
        case SQL_TSI_DAY:
        case SQL_TSI_WEEK:
        case SQL_TSI_MONTH:
        case SQL_TSI_QUARTER:
        case SQL_TSI_YEAR:
        case TEXTTABLE:
        case ARRAYTABLE:
        case JSONTABLE:
        case SELECTOR:
        case SKIP_KEYWORD:
        case WIDTH:
        case PASSING:
        case NAME:
        case ENCODING:
        case COLUMNS:
        case DELIMITER:
        case QUOTE:
        case HEADER:
        case NULLS:
        case OBJECTTABLE:
        case VERSION:
        case INCLUDING:
        case EXCLUDING:
        case XMLDECLARATION:
        case VARIADIC:
        case EXCEPTION:
        case RAISE:
        case CHAIN:
        case JSON:
        case JSONARRAY_AGG:
        case JSONOBJECT:
        case PRESERVE:
        case GEOMETRY:
        case GEOGRAPHY:
        case UPSERT:
        case AFTER:
        case DEFAULT_KEYWORD:
        case TYPE:
        case TRANSLATOR:
        case JAAS:
        case CONDITION:
        case MASK:
        case ACCESS:
        case CONTROL:
        case NONE:
        case DATA:
        case DATABASE:
        case PRIVILEGES:
        case SCHEMA:
        case ROLE:
        case USE:
        case REPOSITORY:
        case RENAME:
        case DOMAIN:
        case USAGE:
        case POSITION:
        case LISTAGG:
        case OBJECT:
        case EXPLAIN:
        case ANALYZE:
        case TEXT:
        case FORMAT:
        case YAML:
        case POLICY:
        case EPOCH:
        case QUARTER:
        case ID:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ID:{
            symbol = jj_consume_token(ID);
String symbolImage = symbol.image;
                                if(isStringLiteral(symbolImage, info)) {
                                    {if ("" != null) return new Constant(normalizeStringLiteral(symbolImage));}
                                }
            break;
            }
          case INSTEAD:
          case ENABLED:
          case DISABLED:
          case VIEW:
          case KEY:
          case SERIAL:
          case TEXTAGG:
          case COUNT_BIG:
          case COUNT:
          case ROW_NUMBER:
          case RANK:
          case DENSE_RANK:
          case CURRENT:
          case UNBOUNDED:
          case PRECEDING:
          case FOLLOWING:
          case SUM:
          case AVG:
          case MIN:
          case MAX:
          case EVERY:
          case STDDEV_POP:
          case STDDEV_SAMP:
          case VAR_SAMP:
          case VAR_POP:
          case DOCUMENT:
          case CONTENT:
          case TRIM:
          case EMPTY:
          case ORDINALITY:
          case PATH:
          case FIRST:
          case LAST:
          case NEXT:
          case SUBSTRING:
          case EXTRACT:
          case TO_CHARS:
          case TO_BYTES:
          case TIMESTAMPADD:
          case TIMESTAMPDIFF:
          case QUERYSTRING:
          case NAMESPACE:
          case RESULT:
          case INDEX:
          case ACCESSPATTERN:
          case AUTO_INCREMENT:
          case WELLFORMED:
          case SQL_TSI_FRAC_SECOND:
          case SQL_TSI_SECOND:
          case SQL_TSI_MINUTE:
          case SQL_TSI_HOUR:
          case SQL_TSI_DAY:
          case SQL_TSI_WEEK:
          case SQL_TSI_MONTH:
          case SQL_TSI_QUARTER:
          case SQL_TSI_YEAR:
          case TEXTTABLE:
          case ARRAYTABLE:
          case JSONTABLE:
          case SELECTOR:
          case SKIP_KEYWORD:
          case WIDTH:
          case PASSING:
          case NAME:
          case ENCODING:
          case COLUMNS:
          case DELIMITER:
          case QUOTE:
          case HEADER:
          case NULLS:
          case OBJECTTABLE:
          case VERSION:
          case INCLUDING:
          case EXCLUDING:
          case XMLDECLARATION:
          case VARIADIC:
          case EXCEPTION:
          case RAISE:
          case CHAIN:
          case JSON:
          case JSONARRAY_AGG:
          case JSONOBJECT:
          case PRESERVE:
          case GEOMETRY:
          case GEOGRAPHY:
          case UPSERT:
          case AFTER:
          case DEFAULT_KEYWORD:
          case TYPE:
          case TRANSLATOR:
          case JAAS:
          case CONDITION:
          case MASK:
          case ACCESS:
          case CONTROL:
          case NONE:
          case DATA:
          case DATABASE:
          case PRIVILEGES:
          case SCHEMA:
          case ROLE:
          case USE:
          case REPOSITORY:
          case RENAME:
          case DOMAIN:
          case USAGE:
          case POSITION:
          case LISTAGG:
          case OBJECT:
          case EXPLAIN:
          case ANALYZE:
          case TEXT:
          case FORMAT:
          case YAML:
          case POLICY:
          case EPOCH:
          case QUARTER:{
            symbol = nonReserved();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
expression = new ElementSymbol(normalizeId(symbol.image));
          break;
          }
        default:
          if (jj_2_41(2147483647)) {
hint = getSubqueryHint(getToken(1));
            subquery = subquery(info);
ScalarSubquery ss = new ScalarSubquery(subquery);
                   ss.setSubqueryHint(hint);
                   expression = ss;
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LPAREN:{
              expression = nestedExpression(info);
              break;
              }
            case ARRAY:{
              expression = arrayExpression(info);
              break;
              }
            default:
              if (jj_2_42(2)) {
                expression = searchedCaseExpression(info);
              } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case CASE:{
                  // Non-searched CASE expressions
                                  expression = caseExpression(info);
                  break;
                  }
                default:
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

/*
name=ARRAY expression constructor
description=Creates and array of the given expressions.
example=[source,sql]\n----\nARRAY[1,2]\n----\n
*/
  final public Expression arrayExpression(ParseInfo info) throws ParseException {Expression arrayExpression = null;
    List<Expression> arrayExpressions = new ArrayList<Expression>();
    QueryCommand subquery = null;
    jj_consume_token(ARRAY);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LSBRACE:{
      jj_consume_token(LSBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR:
      case DATE:
      case TIME:
      case TIMESTAMP:
      case CAST:
      case CONVERT:
      case ANY:
      case ARRAY:
      case ARRAY_AGG:
      case CASE:
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case EXISTS:
      case FALSE:
      case HOUR:
      case INSERT:
      case LEFT:
      case MINUTE:
      case MONTH:
      case NOT:
      case NULL:
      case RIGHT:
      case SECOND:
      case SESSION_USER:
      case SOME:
      case TRANSLATE:
      case TRUE:
      case UNKNOWN:
      case USER:
      case YEAR:
      case XMLAGG:
      case XMLCAST:
      case XMLCONCAT:
      case XMLCOMMENT:
      case XMLELEMENT:
      case XMLEXISTS:
      case XMLFOREST:
      case XMLPARSE:
      case XMLPI:
      case XMLQUERY:
      case XMLSERIALIZE:
      case XMLTEXT:
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case SERIAL:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case PERCENT_RANK:
      case CUME_DIST:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case INDEX:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case EXCEPTION:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case DEFAULT_KEYWORD:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:
      case ESCAPEDFUNCTION:
      case ESCAPEDTYPE:
      case DECIMALVAL:
      case FLOATVAL:
      case STRINGVAL:
      case UNSIGNEDINTEGER:
      case BINARYSTRINGVAL:
      case LPAREN:
      case PLUS:
      case MINUS:
      case QMARK:
      case DOLLAR:{
        arrayExpression = expression(info);
arrayExpressions.add(arrayExpression);
        label_40:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            break label_40;
          }
          jj_consume_token(COMMA);
          arrayExpression = expression(info);
arrayExpressions.add(arrayExpression);
        }
        break;
        }
      default:
        ;
      }
      jj_consume_token(RSBRACE);
{if ("" != null) return new Array(arrayExpressions);}
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      subquery = queryExpression(info);
      jj_consume_token(RPAREN);
{if ("" != null) return arrayFromQuery(subquery);}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=window specification
description=The window specification for an analytical or windowed aggregate function.
example=[source,sql]\n----\nOVER (PARTION BY col1)\n----\n
*/
  final public Expression windowSpecification(Expression agg, ParseInfo info) throws ParseException {List<Expression> partitionList = null;
        OrderBy orderBy = null;
        WindowFrame frame = null;
    jj_consume_token(OVER);
if (!(agg instanceof AggregateSymbol)) {
            if (!(agg instanceof Function)) {
              {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.invalid_window", agg));} //$NON-NLS-1$
            }
            Function f = (Function)agg;
            agg = new AggregateSymbol(f.getName(), false, f.getArgs(), null);
          }
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PARTITION:{
      jj_consume_token(PARTITION);
      jj_consume_token(BY);
      partitionList = expressionList(info);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDER:{
      orderBy = orderby(info);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RANGE:
    case ROWS:{
      frame = windowFrame(info);
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
WindowFunction result = new WindowFunction();
        WindowSpecification ws = new WindowSpecification();
        result.setFunction((AggregateSymbol)agg);
        ws.setPartition(partitionList);
        ws.setOrderBy(orderBy);
        ws.setWindowFrame(frame);
        result.setWindowSpecification(ws);
        {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=window frame
description=Defines the mode, start, and optionally end of the window frame
example=[source,sql]\n----\nRANGE UNBOUNDED PRECEDING\n----\n
*/
  final public WindowFrame windowFrame(ParseInfo info) throws ParseException {WindowFrame.FrameBound start = null;
    WindowFrame.FrameBound end = null;
    org.teiid.language.WindowFrame.FrameMode mode = org.teiid.language.WindowFrame.FrameMode.RANGE;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RANGE:{
      jj_consume_token(RANGE);
      break;
      }
    case ROWS:{
      jj_consume_token(ROWS);
mode = org.teiid.language.WindowFrame.FrameMode.ROWS;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BETWEEN:{
      jj_consume_token(BETWEEN);
      start = windowFrameBound(info);
      jj_consume_token(AND);
      end = windowFrameBound(info);
      break;
      }
    case CURRENT:
    case UNBOUNDED:
    case UNSIGNEDINTEGER:{
      start = windowFrameBound(info);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
WindowFrame result = new WindowFrame(mode);
     result.setStart(start);
     result.setEnd(end);
     {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=window frame bound
description=Defines the start or end of a window frame
example=[source,sql]\n----\nCURRENT ROW\n----\n
*/
  final public WindowFrame.FrameBound windowFrameBound(ParseInfo info) throws ParseException {Integer val = null;
   org.teiid.language.WindowFrame.BoundMode boundMode = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNBOUNDED:
    case UNSIGNEDINTEGER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNBOUNDED:{
        jj_consume_token(UNBOUNDED);
        break;
        }
      case UNSIGNEDINTEGER:{
        val = intVal();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOLLOWING:{
        jj_consume_token(FOLLOWING);
boundMode=org.teiid.language.WindowFrame.BoundMode.FOLLOWING;
        break;
        }
      case PRECEDING:{
        jj_consume_token(PRECEDING);
boundMode=org.teiid.language.WindowFrame.BoundMode.PRECEDING;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case CURRENT:{
      jj_consume_token(CURRENT);
      jj_consume_token(ROW);
boundMode=org.teiid.language.WindowFrame.BoundMode.CURRENT_ROW;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
WindowFrame.FrameBound result = new WindowFrame.FrameBound(boundMode);
     result.setBound(val);
     {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=case expression
description=If/then/else chain using a common search predicand.
example=[source,sql]\n----\nCASE col1 WHEN 'a' THEN 1 ELSE 2\n----\n
*/
  final public CaseExpression caseExpression(ParseInfo info) throws ParseException {Expression expression = null, whenExpression = null, thenExpression = null, elseExpression = null;
        ArrayList whenExpressions = new ArrayList(2);
        ArrayList thenExpressions = new ArrayList(2);
    jj_consume_token(CASE);
    expression = expression(info);
    label_41:
    while (true) {
      jj_consume_token(WHEN);
      whenExpression = expression(info);
      jj_consume_token(THEN);
      thenExpression = expression(info);
whenExpressions.add(whenExpression);
                        thenExpressions.add(thenExpression);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHEN:{
        ;
        break;
        }
      default:
        break label_41;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseExpression = expression(info);
      break;
      }
    default:
      ;
    }
    jj_consume_token(END);
CaseExpression caseExpr = new CaseExpression(expression, whenExpressions, thenExpressions);
                caseExpr.setElseExpression(elseExpression);
                {if ("" != null) return caseExpr;}
    throw new Error("Missing return statement in function");
}

/*
name=searched case expression
description=If/then/else chain using multiple search conditions.
example=[source,sql]\n----\nCASE WHEN x = 'a' THEN 1 WHEN y = 'b' THEN 2\n----\n
*/
  final public SearchedCaseExpression searchedCaseExpression(ParseInfo info) throws ParseException {Expression thenExpression = null, elseExpression = null;
        Criteria whenCriteria = null;
        ArrayList whenCriteriaList = new ArrayList(2);
        ArrayList thenExpressions = new ArrayList(2);
    jj_consume_token(CASE);
    label_42:
    while (true) {
      jj_consume_token(WHEN);
      whenCriteria = criteria(info);
      jj_consume_token(THEN);
      thenExpression = expression(info);
whenCriteriaList.add(whenCriteria);
                        thenExpressions.add(thenExpression);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHEN:{
        ;
        break;
        }
      default:
        break label_42;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseExpression = expression(info);
      break;
      }
    default:
      ;
    }
    jj_consume_token(END);
SearchedCaseExpression caseExpr = new SearchedCaseExpression(whenCriteriaList, thenExpressions);
                caseExpr.setElseExpression(elseExpression);
                {if ("" != null) return caseExpr;}
    throw new Error("Missing return statement in function");
}

/*
name=function
description=Calls a scalar function.
example=[source,sql]\n----\nfunc('1', col1)\n----\n
*/
  final public Expression function(ParseInfo info) throws ParseException {String funcName = null;

        Expression expression = null;
        ArrayList args = new ArrayList(2);
        ArrayList otherArgs = null;
        Token funcToken = null;
        Boolean distinct = null;
        OrderBy orderBy = null;
        Expression condition = null;
        String literal = null;
        ParsedDataType type = null;
        Integer intVal = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONVERT:{
      funcToken = jj_consume_token(CONVERT);
      jj_consume_token(LPAREN);
      expression = expression(info);
args.add(expression);
      jj_consume_token(COMMA);
      type = parseDataType();
args.add(new Constant(type.type));
      jj_consume_token(RPAREN);
      break;
      }
    case CAST:{
      funcToken = jj_consume_token(CAST);
      jj_consume_token(LPAREN);
      expression = expression(info);
args.add(expression);
      jj_consume_token(AS);
      type = parseDataType();
args.add(new Constant(type.type));
      jj_consume_token(RPAREN);
      break;
      }
    default:
      if (jj_2_44(2)) {
        funcToken = jj_consume_token(SUBSTRING);
        jj_consume_token(LPAREN);
        expression = expression(info);
args.add(expression);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FROM:{
          jj_consume_token(FROM);
          expression = expression(info);
args.add(expression);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FOR:{
            jj_consume_token(FOR);
            expression = expression(info);
args.add(expression);
            break;
            }
          default:
            ;
          }
          break;
          }
        case COMMA:{
          jj_consume_token(COMMA);
          otherArgs = expressionList(info);
args.addAll(otherArgs);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_45(2)) {
        funcToken = jj_consume_token(EXTRACT);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case YEAR:{
          funcToken = jj_consume_token(YEAR);
          break;
          }
        case MONTH:{
          funcToken = jj_consume_token(MONTH);
          break;
          }
        case DAY:{
          funcToken = jj_consume_token(DAY);
funcName = "DAYOFMONTH";
          break;
          }
        case HOUR:{
          funcToken = jj_consume_token(HOUR);
          break;
          }
        case MINUTE:{
          funcToken = jj_consume_token(MINUTE);
          break;
          }
        case SECOND:{
          funcToken = jj_consume_token(SECOND);
          break;
          }
        case QUARTER:{
          funcToken = jj_consume_token(QUARTER);
          break;
          }
        case EPOCH:{
          funcToken = jj_consume_token(EPOCH);
          break;
          }
        case DOW:{
          funcToken = jj_consume_token(DOW);
funcName = "DAYOFWEEK";
          break;
          }
        case DOY:{
          funcToken = jj_consume_token(DOY);
funcName = "DAYOFYEAR";
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(FROM);
        expression = expression(info);
args.add(expression);
        jj_consume_token(RPAREN);
      } else if (jj_2_46(2)) {
        funcToken = jj_consume_token(TRIM);
        jj_consume_token(LPAREN);
funcName = funcToken.image; funcToken = null; expression = null;
        if (jj_2_43(2147483647)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOTH:
          case LEADING:
          case TRAILING:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LEADING:{
              funcToken = jj_consume_token(LEADING);
              break;
              }
            case TRAILING:{
              funcToken = jj_consume_token(TRAILING);
              break;
              }
            case BOTH:{
              funcToken = jj_consume_token(BOTH);
              break;
              }
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CHAR:
            case DATE:
            case TIME:
            case TIMESTAMP:
            case CAST:
            case CONVERT:
            case ANY:
            case ARRAY:
            case ARRAY_AGG:
            case CASE:
            case CURRENT_DATE:
            case CURRENT_TIME:
            case CURRENT_TIMESTAMP:
            case EXISTS:
            case FALSE:
            case HOUR:
            case INSERT:
            case LEFT:
            case MINUTE:
            case MONTH:
            case NOT:
            case NULL:
            case RIGHT:
            case SECOND:
            case SESSION_USER:
            case SOME:
            case TRANSLATE:
            case TRUE:
            case UNKNOWN:
            case USER:
            case YEAR:
            case XMLAGG:
            case XMLCAST:
            case XMLCONCAT:
            case XMLCOMMENT:
            case XMLELEMENT:
            case XMLEXISTS:
            case XMLFOREST:
            case XMLPARSE:
            case XMLPI:
            case XMLQUERY:
            case XMLSERIALIZE:
            case XMLTEXT:
            case INSTEAD:
            case ENABLED:
            case DISABLED:
            case VIEW:
            case KEY:
            case SERIAL:
            case TEXTAGG:
            case COUNT_BIG:
            case COUNT:
            case ROW_NUMBER:
            case RANK:
            case DENSE_RANK:
            case PERCENT_RANK:
            case CUME_DIST:
            case CURRENT:
            case UNBOUNDED:
            case PRECEDING:
            case FOLLOWING:
            case SUM:
            case AVG:
            case MIN:
            case MAX:
            case EVERY:
            case STDDEV_POP:
            case STDDEV_SAMP:
            case VAR_SAMP:
            case VAR_POP:
            case DOCUMENT:
            case CONTENT:
            case TRIM:
            case EMPTY:
            case ORDINALITY:
            case PATH:
            case FIRST:
            case LAST:
            case NEXT:
            case SUBSTRING:
            case EXTRACT:
            case TO_CHARS:
            case TO_BYTES:
            case TIMESTAMPADD:
            case TIMESTAMPDIFF:
            case QUERYSTRING:
            case NAMESPACE:
            case RESULT:
            case INDEX:
            case ACCESSPATTERN:
            case AUTO_INCREMENT:
            case WELLFORMED:
            case SQL_TSI_FRAC_SECOND:
            case SQL_TSI_SECOND:
            case SQL_TSI_MINUTE:
            case SQL_TSI_HOUR:
            case SQL_TSI_DAY:
            case SQL_TSI_WEEK:
            case SQL_TSI_MONTH:
            case SQL_TSI_QUARTER:
            case SQL_TSI_YEAR:
            case TEXTTABLE:
            case ARRAYTABLE:
            case JSONTABLE:
            case SELECTOR:
            case SKIP_KEYWORD:
            case WIDTH:
            case PASSING:
            case NAME:
            case ENCODING:
            case COLUMNS:
            case DELIMITER:
            case QUOTE:
            case HEADER:
            case NULLS:
            case OBJECTTABLE:
            case VERSION:
            case INCLUDING:
            case EXCLUDING:
            case XMLDECLARATION:
            case VARIADIC:
            case EXCEPTION:
            case RAISE:
            case CHAIN:
            case JSON:
            case JSONARRAY_AGG:
            case JSONOBJECT:
            case PRESERVE:
            case GEOMETRY:
            case GEOGRAPHY:
            case UPSERT:
            case AFTER:
            case DEFAULT_KEYWORD:
            case TYPE:
            case TRANSLATOR:
            case JAAS:
            case CONDITION:
            case MASK:
            case ACCESS:
            case CONTROL:
            case NONE:
            case DATA:
            case DATABASE:
            case PRIVILEGES:
            case SCHEMA:
            case ROLE:
            case USE:
            case REPOSITORY:
            case RENAME:
            case DOMAIN:
            case USAGE:
            case POSITION:
            case LISTAGG:
            case OBJECT:
            case EXPLAIN:
            case ANALYZE:
            case TEXT:
            case FORMAT:
            case YAML:
            case POLICY:
            case EPOCH:
            case QUARTER:
            case ID:
            case ESCAPEDFUNCTION:
            case ESCAPEDTYPE:
            case DECIMALVAL:
            case FLOATVAL:
            case STRINGVAL:
            case UNSIGNEDINTEGER:
            case BINARYSTRINGVAL:
            case LPAREN:
            case PLUS:
            case MINUS:
            case QMARK:
            case DOLLAR:{
              expression = expression(info);
              break;
              }
            default:
              ;
            }
            break;
            }
          case CHAR:
          case DATE:
          case TIME:
          case TIMESTAMP:
          case CAST:
          case CONVERT:
          case ANY:
          case ARRAY:
          case ARRAY_AGG:
          case CASE:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case EXISTS:
          case FALSE:
          case HOUR:
          case INSERT:
          case LEFT:
          case MINUTE:
          case MONTH:
          case NOT:
          case NULL:
          case RIGHT:
          case SECOND:
          case SESSION_USER:
          case SOME:
          case TRANSLATE:
          case TRUE:
          case UNKNOWN:
          case USER:
          case YEAR:
          case XMLAGG:
          case XMLCAST:
          case XMLCONCAT:
          case XMLCOMMENT:
          case XMLELEMENT:
          case XMLEXISTS:
          case XMLFOREST:
          case XMLPARSE:
          case XMLPI:
          case XMLQUERY:
          case XMLSERIALIZE:
          case XMLTEXT:
          case INSTEAD:
          case ENABLED:
          case DISABLED:
          case VIEW:
          case KEY:
          case SERIAL:
          case TEXTAGG:
          case COUNT_BIG:
          case COUNT:
          case ROW_NUMBER:
          case RANK:
          case DENSE_RANK:
          case PERCENT_RANK:
          case CUME_DIST:
          case CURRENT:
          case UNBOUNDED:
          case PRECEDING:
          case FOLLOWING:
          case SUM:
          case AVG:
          case MIN:
          case MAX:
          case EVERY:
          case STDDEV_POP:
          case STDDEV_SAMP:
          case VAR_SAMP:
          case VAR_POP:
          case DOCUMENT:
          case CONTENT:
          case TRIM:
          case EMPTY:
          case ORDINALITY:
          case PATH:
          case FIRST:
          case LAST:
          case NEXT:
          case SUBSTRING:
          case EXTRACT:
          case TO_CHARS:
          case TO_BYTES:
          case TIMESTAMPADD:
          case TIMESTAMPDIFF:
          case QUERYSTRING:
          case NAMESPACE:
          case RESULT:
          case INDEX:
          case ACCESSPATTERN:
          case AUTO_INCREMENT:
          case WELLFORMED:
          case SQL_TSI_FRAC_SECOND:
          case SQL_TSI_SECOND:
          case SQL_TSI_MINUTE:
          case SQL_TSI_HOUR:
          case SQL_TSI_DAY:
          case SQL_TSI_WEEK:
          case SQL_TSI_MONTH:
          case SQL_TSI_QUARTER:
          case SQL_TSI_YEAR:
          case TEXTTABLE:
          case ARRAYTABLE:
          case JSONTABLE:
          case SELECTOR:
          case SKIP_KEYWORD:
          case WIDTH:
          case PASSING:
          case NAME:
          case ENCODING:
          case COLUMNS:
          case DELIMITER:
          case QUOTE:
          case HEADER:
          case NULLS:
          case OBJECTTABLE:
          case VERSION:
          case INCLUDING:
          case EXCLUDING:
          case XMLDECLARATION:
          case VARIADIC:
          case EXCEPTION:
          case RAISE:
          case CHAIN:
          case JSON:
          case JSONARRAY_AGG:
          case JSONOBJECT:
          case PRESERVE:
          case GEOMETRY:
          case GEOGRAPHY:
          case UPSERT:
          case AFTER:
          case DEFAULT_KEYWORD:
          case TYPE:
          case TRANSLATOR:
          case JAAS:
          case CONDITION:
          case MASK:
          case ACCESS:
          case CONTROL:
          case NONE:
          case DATA:
          case DATABASE:
          case PRIVILEGES:
          case SCHEMA:
          case ROLE:
          case USE:
          case REPOSITORY:
          case RENAME:
          case DOMAIN:
          case USAGE:
          case POSITION:
          case LISTAGG:
          case OBJECT:
          case EXPLAIN:
          case ANALYZE:
          case TEXT:
          case FORMAT:
          case YAML:
          case POLICY:
          case EPOCH:
          case QUARTER:
          case ID:
          case ESCAPEDFUNCTION:
          case ESCAPEDTYPE:
          case DECIMALVAL:
          case FLOATVAL:
          case STRINGVAL:
          case UNSIGNEDINTEGER:
          case BINARYSTRINGVAL:
          case LPAREN:
          case PLUS:
          case MINUS:
          case QMARK:
          case DOLLAR:{
            expression = expression(info);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(FROM);
        } else {
          ;
        }
if (funcToken == null) {
                  args.add(new Constant("BOTH"));
              } else {
                  args.add(new Constant(funcToken.image));
              }
              if (expression == null) {
                  args.add(new Constant(" "));
              } else {
                  if (expression instanceof Constant) {
                      Object value = ((Constant)expression).getValue();
                      if (value instanceof String && ((String)value).length() != 1) {
                                      {if (true) throw new ParseException(QueryPlugin.Util.gs(QueryPlugin.Event.TEIID30398, "TRIM CHAR", value));} //$NON-NLS-1$
                      }
                  }
                  args.add(expression);
              }
        expression = expression(info);
args.add(expression);
        jj_consume_token(RPAREN);
      } else if (jj_2_47(2)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TO_CHARS:{
          funcToken = jj_consume_token(TO_CHARS);
          break;
          }
        case TO_BYTES:{
          funcToken = jj_consume_token(TO_BYTES);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LPAREN);
        expression = expression(info);
args.add(expression);
        jj_consume_token(COMMA);
        literal = stringVal();
args.add(new Constant(literal));
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          expression = expression(info);
args.add(expression);
          break;
          }
        default:
          ;
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_48(2)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMESTAMPADD:{
          funcToken = jj_consume_token(TIMESTAMPADD);
          break;
          }
        case TIMESTAMPDIFF:{
          funcToken = jj_consume_token(TIMESTAMPDIFF);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LPAREN);
        expression = intervalType();
args.add(expression);
        jj_consume_token(COMMA);
        expression = expression(info);
args.add(expression);
        jj_consume_token(COMMA);
        expression = expression(info);
args.add(expression);
        jj_consume_token(RPAREN);
      } else if (jj_2_49(2)) {
        expression = queryString(info);
{if ("" != null) return expression;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CHAR:
        case HOUR:
        case LEFT:
        case MINUTE:
        case MONTH:
        case RIGHT:
        case SECOND:
        case USER:
        case YEAR:
        case XMLCONCAT:
        case XMLCOMMENT:
        case XMLTEXT:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LEFT:{
            funcToken = jj_consume_token(LEFT);
            break;
            }
          case RIGHT:{
            funcToken = jj_consume_token(RIGHT);
            break;
            }
          case CHAR:{
            funcToken = jj_consume_token(CHAR);
            break;
            }
          case USER:{
            funcToken = jj_consume_token(USER);
            break;
            }
          case YEAR:{
            funcToken = jj_consume_token(YEAR);
            break;
            }
          case MONTH:{
            funcToken = jj_consume_token(MONTH);
            break;
            }
          case HOUR:{
            funcToken = jj_consume_token(HOUR);
            break;
            }
          case MINUTE:{
            funcToken = jj_consume_token(MINUTE);
            break;
            }
          case SECOND:{
            funcToken = jj_consume_token(SECOND);
            break;
            }
          case XMLCONCAT:{
            funcToken = jj_consume_token(XMLCONCAT);
            break;
            }
          case XMLCOMMENT:{
            funcToken = jj_consume_token(XMLCOMMENT);
            break;
            }
          case XMLTEXT:{
            funcToken = jj_consume_token(XMLTEXT);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CHAR:
          case DATE:
          case TIME:
          case TIMESTAMP:
          case CAST:
          case CONVERT:
          case ANY:
          case ARRAY:
          case ARRAY_AGG:
          case CASE:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case EXISTS:
          case FALSE:
          case HOUR:
          case INSERT:
          case LEFT:
          case MINUTE:
          case MONTH:
          case NOT:
          case NULL:
          case RIGHT:
          case SECOND:
          case SESSION_USER:
          case SOME:
          case TRANSLATE:
          case TRUE:
          case UNKNOWN:
          case USER:
          case YEAR:
          case XMLAGG:
          case XMLCAST:
          case XMLCONCAT:
          case XMLCOMMENT:
          case XMLELEMENT:
          case XMLEXISTS:
          case XMLFOREST:
          case XMLPARSE:
          case XMLPI:
          case XMLQUERY:
          case XMLSERIALIZE:
          case XMLTEXT:
          case INSTEAD:
          case ENABLED:
          case DISABLED:
          case VIEW:
          case KEY:
          case SERIAL:
          case TEXTAGG:
          case COUNT_BIG:
          case COUNT:
          case ROW_NUMBER:
          case RANK:
          case DENSE_RANK:
          case PERCENT_RANK:
          case CUME_DIST:
          case CURRENT:
          case UNBOUNDED:
          case PRECEDING:
          case FOLLOWING:
          case SUM:
          case AVG:
          case MIN:
          case MAX:
          case EVERY:
          case STDDEV_POP:
          case STDDEV_SAMP:
          case VAR_SAMP:
          case VAR_POP:
          case DOCUMENT:
          case CONTENT:
          case TRIM:
          case EMPTY:
          case ORDINALITY:
          case PATH:
          case FIRST:
          case LAST:
          case NEXT:
          case SUBSTRING:
          case EXTRACT:
          case TO_CHARS:
          case TO_BYTES:
          case TIMESTAMPADD:
          case TIMESTAMPDIFF:
          case QUERYSTRING:
          case NAMESPACE:
          case RESULT:
          case INDEX:
          case ACCESSPATTERN:
          case AUTO_INCREMENT:
          case WELLFORMED:
          case SQL_TSI_FRAC_SECOND:
          case SQL_TSI_SECOND:
          case SQL_TSI_MINUTE:
          case SQL_TSI_HOUR:
          case SQL_TSI_DAY:
          case SQL_TSI_WEEK:
          case SQL_TSI_MONTH:
          case SQL_TSI_QUARTER:
          case SQL_TSI_YEAR:
          case TEXTTABLE:
          case ARRAYTABLE:
          case JSONTABLE:
          case SELECTOR:
          case SKIP_KEYWORD:
          case WIDTH:
          case PASSING:
          case NAME:
          case ENCODING:
          case COLUMNS:
          case DELIMITER:
          case QUOTE:
          case HEADER:
          case NULLS:
          case OBJECTTABLE:
          case VERSION:
          case INCLUDING:
          case EXCLUDING:
          case XMLDECLARATION:
          case VARIADIC:
          case EXCEPTION:
          case RAISE:
          case CHAIN:
          case JSON:
          case JSONARRAY_AGG:
          case JSONOBJECT:
          case PRESERVE:
          case GEOMETRY:
          case GEOGRAPHY:
          case UPSERT:
          case AFTER:
          case DEFAULT_KEYWORD:
          case TYPE:
          case TRANSLATOR:
          case JAAS:
          case CONDITION:
          case MASK:
          case ACCESS:
          case CONTROL:
          case NONE:
          case DATA:
          case DATABASE:
          case PRIVILEGES:
          case SCHEMA:
          case ROLE:
          case USE:
          case REPOSITORY:
          case RENAME:
          case DOMAIN:
          case USAGE:
          case POSITION:
          case LISTAGG:
          case OBJECT:
          case EXPLAIN:
          case ANALYZE:
          case TEXT:
          case FORMAT:
          case YAML:
          case POLICY:
          case EPOCH:
          case QUARTER:
          case ID:
          case ESCAPEDFUNCTION:
          case ESCAPEDTYPE:
          case DECIMALVAL:
          case FLOATVAL:
          case STRINGVAL:
          case UNSIGNEDINTEGER:
          case BINARYSTRINGVAL:
          case LPAREN:
          case PLUS:
          case MINUS:
          case QMARK:
          case DOLLAR:{
            args = expressionList(info);
            break;
            }
          default:
            ;
          }
          jj_consume_token(RPAREN);
          break;
          }
        default:
          if (jj_2_50(2147483647)) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRANSLATE:{
              funcToken = jj_consume_token(TRANSLATE);
              break;
              }
            case INSERT:{
              funcToken = jj_consume_token(INSERT);
              break;
              }
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(LPAREN);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CHAR:
            case DATE:
            case TIME:
            case TIMESTAMP:
            case CAST:
            case CONVERT:
            case ANY:
            case ARRAY:
            case ARRAY_AGG:
            case CASE:
            case CURRENT_DATE:
            case CURRENT_TIME:
            case CURRENT_TIMESTAMP:
            case EXISTS:
            case FALSE:
            case HOUR:
            case INSERT:
            case LEFT:
            case MINUTE:
            case MONTH:
            case NOT:
            case NULL:
            case RIGHT:
            case SECOND:
            case SESSION_USER:
            case SOME:
            case TRANSLATE:
            case TRUE:
            case UNKNOWN:
            case USER:
            case YEAR:
            case XMLAGG:
            case XMLCAST:
            case XMLCONCAT:
            case XMLCOMMENT:
            case XMLELEMENT:
            case XMLEXISTS:
            case XMLFOREST:
            case XMLPARSE:
            case XMLPI:
            case XMLQUERY:
            case XMLSERIALIZE:
            case XMLTEXT:
            case INSTEAD:
            case ENABLED:
            case DISABLED:
            case VIEW:
            case KEY:
            case SERIAL:
            case TEXTAGG:
            case COUNT_BIG:
            case COUNT:
            case ROW_NUMBER:
            case RANK:
            case DENSE_RANK:
            case PERCENT_RANK:
            case CUME_DIST:
            case CURRENT:
            case UNBOUNDED:
            case PRECEDING:
            case FOLLOWING:
            case SUM:
            case AVG:
            case MIN:
            case MAX:
            case EVERY:
            case STDDEV_POP:
            case STDDEV_SAMP:
            case VAR_SAMP:
            case VAR_POP:
            case DOCUMENT:
            case CONTENT:
            case TRIM:
            case EMPTY:
            case ORDINALITY:
            case PATH:
            case FIRST:
            case LAST:
            case NEXT:
            case SUBSTRING:
            case EXTRACT:
            case TO_CHARS:
            case TO_BYTES:
            case TIMESTAMPADD:
            case TIMESTAMPDIFF:
            case QUERYSTRING:
            case NAMESPACE:
            case RESULT:
            case INDEX:
            case ACCESSPATTERN:
            case AUTO_INCREMENT:
            case WELLFORMED:
            case SQL_TSI_FRAC_SECOND:
            case SQL_TSI_SECOND:
            case SQL_TSI_MINUTE:
            case SQL_TSI_HOUR:
            case SQL_TSI_DAY:
            case SQL_TSI_WEEK:
            case SQL_TSI_MONTH:
            case SQL_TSI_QUARTER:
            case SQL_TSI_YEAR:
            case TEXTTABLE:
            case ARRAYTABLE:
            case JSONTABLE:
            case SELECTOR:
            case SKIP_KEYWORD:
            case WIDTH:
            case PASSING:
            case NAME:
            case ENCODING:
            case COLUMNS:
            case DELIMITER:
            case QUOTE:
            case HEADER:
            case NULLS:
            case OBJECTTABLE:
            case VERSION:
            case INCLUDING:
            case EXCLUDING:
            case XMLDECLARATION:
            case VARIADIC:
            case EXCEPTION:
            case RAISE:
            case CHAIN:
            case JSON:
            case JSONARRAY_AGG:
            case JSONOBJECT:
            case PRESERVE:
            case GEOMETRY:
            case GEOGRAPHY:
            case UPSERT:
            case AFTER:
            case DEFAULT_KEYWORD:
            case TYPE:
            case TRANSLATOR:
            case JAAS:
            case CONDITION:
            case MASK:
            case ACCESS:
            case CONTROL:
            case NONE:
            case DATA:
            case DATABASE:
            case PRIVILEGES:
            case SCHEMA:
            case ROLE:
            case USE:
            case REPOSITORY:
            case RENAME:
            case DOMAIN:
            case USAGE:
            case POSITION:
            case LISTAGG:
            case OBJECT:
            case EXPLAIN:
            case ANALYZE:
            case TEXT:
            case FORMAT:
            case YAML:
            case POLICY:
            case EPOCH:
            case QUARTER:
            case ID:
            case ESCAPEDFUNCTION:
            case ESCAPEDTYPE:
            case DECIMALVAL:
            case FLOATVAL:
            case STRINGVAL:
            case UNSIGNEDINTEGER:
            case BINARYSTRINGVAL:
            case LPAREN:
            case PLUS:
            case MINUS:
            case QMARK:
            case DOLLAR:{
              args = expressionList(info);
              break;
              }
            default:
              ;
            }
            jj_consume_token(RPAREN);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case XMLPARSE:{
              expression = xmlParse(info);
{if ("" != null) return expression;}
              break;
              }
            case XMLELEMENT:{
              expression = xmlElement(info);
{if ("" != null) return expression;}
              break;
              }
            case XMLPI:{
              funcToken = jj_consume_token(XMLPI);
              jj_consume_token(LPAREN);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case NAME:{
                jj_consume_token(NAME);
                break;
                }
              default:
                ;
              }
              literal = id(null);
args.add(new Constant(literal));
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case COMMA:{
                jj_consume_token(COMMA);
                expression = expression(info);
args.add(expression);
                break;
                }
              default:
                ;
              }
              jj_consume_token(RPAREN);
              break;
              }
            case XMLFOREST:{
              expression = xmlForest(info);
{if ("" != null) return expression;}
              break;
              }
            default:
              if (jj_2_51(2147483647)) {
                expression = jsonObject(info);
{if ("" != null) return expression;}
              } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case XMLSERIALIZE:{
                  expression = xmlSerialize(info);
{if ("" != null) return expression;}
                  break;
                  }
                case XMLQUERY:{
                  expression = xmlQuery(info);
{if ("" != null) return expression;}
                  break;
                  }
                default:
                  if (jj_2_52(2147483647)) {
                    funcToken = jj_consume_token(POSITION);
funcToken.image="locate";
                    jj_consume_token(LPAREN);
                    expression = commonValueExpression(info);
args.add(expression);
                    jj_consume_token(IN);
                    expression = commonValueExpression(info);
args.add(expression);
                    jj_consume_token(RPAREN);
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case LISTAGG:{
                      funcToken = jj_consume_token(LISTAGG);
                      jj_consume_token(LPAREN);
                      expression = expression(info);
args.add(new Function("cast", new Expression[] {expression, new Constant("string")}));
                      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                      case COMMA:{
                        jj_consume_token(COMMA);
                        literal = stringVal();
args.add(new Constant(literal));
                        break;
                        }
                      default:
                        ;
                      }
                      jj_consume_token(RPAREN);
                      jj_consume_token(WITHIN);
                      jj_consume_token(GROUP);
                      jj_consume_token(LPAREN);
                      orderBy = orderby(info);
                      jj_consume_token(RPAREN);
if (args.size() == 1) {
                //oracle's default is described as null, but be need an empty string for consistency
                args.add(new Constant(""));
              }
              {if ("" != null) return new AggregateSymbol("string_agg", false, (Expression[])args.toArray(new Expression[args.size()]), orderBy);}
                      break;
                      }
                    case INSTEAD:
                    case ENABLED:
                    case DISABLED:
                    case VIEW:
                    case KEY:
                    case SERIAL:
                    case TEXTAGG:
                    case COUNT_BIG:
                    case COUNT:
                    case ROW_NUMBER:
                    case RANK:
                    case DENSE_RANK:
                    case CURRENT:
                    case UNBOUNDED:
                    case PRECEDING:
                    case FOLLOWING:
                    case SUM:
                    case AVG:
                    case MIN:
                    case MAX:
                    case EVERY:
                    case STDDEV_POP:
                    case STDDEV_SAMP:
                    case VAR_SAMP:
                    case VAR_POP:
                    case DOCUMENT:
                    case CONTENT:
                    case TRIM:
                    case EMPTY:
                    case ORDINALITY:
                    case PATH:
                    case FIRST:
                    case LAST:
                    case NEXT:
                    case SUBSTRING:
                    case EXTRACT:
                    case TO_CHARS:
                    case TO_BYTES:
                    case TIMESTAMPADD:
                    case TIMESTAMPDIFF:
                    case QUERYSTRING:
                    case NAMESPACE:
                    case RESULT:
                    case INDEX:
                    case ACCESSPATTERN:
                    case AUTO_INCREMENT:
                    case WELLFORMED:
                    case SQL_TSI_FRAC_SECOND:
                    case SQL_TSI_SECOND:
                    case SQL_TSI_MINUTE:
                    case SQL_TSI_HOUR:
                    case SQL_TSI_DAY:
                    case SQL_TSI_WEEK:
                    case SQL_TSI_MONTH:
                    case SQL_TSI_QUARTER:
                    case SQL_TSI_YEAR:
                    case TEXTTABLE:
                    case ARRAYTABLE:
                    case JSONTABLE:
                    case SELECTOR:
                    case SKIP_KEYWORD:
                    case WIDTH:
                    case PASSING:
                    case NAME:
                    case ENCODING:
                    case COLUMNS:
                    case DELIMITER:
                    case QUOTE:
                    case HEADER:
                    case NULLS:
                    case OBJECTTABLE:
                    case VERSION:
                    case INCLUDING:
                    case EXCLUDING:
                    case XMLDECLARATION:
                    case VARIADIC:
                    case EXCEPTION:
                    case RAISE:
                    case CHAIN:
                    case JSON:
                    case JSONARRAY_AGG:
                    case JSONOBJECT:
                    case PRESERVE:
                    case GEOMETRY:
                    case GEOGRAPHY:
                    case UPSERT:
                    case AFTER:
                    case DEFAULT_KEYWORD:
                    case TYPE:
                    case TRANSLATOR:
                    case JAAS:
                    case CONDITION:
                    case MASK:
                    case ACCESS:
                    case CONTROL:
                    case NONE:
                    case DATA:
                    case DATABASE:
                    case PRIVILEGES:
                    case SCHEMA:
                    case ROLE:
                    case USE:
                    case REPOSITORY:
                    case RENAME:
                    case DOMAIN:
                    case USAGE:
                    case POSITION:
                    case OBJECT:
                    case EXPLAIN:
                    case ANALYZE:
                    case TEXT:
                    case FORMAT:
                    case YAML:
                    case POLICY:
                    case EPOCH:
                    case QUARTER:
                    case ID:{
                      funcName = id(null);
                      jj_consume_token(LPAREN);
                      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                      case ALL:
                      case DISTINCT:{
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case ALL:{
                          jj_consume_token(ALL);
distinct = false;
                          break;
                          }
                        case DISTINCT:{
                          jj_consume_token(DISTINCT);
distinct = true;
                          break;
                          }
                        default:
                          jj_consume_token(-1);
                          throw new ParseException();
                        }
                        break;
                        }
                      default:
                        ;
                      }
                      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                      case CHAR:
                      case DATE:
                      case TIME:
                      case TIMESTAMP:
                      case CAST:
                      case CONVERT:
                      case ANY:
                      case ARRAY:
                      case ARRAY_AGG:
                      case CASE:
                      case CURRENT_DATE:
                      case CURRENT_TIME:
                      case CURRENT_TIMESTAMP:
                      case EXISTS:
                      case FALSE:
                      case HOUR:
                      case INSERT:
                      case LEFT:
                      case MINUTE:
                      case MONTH:
                      case NOT:
                      case NULL:
                      case RIGHT:
                      case SECOND:
                      case SESSION_USER:
                      case SOME:
                      case TRANSLATE:
                      case TRUE:
                      case UNKNOWN:
                      case USER:
                      case YEAR:
                      case XMLAGG:
                      case XMLCAST:
                      case XMLCONCAT:
                      case XMLCOMMENT:
                      case XMLELEMENT:
                      case XMLEXISTS:
                      case XMLFOREST:
                      case XMLPARSE:
                      case XMLPI:
                      case XMLQUERY:
                      case XMLSERIALIZE:
                      case XMLTEXT:
                      case INSTEAD:
                      case ENABLED:
                      case DISABLED:
                      case VIEW:
                      case KEY:
                      case SERIAL:
                      case TEXTAGG:
                      case COUNT_BIG:
                      case COUNT:
                      case ROW_NUMBER:
                      case RANK:
                      case DENSE_RANK:
                      case PERCENT_RANK:
                      case CUME_DIST:
                      case CURRENT:
                      case UNBOUNDED:
                      case PRECEDING:
                      case FOLLOWING:
                      case SUM:
                      case AVG:
                      case MIN:
                      case MAX:
                      case EVERY:
                      case STDDEV_POP:
                      case STDDEV_SAMP:
                      case VAR_SAMP:
                      case VAR_POP:
                      case DOCUMENT:
                      case CONTENT:
                      case TRIM:
                      case EMPTY:
                      case ORDINALITY:
                      case PATH:
                      case FIRST:
                      case LAST:
                      case NEXT:
                      case SUBSTRING:
                      case EXTRACT:
                      case TO_CHARS:
                      case TO_BYTES:
                      case TIMESTAMPADD:
                      case TIMESTAMPDIFF:
                      case QUERYSTRING:
                      case NAMESPACE:
                      case RESULT:
                      case INDEX:
                      case ACCESSPATTERN:
                      case AUTO_INCREMENT:
                      case WELLFORMED:
                      case SQL_TSI_FRAC_SECOND:
                      case SQL_TSI_SECOND:
                      case SQL_TSI_MINUTE:
                      case SQL_TSI_HOUR:
                      case SQL_TSI_DAY:
                      case SQL_TSI_WEEK:
                      case SQL_TSI_MONTH:
                      case SQL_TSI_QUARTER:
                      case SQL_TSI_YEAR:
                      case TEXTTABLE:
                      case ARRAYTABLE:
                      case JSONTABLE:
                      case SELECTOR:
                      case SKIP_KEYWORD:
                      case WIDTH:
                      case PASSING:
                      case NAME:
                      case ENCODING:
                      case COLUMNS:
                      case DELIMITER:
                      case QUOTE:
                      case HEADER:
                      case NULLS:
                      case OBJECTTABLE:
                      case VERSION:
                      case INCLUDING:
                      case EXCLUDING:
                      case XMLDECLARATION:
                      case VARIADIC:
                      case EXCEPTION:
                      case RAISE:
                      case CHAIN:
                      case JSON:
                      case JSONARRAY_AGG:
                      case JSONOBJECT:
                      case PRESERVE:
                      case GEOMETRY:
                      case GEOGRAPHY:
                      case UPSERT:
                      case AFTER:
                      case DEFAULT_KEYWORD:
                      case TYPE:
                      case TRANSLATOR:
                      case JAAS:
                      case CONDITION:
                      case MASK:
                      case ACCESS:
                      case CONTROL:
                      case NONE:
                      case DATA:
                      case DATABASE:
                      case PRIVILEGES:
                      case SCHEMA:
                      case ROLE:
                      case USE:
                      case REPOSITORY:
                      case RENAME:
                      case DOMAIN:
                      case USAGE:
                      case POSITION:
                      case LISTAGG:
                      case OBJECT:
                      case EXPLAIN:
                      case ANALYZE:
                      case TEXT:
                      case FORMAT:
                      case YAML:
                      case POLICY:
                      case EPOCH:
                      case QUARTER:
                      case ID:
                      case ESCAPEDFUNCTION:
                      case ESCAPEDTYPE:
                      case DECIMALVAL:
                      case FLOATVAL:
                      case STRINGVAL:
                      case UNSIGNEDINTEGER:
                      case BINARYSTRINGVAL:
                      case LPAREN:
                      case PLUS:
                      case MINUS:
                      case QMARK:
                      case DOLLAR:{
                        args = expressionList(info);
                        break;
                        }
                      default:
                        ;
                      }
                      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                      case ORDER:{
                        orderBy = orderby(info);
                        break;
                        }
                      default:
                        ;
                      }
                      jj_consume_token(RPAREN);
                      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                      case FILTER:{
                        condition = filterClause(info);
                        break;
                        }
                      default:
                        ;
                      }
                      break;
                      }
                    case CURRENT_DATE:{
                      funcToken = jj_consume_token(CURRENT_DATE);
                      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                      case LPAREN:{
                        jj_consume_token(LPAREN);
                        jj_consume_token(RPAREN);
                        break;
                        }
                      default:
                        ;
                      }
                      break;
                      }
                    case CURRENT_TIME:
                    case CURRENT_TIMESTAMP:{
                      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                      case CURRENT_TIMESTAMP:{
                        funcToken = jj_consume_token(CURRENT_TIMESTAMP);
                        break;
                        }
                      case CURRENT_TIME:{
                        funcToken = jj_consume_token(CURRENT_TIME);
                        break;
                        }
                      default:
                        jj_consume_token(-1);
                        throw new ParseException();
                      }
                      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                      case LPAREN:{
                        jj_consume_token(LPAREN);
                        intVal = intVal();
                        jj_consume_token(RPAREN);
args.add(new Constant(intVal));
                        break;
                        }
                      default:
                        ;
                      }
                      break;
                      }
                    case SESSION_USER:{
                      funcToken = jj_consume_token(SESSION_USER);
funcName = "user"; args.add(new Constant(false));
                      break;
                      }
                    default:
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
if(funcName == null) {
                        funcName = funcToken.image;
                }
                if (distinct != null || orderBy != null || condition != null || "string_agg".equalsIgnoreCase(funcName)) {
                        AggregateSymbol as = new AggregateSymbol(funcName, distinct!=null?distinct:false, (Expression[])args.toArray(new Expression[args.size()]), orderBy);
                        as.setCondition(condition);
                        {if ("" != null) return as;}
                }
                {if ("" != null) return new Function(funcName, (Expression[])args.toArray(new Expression[args.size()]));}
    throw new Error("Missing return statement in function");
}

/*
name=xml parse
description=Parses the given value as XML.
example=[source,sql]\n----\nXMLPARSE(DOCUMENT doc WELLFORMED)\n----\n
*/
  final public XMLParse xmlParse(ParseInfo info) throws ParseException {Expression expr = null;
        boolean doc = false;
        boolean wellformed = false;
    jj_consume_token(XMLPARSE);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOCUMENT:{
      jj_consume_token(DOCUMENT);
doc = true;
      break;
      }
    case CONTENT:{
      jj_consume_token(CONTENT);
doc = false;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    expr = expression(info);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WELLFORMED:{
      jj_consume_token(WELLFORMED);
wellformed = true;
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
XMLParse result = new XMLParse();
                result.setDocument(doc);
                result.setExpression(expr);
                result.setWellFormed(wellformed);
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=querystring function
description=Produces a URL query string from the given arguments.
example=[source,sql]\n----\nQUERYSTRING('path', col1 AS opt, col2 AS val)\n----\n
*/
  final public QueryString queryString(ParseInfo info) throws ParseException {Expression path = null;
        DerivedColumn arg = null;
        ArrayList<DerivedColumn> args = new ArrayList<DerivedColumn>(2);
    jj_consume_token(QUERYSTRING);
    jj_consume_token(LPAREN);
    path = expression(info);
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_43;
      }
      jj_consume_token(COMMA);
      arg = derivedColumn(info);
args.add(arg);
                arg = null;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return new QueryString(path, args);}
    throw new Error("Missing return statement in function");
}

/*
name=xml element
description=Creates an XML element.
example=[source,sql]\n----\nXMLELEMENT(NAME "root", child)\n----\n
*/
  final public XMLElement xmlElement(ParseInfo info) throws ParseException {String name = null;
        ArrayList content = new ArrayList(2);
        XMLNamespaces xmlNamespaces = null;
        XMLAttributes xmlAttributes = null;
        Expression expression = null;
    jj_consume_token(XMLELEMENT);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NAME:{
      jj_consume_token(NAME);
      break;
      }
    default:
      ;
    }
    name = id(null);
    if (jj_2_53(2)) {
      jj_consume_token(COMMA);
      xmlNamespaces = xmlNamespaces(info);
    } else {
      ;
    }
    if (jj_2_54(2)) {
      jj_consume_token(COMMA);
      xmlAttributes = xmlAttributes(info);
    } else {
      ;
    }
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_44;
      }
      jj_consume_token(COMMA);
      expression = expression(info);
content.add(expression);
    }
    jj_consume_token(RPAREN);
XMLElement result = new XMLElement(name, content);
                result.setNamespaces(xmlNamespaces);
                result.setAttributes(xmlAttributes);
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=xml attributes
description=Creates attributes for the containing element.
example=[source,sql]\n----\nXMLATTRIBUTES(col1 AS attr1, col2 AS attr2)\n----\n
*/
  final public XMLAttributes xmlAttributes(ParseInfo info) throws ParseException {DerivedColumn expression = null;
        ArrayList<DerivedColumn> args = new ArrayList<DerivedColumn>(2);
    jj_consume_token(XMLATTRIBUTES);
    jj_consume_token(LPAREN);
    expression = derivedColumn(info);
args.add(expression);
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_45;
      }
      jj_consume_token(COMMA);
      expression = derivedColumn(info);
args.add(expression);
    }
    jj_consume_token(RPAREN);
{if ("" != null) return new XMLAttributes(args);}
    throw new Error("Missing return statement in function");
}

/*
name=json object
description=Produces a JSON object containing name value pairs.
example=[source,sql]\n----\nJSONOBJECT(col1 AS val1, col2 AS val2)\n----\n
*/
  final public JSONObject jsonObject(ParseInfo info) throws ParseException {ArrayList<DerivedColumn> args = null;
    jj_consume_token(JSONOBJECT);
    jj_consume_token(LPAREN);
    args = derivedColumnList(info);
    jj_consume_token(RPAREN);
JSONObject result = new JSONObject(args);
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=derived column list
description=a list of name value pairs
example=[source,sql]\n----\ncol1 AS val1, col2 AS val2\n----\n
*/
  final public ArrayList<DerivedColumn> derivedColumnList(ParseInfo info) throws ParseException {DerivedColumn expression = null;
        ArrayList<DerivedColumn> args = new ArrayList<DerivedColumn>(2);
    expression = derivedColumn(info);
args.add(expression);
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_46;
      }
      jj_consume_token(COMMA);
      expression = derivedColumn(info);
args.add(expression);
    }
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
}

/*
name=xml forest
description=Produces an element for each derived column.
example=[source,sql]\n----\nXMLFOREST(col1 AS ELEM1, col2 AS ELEM2)\n----\n
*/
  final public XMLForest xmlForest(ParseInfo info) throws ParseException {DerivedColumn expression = null;
        XMLNamespaces xmlNamespaces = null;
        ArrayList<DerivedColumn> args = null;
    jj_consume_token(XMLFOREST);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case XMLNAMESPACES:{
      xmlNamespaces = xmlNamespaces(info);
      jj_consume_token(COMMA);
      break;
      }
    default:
      ;
    }
    args = derivedColumnList(info);
    jj_consume_token(RPAREN);
XMLForest result = new XMLForest(args);
                result.setNamespaces(xmlNamespaces);
                {if ("" != null) return result;}
    throw new Error("Missing return statement in function");
}

/*
name=xml namespaces
description=Defines XML namespace URI/prefix combinations
example=[source,sql]\n----\nXMLNAMESPACES('http://foo' AS foo)\n----\n
*/
  final public XMLNamespaces xmlNamespaces(ParseInfo info) throws ParseException {ArrayList namespaces = new ArrayList(2);
        XMLNamespaces.NamespaceItem item = null;
    jj_consume_token(XMLNAMESPACES);
    jj_consume_token(LPAREN);
    item = namespaceItem();
namespaces.add(item);
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_47;
      }
      jj_consume_token(COMMA);
      item = namespaceItem();
namespaces.add(item);
    }
    jj_consume_token(RPAREN);
{if ("" != null) return new XMLNamespaces(namespaces);}
    throw new Error("Missing return statement in function");
}

/*
name=xml namespace element
description=An xml namespace
example=[source,sql]\n----\nNO DEFAULT\n----\n
*/
  final public XMLNamespaces.NamespaceItem namespaceItem() throws ParseException {String uri = null;
        String prefix = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRINGVAL:{
      uri = stringVal();
      jj_consume_token(AS);
      prefix = id(null);
{if ("" != null) return new XMLNamespaces.NamespaceItem(uri, prefix);}
      break;
      }
    case NO:{
      jj_consume_token(NO);
      jj_consume_token(DEFAULT_KEYWORD);
{if ("" != null) return new XMLNamespaces.NamespaceItem();}
      break;
      }
    case DEFAULT_KEYWORD:{
      jj_consume_token(DEFAULT_KEYWORD);
      uri = stringVal();
{if ("" != null) return new XMLNamespaces.NamespaceItem(uri);}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=simple data type
description=A non-collection data type.
example=[source,sql]\n----\nSTRING\n----\n
*/
  final public ParsedDataType parseDataTypePrimary() throws ParseException {Token typeToken = null;
        Integer length = null;
        Integer scale = null;
        boolean precision = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:{
      typeToken = jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        length = intVal();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        ;
      }
precision = false;
      break;
      }
    case VARCHAR:{
      typeToken = jj_consume_token(VARCHAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        length = intVal();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        ;
      }
precision = false;
      break;
      }
    case BOOLEAN:{
      typeToken = jj_consume_token(BOOLEAN);
      break;
      }
    case BYTE:{
      typeToken = jj_consume_token(BYTE);
      break;
      }
    case TINYINT:{
      typeToken = jj_consume_token(TINYINT);
      break;
      }
    case SHORT:{
      typeToken = jj_consume_token(SHORT);
      break;
      }
    case SMALLINT:{
      typeToken = jj_consume_token(SMALLINT);
      break;
      }
    case CHAR:{
      typeToken = jj_consume_token(CHAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        length = intVal();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        ;
      }
precision = false;
      break;
      }
    case INTEGER:{
      typeToken = jj_consume_token(INTEGER);
      break;
      }
    case LONG:{
      typeToken = jj_consume_token(LONG);
      break;
      }
    case BIGINT:{
      typeToken = jj_consume_token(BIGINT);
      break;
      }
    case BIGINTEGER:{
      typeToken = jj_consume_token(BIGINTEGER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        length = intVal();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        ;
      }
      break;
      }
    case FLOAT:{
      typeToken = jj_consume_token(FLOAT);
      break;
      }
    case REAL:{
      typeToken = jj_consume_token(REAL);
      break;
      }
    case DOUBLE:{
      typeToken = jj_consume_token(DOUBLE);
      break;
      }
    case BIGDECIMAL:{
      typeToken = jj_consume_token(BIGDECIMAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        length = intVal();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          scale = intVal();
          break;
          }
        default:
          ;
        }
        jj_consume_token(RPAREN);
        break;
        }
      default:
        ;
      }
      break;
      }
    case DECIMAL:{
      typeToken = jj_consume_token(DECIMAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        length = intVal();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          scale = intVal();
          break;
          }
        default:
          ;
        }
        jj_consume_token(RPAREN);
        break;
        }
      default:
        ;
      }
      break;
      }
    case DATE:{
      typeToken = jj_consume_token(DATE);
      break;
      }
    case TIME:{
      typeToken = jj_consume_token(TIME);
      break;
      }
    case TIMESTAMP:{
      typeToken = jj_consume_token(TIMESTAMP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        scale = intVal();
        jj_consume_token(RPAREN);
if (scale >= 9) {
                        scale = null; //default
                      } else if (scale == 0) {
                        length = 19;
                      } else {
                length = scale + 20;
              }
        break;
        }
      default:
        ;
      }
      break;
      }
    case OBJECT:{
      typeToken = jj_consume_token(OBJECT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        length = intVal();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        ;
      }
precision = false;
      break;
      }
    case BLOB:{
      typeToken = jj_consume_token(BLOB);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        length = intVal();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        ;
      }
precision = false;
      break;
      }
    case CLOB:{
      typeToken = jj_consume_token(CLOB);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        length = intVal();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        ;
      }
precision = false;
      break;
      }
    case JSON:{
      typeToken = jj_consume_token(JSON);
      break;
      }
    case VARBINARY:{
      typeToken = jj_consume_token(VARBINARY);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        length = intVal();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        ;
      }
precision = false;
      break;
      }
    case GEOMETRY:{
      typeToken = jj_consume_token(GEOMETRY);
      break;
      }
    case GEOGRAPHY:{
      typeToken = jj_consume_token(GEOGRAPHY);
      break;
      }
    case XML:{
      typeToken = jj_consume_token(XML);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
String typeName = typeToken.image;
                if (scale != null){
                        {if ("" != null) return new ParsedDataType(typeName, length, scale, precision);}
                }
                else if (length != null){
                    if (!precision) {
                        if (length == 0) {
                    {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.zero_length", typeName));} //$NON-NLS-1$
                }
                if (length != 1 && typeName.equalsIgnoreCase("CHAR")) {
                    {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.char_length"));} //$NON-NLS-1$
                }
            }
                        {if ("" != null) return new ParsedDataType(typeName, length, precision);}
                }
                {if ("" != null) return new ParsedDataType(typeName);}
    throw new Error("Missing return statement in function");
}

/*
name=basic data type
description=A data type.
example=[source,sql]\n----\nSTRING[]\n----\n
*/
  final public ParsedDataType parseBasicDataType() throws ParseException {int arraySuffixes = 0;
    ParsedDataType type = null;
    type = parseDataTypePrimary();
    label_48:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSBRACE:{
        ;
        break;
        }
      default:
        break label_48;
      }
      jj_consume_token(LSBRACE);
      jj_consume_token(RSBRACE);
arraySuffixes++;
    }
if (arraySuffixes > 0) {
           type.type += StringUtil.join(Collections.nCopies(arraySuffixes, "[]"), "");
        }
        {if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

/*
name=data type
description=A data type.
example=[source,sql]\n----\nSTRING[]\n----\n
*/
  final public ParsedDataType parseDataType() throws ParseException {int arraySuffixes = 0;
    ParsedDataType type = null;
    Token idToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:
    case VARBINARY:
    case VARCHAR:
    case BOOLEAN:
    case BYTE:
    case TINYINT:
    case SHORT:
    case SMALLINT:
    case CHAR:
    case INTEGER:
    case LONG:
    case BIGINT:
    case BIGINTEGER:
    case FLOAT:
    case REAL:
    case DOUBLE:
    case BIGDECIMAL:
    case DECIMAL:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case BLOB:
    case CLOB:
    case XML:
    case JSON:
    case GEOMETRY:
    case GEOGRAPHY:
    case OBJECT:{
      type = parseBasicDataType();
{if ("" != null) return type;}
      break;
      }
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case RAISE:
    case CHAIN:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case UPSERT:
    case AFTER:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        idToken = jj_consume_token(ID);
        break;
        }
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case RAISE:
      case CHAIN:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case UPSERT:
      case AFTER:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:{
        idToken = basicNonReserved();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
String id = normalizeId(idToken.image);
        id = validateName(id, true);
        type = new ParsedDataType(id);
      label_49:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSBRACE:{
          ;
          break;
          }
        default:
          break label_49;
        }
        jj_consume_token(LSBRACE);
        jj_consume_token(RSBRACE);
arraySuffixes++;
      }
if (arraySuffixes > 0) {
           type.type += StringUtil.join(Collections.nCopies(arraySuffixes, "[]"), "");
        }
        {if ("" != null) return type;}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=time interval
description=A time interval keyword.
example=[source,sql]\n----\nSQL_TSI_HOUR\n----\n
*/
  final public Constant intervalType() throws ParseException {Token type = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SQL_TSI_FRAC_SECOND:{
      type = jj_consume_token(SQL_TSI_FRAC_SECOND);
      break;
      }
    case SQL_TSI_SECOND:{
      type = jj_consume_token(SQL_TSI_SECOND);
      break;
      }
    case SQL_TSI_MINUTE:{
      type = jj_consume_token(SQL_TSI_MINUTE);
      break;
      }
    case SQL_TSI_HOUR:{
      type = jj_consume_token(SQL_TSI_HOUR);
      break;
      }
    case SQL_TSI_DAY:{
      type = jj_consume_token(SQL_TSI_DAY);
      break;
      }
    case SQL_TSI_WEEK:{
      type = jj_consume_token(SQL_TSI_WEEK);
      break;
      }
    case SQL_TSI_MONTH:{
      type = jj_consume_token(SQL_TSI_MONTH);
      break;
      }
    case SQL_TSI_QUARTER:{
      type = jj_consume_token(SQL_TSI_QUARTER);
      break;
      }
    case SQL_TSI_YEAR:{
      type = jj_consume_token(SQL_TSI_YEAR);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Constant(type.image);}
    throw new Error("Missing return statement in function");
}

/*
name=non numeric literal
description=An escaped or simple non numeric literal.
example=[source,sql]\n----\n'a'\n----\n
*/
  final public Constant nonNumericLiteral() throws ParseException {Token t = null;
    String strVal = "";
    Class escapeType = null;
    Constant constant = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRINGVAL:{
      strVal = stringVal();
constant = new Constant(strVal, DataTypeManager.DefaultDataClasses.STRING);
      break;
      }
    case BINARYSTRINGVAL:{
      t = jj_consume_token(BINARYSTRINGVAL);
constant = new Constant(new BinaryType(PropertiesUtils.fromHex(t.image.substring(2, t.image.length() - 1))), DataTypeManager.DefaultDataClasses.VARBINARY);
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
constant = new Constant(Boolean.FALSE, DataTypeManager.DefaultDataClasses.BOOLEAN);
      break;
      }
    case TRUE:{
      t = jj_consume_token(TRUE);
constant = new Constant(Boolean.TRUE, DataTypeManager.DefaultDataClasses.BOOLEAN);
      break;
      }
    case UNKNOWN:{
      t = jj_consume_token(UNKNOWN);
constant = new Constant(null, DataTypeManager.DefaultDataClasses.BOOLEAN);
      break;
      }
    case NULL:{
      t = jj_consume_token(NULL);
constant = new Constant(null);
      break;
      }
    case ESCAPEDTYPE:{
      jj_consume_token(ESCAPEDTYPE);
String image = getToken(0).image;
                if (StringUtil.endsWithIgnoreCase(image, "b")) {
                        escapeType=DataTypeManager.DefaultDataClasses.BOOLEAN;
                } else if (StringUtil.endsWithIgnoreCase(image, "ts")) {
                        escapeType=DataTypeManager.DefaultDataClasses.TIMESTAMP;
                } else if (StringUtil.endsWithIgnoreCase(image, "d")) {
                        escapeType=DataTypeManager.DefaultDataClasses.DATE;
                } else {
                        escapeType=DataTypeManager.DefaultDataClasses.TIME;
                }
      strVal = stringVal();
try {
                                constant = new Constant(DataTypeManager.transformValue(strVal, escapeType), escapeType);
                        } catch (TransformationException e) {
                                {if (true) throw new ParseException(e.getMessage());} //$NON-NLS-1$
                        }
      jj_consume_token(RBRACE);
      break;
      }
    case DATE:
    case TIME:
    case TIMESTAMP:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DATE:{
        jj_consume_token(DATE);
escapeType = DataTypeManager.DefaultDataClasses.DATE;
        break;
        }
      case TIME:{
        jj_consume_token(TIME);
escapeType = DataTypeManager.DefaultDataClasses.TIME;
        break;
        }
      case TIMESTAMP:{
        jj_consume_token(TIMESTAMP);
escapeType = DataTypeManager.DefaultDataClasses.TIMESTAMP;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      strVal = stringVal();
try {
                    constant = new Constant(DataTypeManager.transformValue(strVal, escapeType), escapeType);
                } catch (TransformationException e) {
                    {if (true) throw new ParseException(e.getMessage());} //$NON-NLS-1$
                }
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return constant;}
    throw new Error("Missing return statement in function");
}

/*
name=unsigned numeric literal
description=An unsigned numeric literal value.
example=[source,sql]\n----\n1.234\n----\n
*/
  final public Constant unsignedNumericLiteral(String strVal) throws ParseException {Token t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNSIGNEDINTEGER:{
      t = jj_consume_token(UNSIGNEDINTEGER);
try {
                            strVal = prependSign(strVal, t.image);
                                // First try as integer - this should nearly always work
                                {if ("" != null) return new Constant(Integer.valueOf(strVal), DataTypeManager.DefaultDataClasses.INTEGER);}
                        } catch(NumberFormatException e1) {
                                try {
                                        // Second try as a long
                                        {if ("" != null) return new Constant(Long.valueOf(strVal), DataTypeManager.DefaultDataClasses.LONG);}
                                } catch(NumberFormatException e2) {
                                        try {
                                                // Third try as a biginteger
                                                {if ("" != null) return new Constant(new BigInteger(strVal), DataTypeManager.DefaultDataClasses.BIG_INTEGER);}
                                        } catch(NumberFormatException e3) {
                                                Object[] params = new Object[] { strVal };
                                                {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.Integer_parse", params));} //$NON-NLS-1$
                                        }
                                }
                        }
      break;
      }
    case FLOATVAL:{
      t = jj_consume_token(FLOATVAL);
strVal = prependSign(strVal, t.image);
                        try {
                                {if ("" != null) return new Constant(Double.valueOf(strVal), DataTypeManager.DefaultDataClasses.DOUBLE);}
                        } catch(NumberFormatException e) {
                                Object[] params = new Object[] { strVal };
                                {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.Float_parse", params));} //$NON-NLS-1$
                        }
      break;
      }
    case DECIMALVAL:{
      t = jj_consume_token(DECIMALVAL);
strVal = prependSign(strVal, t.image);
                        try {
                            if (DECIMAL_AS_DOUBLE) {
                                {if ("" != null) return new Constant(Double.valueOf(strVal), DataTypeManager.DefaultDataClasses.DOUBLE);}
                                } else {
                                {if ("" != null) return new Constant(new java.math.BigDecimal(strVal), DataTypeManager.DefaultDataClasses.BIG_DECIMAL);}
                                }
                        } catch(NumberFormatException e) {
                                Object[] params = new Object[] { t.image };
                                {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.decimal_parse", params));} //$NON-NLS-1$
                        }
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
unused=true
*/
  final public void parseMetadata(DatabaseStore dbStore) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ALTER:
    case CREATE:
    case DROP:
    case GRANT:
    case REVOKE:
    case SET:
    case IMPORT:
    case USE:{
      ddlStmt(dbStore);
      break;
      }
    default:
      ;
    }
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        break label_50;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALTER:
      case CREATE:
      case DROP:
      case GRANT:
      case REVOKE:
      case SET:
      case IMPORT:
      case USE:{
        ddlStmt(dbStore);
        break;
        }
      default:
        ;
      }
    }
    jj_consume_token(0);
}

/*
name=ddl statement
description=A data definition statement.
example=[source,sql]\n----\nCREATE FOREIGN TABLE X (Y STRING)\n----\n
index=true
*/
  final public void ddlStmt(DatabaseStore dbStore) throws ParseException {Command command = null;
    if (jj_2_56(3)) {
      createTable(dbStore);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CREATE:{
        if (jj_2_55(3)) {
          createTable(dbStore);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CREATE:{
            createDDLProcedure(dbStore, ParseInfo.DEFAULT_INSTANCE);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        ;
      }
    } else if (jj_2_57(2)) {
      createNameSpace(dbStore);
    } else if (jj_2_58(4)) {
      alterStatement(dbStore);
    } else if (jj_2_59(4)) {
      command = createTrigger(ParseInfo.DEFAULT_INSTANCE, true);
createDDLTrigger(dbStore, (AlterTrigger)command);
    } else if (jj_2_60(2)) {
      createDomain(dbStore);
    } else if (jj_2_61(3)) {
      createServer(dbStore);
    } else if (jj_2_62(3)) {
      createRole(dbStore);
    } else if (jj_2_63(3)) {
      dropRole(dbStore);
    } else if (jj_2_64(2)) {
      grant(dbStore);
    } else if (jj_2_65(2)) {
      revokeGrant(dbStore);
    } else if (jj_2_66(2)) {
      createPolicy(dbStore, ParseInfo.DEFAULT_INSTANCE);
    } else if (jj_2_67(2)) {
      dropPolicy(dbStore);
    } else if (jj_2_68(3)) {
      dropServer(dbStore);
    } else if (jj_2_69(3)) {
      dropTableView(dbStore);
    } else if (jj_2_70(2)) {
      importSchema(dbStore);
    } else if (jj_2_71(3)) {
      importDatabase(dbStore);
    } else if (jj_2_72(2)) {
      createDatabase(dbStore);
    } else if (jj_2_73(2)) {
      useDatabase(dbStore);
    } else if (jj_2_74(3)) {
      dropSchema(dbStore);
    } else if (jj_2_75(2)) {
      useSchema(dbStore);
    } else if (jj_2_76(3)) {
      createSchema(dbStore);
    } else if (jj_2_77(3)) {
      createDDLProcedure(dbStore, ParseInfo.DEFAULT_INSTANCE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALTER:
      case CREATE:
      case DROP:
      case GRANT:
      case REVOKE:
      case SET:
      case IMPORT:
      case USE:{
        ddlStmt(dbStore);
        break;
        }
      default:
        ;
      }
    } else if (jj_2_78(5)) {
      createDataWrapper(dbStore);
    } else if (jj_2_79(5)) {
      dropDataWrapper(dbStore);
    } else if (jj_2_80(3)) {
      dropProcedure(dbStore);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/*
name=option namespace
description=A namespace used to shorten the full name of an option key.
example=[source,sql]\n----\nSET NAMESPACE 'http://foo' AS foo\n----\n
*/
  final public void createNameSpace(DatabaseStore dbStore) throws ParseException {String uri = null;
        String prefix = null;
    jj_consume_token(SET);
    jj_consume_token(NAMESPACE);
    uri = stringVal();
    jj_consume_token(AS);
    prefix = id(Boolean.FALSE);
dbStore.createNameSpace(prefix, uri);
}

/*
name=create database
description=create a new database
example=[source,sql]\n----\nCREATE DATABASE foo OPTIONS(x 'y')\n----\n
*/
  final public void createDatabase(DatabaseStore dbStore) throws ParseException {String name = null;
    Database database = null;
    String version = null;
    jj_consume_token(CREATE);
    jj_consume_token(DATABASE);
    name = id(Boolean.TRUE);
database = new Database(name);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VERSION:{
      jj_consume_token(VERSION);
      version = stringVal();
database.setVersion(version);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(database, database.getNamespaceContainer());
OptionsUtil.setOptions(database);
      break;
      }
    default:
      ;
    }
dbStore.databaseCreated(database);
}

/*
name=use database
description=database into working context
example=[source,sql]\n----\nUSE DATABASE foo\n----\n
*/
  final public void useDatabase(DatabaseStore dbStore) throws ParseException {String name = null;
    String version = "1";
    jj_consume_token(USE);
    jj_consume_token(DATABASE);
    name = id(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VERSION:{
      jj_consume_token(VERSION);
      version = stringVal();
      break;
      }
    default:
      ;
    }
dbStore.databaseSwitched(name, version);
}

/*
name=drop database
description=drop database
example=[source,sql]\n----\nDROP DATABASE\n----\n
*/
/*void dropDatabase(DatabaseStore dbStore) :
{
    String name = null;
    Database database = null;
    String version = "1";
}
{
    <DROP> <DATABASE> name = id(null)
    [<VERSION>(version = stringVal())]
    {
        dbStore.databaseDropped(name, version);
    }
}*/

/*
name=create schema
description=create a schema in database
example=[source,sql]\n----\nCREATE VIRTUAL SCHEMA foo SERVER (s1,s2,s3);\n----\n
*/
  final public void createSchema(DatabaseStore dbStore) throws ParseException {Schema schema = null;
    String server = null;
    boolean physical = true;
    String name = null;
    ArrayList<String> servers = new ArrayList<String>();
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOREIGN:
    case VIRTUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRTUAL:{
        jj_consume_token(VIRTUAL);
physical=false;
        break;
        }
      case FOREIGN:{
        jj_consume_token(FOREIGN);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    jj_consume_token(SCHEMA);
    name = id(Boolean.TRUE);
schema = new Schema();
        schema.setName(name);
        schema.setPhysical(physical);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SERVER:{
      jj_consume_token(SERVER);
      identifierList(servers);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(schema, dbStore.getCurrentNamespaceContainer());
OptionsUtil.setOptions(schema);
      break;
      }
    default:
      ;
    }
dbStore.schemaCreated(schema, servers);
}

/*
name=drop schema
description=drop a schema in database
example=[source,sql]\n----\nDROP SCHEMA foo \n----\n
*/
  final public void dropSchema(DatabaseStore dbStore) throws ParseException {String name = null;
    Boolean virtual = null;
    jj_consume_token(DROP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOREIGN:
    case VIRTUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRTUAL:{
        jj_consume_token(VIRTUAL);
virtual=true;
        break;
        }
      case FOREIGN:{
        jj_consume_token(FOREIGN);
virtual=false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    jj_consume_token(SCHEMA);
    name = id(null);
dbStore.schemaDropped(name, virtual);
}

/*
name=set schema
description=set the schema for subsequent ddl statements
example=[source,sql]\n----\nSET SCHEMA foo\n----\n
*/
  final public void useSchema(DatabaseStore dbStore) throws ParseException {String name = null;
    jj_consume_token(SET);
    jj_consume_token(SCHEMA);
    name = id(null);
dbStore.schemaSwitched(name);
}

/*
name=create a domain or type alias
description=creates a named type with optional constraints
example=[source,sql]\n----\nCREATE DOMAIN my_type AS INTEGER NOT NULL\n----\n
*/
  final public void createDomain(DatabaseStore dbStore) throws ParseException {String domainName = null;
    ParsedDataType type = null;
    boolean notNull = false;
    Token idToken = null;
    jj_consume_token(CREATE);
    jj_consume_token(DOMAIN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      idToken = jj_consume_token(ID);
      break;
      }
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case RAISE:
    case CHAIN:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case UPSERT:
    case AFTER:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:{
      idToken = basicNonReserved();
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
String id = normalizeId(idToken.image);
        domainName = validateName(id, true);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      break;
      }
    default:
      ;
    }
    type = parseDataType();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(NULL);
notNull = true;
      break;
      }
    default:
      ;
    }
dbStore.createDomain(domainName, type.type, type.length==null?type.precision:type.length, type.scale, notNull);
}

/*
name=create data wrapper
description=Defines a translator; use the options to override the translator properties.
example=[source,sql]\n----\nCREATE FOREIGN DATA WRAPPER wrapper OPTIONS (x true)\n----\n
*/
  final public void createDataWrapper(DatabaseStore dbStore) throws ParseException {String wrapperName = null;
    DataWrapper wrapper = null;
    String type = null;
    jj_consume_token(CREATE);
    jj_consume_token(FOREIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATA:{
      jj_consume_token(DATA);
      jj_consume_token(WRAPPER);
      break;
      }
    case TRANSLATOR:{
      jj_consume_token(TRANSLATOR);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    wrapperName = unqualifiedId();
wrapper = new DataWrapper(wrapperName);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE:{
      jj_consume_token(TYPE);
      type = id(null);
wrapper.setType(type);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPTIONS:{
        optionsClause(wrapper, dbStore.getCurrentNamespaceContainer());
OptionsUtil.setOptions(wrapper);
        break;
        }
      default:
        ;
      }
      break;
      }
    default:
      ;
    }
dbStore.dataWrapperCreated(wrapper);
}

/*
name=Drop data wrapper
description=Deletes a translator
example=[source,sql]\n----\nDROP FOREIGN DATA WRAPPER wrapper\n----\n
*/
  final public void dropDataWrapper(DatabaseStore dbStore) throws ParseException {String wrapperName = null;
    jj_consume_token(DROP);
    jj_consume_token(FOREIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATA:{
      jj_consume_token(DATA);
      jj_consume_token(WRAPPER);
      break;
      }
    case TRANSLATOR:{
      jj_consume_token(TRANSLATOR);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    wrapperName = id(null);
dbStore.dataWrapperDropped(wrapperName);
}

/*
name=create role
description=Defines data role for the database
example=[source,sql]\n----\nCREATE ROLE lowly WITH FOREIGN ROLE "role"\n----\n
*/
  final public void createRole(DatabaseStore dbStore) throws ParseException {String roleName = null;
    Role role = null;
    jj_consume_token(CREATE);
    jj_consume_token(ROLE);
    roleName = unqualifiedId();
role = new Role(roleName);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITH:{
      jj_consume_token(WITH);
      readWith(role);
      break;
      }
    default:
      ;
    }
dbStore.roleCreated(role);
}

/*
name=with role
*/
  final public void readWith(Role role) throws ParseException {List<String> mappedRoles = new ArrayList<String>();
    boolean anyAuthenticated = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ANY:{
      jj_consume_token(ANY);
      jj_consume_token(AUTHENTICATED);
anyAuthenticated=true;
      break;
      }
    case FOREIGN:
    case JAAS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case JAAS:{
        jj_consume_token(JAAS);
        break;
        }
      case FOREIGN:{
        jj_consume_token(FOREIGN);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ROLE);
      identifierList(mappedRoles);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
role.setMappedRoles(mappedRoles);
        role.setAnyAuthenticated(anyAuthenticated);
}

/*
name=drop role
description=Removes data role for the database
example=[source,sql]\n----\nDROP ROLE <data-role>\n----\n
*/
  final public void dropRole(DatabaseStore dbStore) throws ParseException {String roleName = null;
    jj_consume_token(DROP);
    jj_consume_token(ROLE);
    roleName = id(null);
dbStore.roleDropped(roleName);
}

/*
name=CREATE POLICY
description=CREATE row level policy
example=[source,sql]\n----\nCREATE POLICY pname ON tbl FOR SELECT,INSERT TO role USING col = user();\n----\n
*/
  final public void createPolicy(DatabaseStore dbStore, ParseInfo info) throws ParseException {Database.ResourceType on= Database.ResourceType.TABLE;
    Policy policy = new Policy();
    String resource = null;
    String policyName = null;
    Expression condition = null;
    String to = null;
    Token operation = null;
    jj_consume_token(CREATE);
    jj_consume_token(POLICY);
    policyName = id(Boolean.TRUE);
    jj_consume_token(ON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      resource = id(null);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:{
        jj_consume_token(FOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALL:{
          jj_consume_token(ALL);
          break;
          }
        case DELETE:
        case INSERT:
        case SELECT:
        case UPDATE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SELECT:{
            operation = jj_consume_token(SELECT);
            break;
            }
          case INSERT:{
            operation = jj_consume_token(INSERT);
            break;
            }
          case UPDATE:{
            operation = jj_consume_token(UPDATE);
            break;
            }
          case DELETE:{
            operation = jj_consume_token(DELETE);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
policy.getOperations().add(Policy.Operation.valueOf(operation.image.toUpperCase()));
          label_51:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              break label_51;
            }
            jj_consume_token(COMMA);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SELECT:{
              operation = jj_consume_token(SELECT);
              break;
              }
            case INSERT:{
              operation = jj_consume_token(INSERT);
              break;
              }
            case UPDATE:{
              operation = jj_consume_token(UPDATE);
              break;
              }
            case DELETE:{
              operation = jj_consume_token(DELETE);
              break;
              }
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
policy.getOperations().add(Policy.Operation.valueOf(operation.image.toUpperCase()));
          }
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        ;
      }
      break;
      }
    case PROCEDURE:{
      jj_consume_token(PROCEDURE);
      resource = id(null);
on = Database.ResourceType.PROCEDURE;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:{
        jj_consume_token(FOR);
        token = jj_consume_token(ALL);
policy.getOperations().add(Policy.Operation.ALL);
        break;
        }
      default:
        ;
      }
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(TO);
    to = id(null);
    jj_consume_token(USING);
    jj_consume_token(LPAREN);
    condition = booleanPrimary(info);
    jj_consume_token(RPAREN);
policy.setName(policyName);
        policy.setResourceName(resource);
        policy.setResourceType(on);
        policy.setCondition(condition.toString());
        dbStore.policyCreated(to, policy);
}

/*
name=DROP POLICY
description=DROP row level policy
example=[source,sql]\n----\nDROP POLICY pname ON tbl TO role\n----\n
*/
  final public void dropPolicy(DatabaseStore dbStore) throws ParseException {Policy policy = new Policy();
    Database.ResourceType on= Database.ResourceType.TABLE;
    String resource = null;
    String policyName = null;
    String to = null;
    jj_consume_token(DROP);
    jj_consume_token(POLICY);
    policyName = id(Boolean.TRUE);
    jj_consume_token(ON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      resource = id(null);
      break;
      }
    case PROCEDURE:{
      jj_consume_token(PROCEDURE);
      resource = id(null);
on = Database.ResourceType.PROCEDURE;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(TO);
    to = id(null);
policy.setName(policyName);
      policy.setResourceName(resource);
      policy.setResourceType(on);
      dbStore.policyDropped(to, policy);
}

/*
name=GRANT
description=Defines GRANT for a role
example=[source,sql]\n----\nGRANT SELECT ON TABLE x.y TO role\n----\n
*/
  final public void grant(DatabaseStore dbStore) throws ParseException {Database.ResourceType on= null;
    Grant grant = new Grant();
    String resource = null;
    String mask = null;
    int maskOrder = -1;
    String condition = null;
    Boolean isConstraint = null;
    if (!CONDITION_CONSTRAINT_DEFAULT) {
        isConstraint = false;
    }
    String to = null;
    ArrayList<Permission.Privilege> privileges = new ArrayList<Permission.Privilege>();
    Permission permission = new Permission();
    Expression booleanExpr = null;
    jj_consume_token(GRANT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ALTER:
    case DELETE:
    case DROP:
    case EXECUTE:
    case INSERT:
    case ON:
    case SELECT:
    case UPDATE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALTER:
      case DELETE:
      case DROP:
      case EXECUTE:
      case INSERT:
      case SELECT:
      case UPDATE:{
        readGrantTypes(privileges);
        label_52:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            break label_52;
          }
          jj_consume_token(COMMA);
          readGrantTypes(privileges);
        }
        break;
        }
      default:
        ;
      }
      jj_consume_token(ON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TABLE:{
        jj_consume_token(TABLE);
        resource = id(null);
on = Database.ResourceType.TABLE;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONDITION:{
          jj_consume_token(CONDITION);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CONSTRAINT:
          case NOT:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NOT:{
              jj_consume_token(NOT);
isConstraint=false;
              break;
              }
            default:
              ;
            }
            jj_consume_token(CONSTRAINT);
if (isConstraint == null) isConstraint=true;
            break;
            }
          default:
            ;
          }
          condition = stringVal();
          break;
          }
        default:
          ;
        }
        break;
        }
      case FUNCTION:{
        jj_consume_token(FUNCTION);
        resource = id(null);
on = Database.ResourceType.FUNCTION;
        break;
        }
      case PROCEDURE:{
        jj_consume_token(PROCEDURE);
        resource = id(null);
on = Database.ResourceType.PROCEDURE;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONDITION:{
          jj_consume_token(CONDITION);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CONSTRAINT:
          case NOT:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case NOT:{
              jj_consume_token(NOT);
isConstraint=true;
              break;
              }
            default:
              ;
            }
            jj_consume_token(CONSTRAINT);
if (isConstraint == null) isConstraint=true;
            break;
            }
          default:
            ;
          }
          condition = stringVal();
          break;
          }
        default:
          ;
        }
        break;
        }
      case SCHEMA:{
        jj_consume_token(SCHEMA);
        resource = id(null);
on = Database.ResourceType.SCHEMA;
        break;
        }
      case COLUMN:{
        jj_consume_token(COLUMN);
        resource = id(null);
on = Database.ResourceType.COLUMN;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MASK:{
          jj_consume_token(MASK);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ORDER:{
            jj_consume_token(ORDER);
            maskOrder = intVal();
            break;
            }
          default:
            ;
          }
          mask = stringVal();
          break;
          }
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONDITION:{
          jj_consume_token(CONDITION);
          if (jj_2_81(2147483647)) {
            booleanExpr = booleanPrimary(ParseInfo.DEFAULT_INSTANCE);
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STRINGVAL:{
              condition = stringVal();
              break;
              }
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
          }
        default:
          ;
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case ALL:{
      jj_consume_token(ALL);
      jj_consume_token(PRIVILEGES);
privileges.add(Permission.Privilege.ALL_PRIVILEGES);
      break;
      }
    case TEMPORARY:{
      jj_consume_token(TEMPORARY);
      jj_consume_token(TABLE);
privileges.add(Permission.Privilege.TEMPORARY_TABLE);
      break;
      }
    case USAGE:{
      jj_consume_token(USAGE);
privileges.add(Permission.Privilege.USAGE); on = Database.ResourceType.LANGUAGE;
      jj_consume_token(ON);
      jj_consume_token(LANGUAGE);
      resource = id(null);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(TO);
    to = id(null);
if (privileges.isEmpty() && condition == null && mask == null) {
                {if (true) throw new MetadataException(QueryPlugin.Util.getString("SQLParser.empty_grant_revoke"));}
            }
            permission.setResourceName(resource);
            permission.setPrivileges(privileges);
            permission.setResourceType(on);
            if (booleanExpr != null) {
                condition = booleanExpr.toString();
            }
            if (mask != null) {
                permission.setMask(mask);
                if (maskOrder != -1) {
                    permission.setMaskOrder(maskOrder);
                }
            }
            if(condition != null) {
                permission.setCondition(condition, isConstraint);
            }
            grant.setRole(to);
            grant.setPermission(permission);
            dbStore.grantCreated(grant);
}

/*
name=Revoke GRANT
description=Revokes GRANT for a role
example=[source,sql]\n----\nREVOKE SELECT ON TABLE x.y TO role\n----\n
*/
  final public void revokeGrant(DatabaseStore dbStore) throws ParseException {Database.ResourceType on= null;
    Grant grant = new Grant();
    String resource = null;
    String mask = null;
    String condition = null;
    String to = null;
    ArrayList<Permission.Privilege> privileges = new ArrayList<Permission.Privilege>();
    Permission permission = new Permission();
    jj_consume_token(REVOKE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ALTER:
    case DELETE:
    case DROP:
    case EXECUTE:
    case INSERT:
    case ON:
    case SELECT:
    case UPDATE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ALTER:
      case DELETE:
      case DROP:
      case EXECUTE:
      case INSERT:
      case SELECT:
      case UPDATE:{
        readGrantTypes(privileges);
        label_53:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            break label_53;
          }
          jj_consume_token(COMMA);
          readGrantTypes(privileges);
        }
        break;
        }
      default:
        ;
      }
      jj_consume_token(ON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TABLE:{
        jj_consume_token(TABLE);
        resource = id(null);
on = Database.ResourceType.TABLE;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONDITION:{
          jj_consume_token(CONDITION);
condition = "";
          break;
          }
        default:
          ;
        }
        break;
        }
      case FUNCTION:{
        jj_consume_token(FUNCTION);
        resource = id(null);
on = Database.ResourceType.FUNCTION;
        break;
        }
      case PROCEDURE:{
        jj_consume_token(PROCEDURE);
        resource = id(null);
on = Database.ResourceType.PROCEDURE;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONDITION:{
          jj_consume_token(CONDITION);
condition = "";
          break;
          }
        default:
          ;
        }
        break;
        }
      case SCHEMA:{
        jj_consume_token(SCHEMA);
        resource = id(null);
on = Database.ResourceType.SCHEMA;
        break;
        }
      case COLUMN:{
        jj_consume_token(COLUMN);
        resource = id(null);
on = Database.ResourceType.COLUMN;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MASK:{
          jj_consume_token(MASK);
mask = "";
          break;
          }
        default:
          ;
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case ALL:{
      jj_consume_token(ALL);
      jj_consume_token(PRIVILEGES);
privileges.add(Permission.Privilege.ALL_PRIVILEGES);
      break;
      }
    case TEMPORARY:{
      jj_consume_token(TEMPORARY);
      jj_consume_token(TABLE);
privileges.add(Permission.Privilege.TEMPORARY_TABLE);
      break;
      }
    case USAGE:{
      jj_consume_token(USAGE);
privileges.add(Permission.Privilege.USAGE); on = Database.ResourceType.LANGUAGE;
      jj_consume_token(ON);
      jj_consume_token(LANGUAGE);
      resource = id(null);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FROM);
    to = id(null);
if (privileges.isEmpty() && condition == null && mask == null) {
                {if (true) throw new MetadataException(QueryPlugin.Util.getString("SQLParser.empty_grant_revoke"));}
            }
            permission.setResourceName(resource);
            permission.setRevokePrivileges(privileges);
            permission.setResourceType(on);
            if (mask != null) {
                permission.setMask(mask);
            }
            if(condition != null) {
                permission.setCondition(condition, null);
            }
            grant.setRole(to);
            grant.setPermission(permission);
            dbStore.grantRevoked(grant);
}

/*
name=create server
description=Defines a connection to a source
example=[source,sql]\n----\nCREATE SERVER "h2-connector" FOREIGN DATA WRAPPER h2 OPTIONS ("resource-name" 'java:/accounts-ds');\n----\n
*/
  final public void createServer(DatabaseStore dbStore) throws ParseException {String serverName = null;
    String type = null;
    String version = null;
    Server server = null;
    String wrapperName = null;
    jj_consume_token(CREATE);
    jj_consume_token(SERVER);
    serverName = unqualifiedId();
server = new Server(serverName);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE:{
      jj_consume_token(TYPE);
      type = stringVal();
server.setType(type);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VERSION:{
      jj_consume_token(VERSION);
      version = stringVal();
server.setVersion(version);
      break;
      }
    default:
      ;
    }
    jj_consume_token(FOREIGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATA:{
      jj_consume_token(DATA);
      jj_consume_token(WRAPPER);
      break;
      }
    case TRANSLATOR:{
      jj_consume_token(TRANSLATOR);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    wrapperName = unqualifiedId();
server.setDataWrapper(wrapperName);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(server, dbStore.getCurrentNamespaceContainer());
OptionsUtil.setOptions(server);
      break;
      }
    default:
      ;
    }
dbStore.serverCreated(server);
}

/*
name=drop server
description=Defines dropping connection to foreign source
example=[source,sql]\n----\nDROP SERVER server_name\n----\n
*/
  final public void dropServer(DatabaseStore dbStore) throws ParseException {String serverName = null;
    jj_consume_token(DROP);
    jj_consume_token(SERVER);
    serverName = id(null);
dbStore.serverDropped(serverName);
}

/*
name=create procedure
description=Defines a procedure or function invocation.
example=[source,sql]\n----\nCREATE FOREIGN PROCEDURE proc (param STRING) RETURNS STRING\n----\n
*/
  final public CreateProcedureCommand createDDLProcedure(DatabaseStore dbStore, ParseInfo info) throws ParseException {Procedure proc = null;
    CreateProcedureCommand procCmd = new CreateProcedureCommand();
    Statement stmt = null;
    ParsedDataType returnDataType = null;
    Token comment = null;
    Column c = new Column();
    MetadataFactory factory = null;
    String serverName = null;
    FunctionMethod fm = null;
    boolean virtual = true;
    boolean function = false;
    String procName = null;
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOREIGN:
    case VIRTUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRTUAL:{
        jj_consume_token(VIRTUAL);
        break;
        }
      case FOREIGN:{
        jj_consume_token(FOREIGN);
virtual = false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PROCEDURE:{
      jj_consume_token(PROCEDURE);
      break;
      }
    case FUNCTION:{
      jj_consume_token(FUNCTION);
function = true;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    procName = unqualifiedId();
factory = DatabaseStore.createMF(dbStore);
                        proc = factory.addProcedure(procName);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case INOUT:
    case OUT:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case INDEX:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case EXCEPTION:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case DEFAULT_KEYWORD:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      procedureParameter(factory, proc);
      label_54:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_54;
        }
        jj_consume_token(COMMA);
        procedureParameter(factory, proc);
      }
      break;
      }
    default:
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURNS:{
      jj_consume_token(RETURNS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPTIONS:{
        optionsClause(c, factory);
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TABLE:
      case LPAREN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TABLE:{
          jj_consume_token(TABLE);
          break;
          }
        default:
          ;
        }
        jj_consume_token(LPAREN);
        procedureRsColumn(factory, proc);
        label_55:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            break label_55;
          }
          jj_consume_token(COMMA);
          procedureRsColumn(factory, proc);
        }
        jj_consume_token(RPAREN);
        break;
        }
      case STRING:
      case VARBINARY:
      case VARCHAR:
      case BOOLEAN:
      case BYTE:
      case TINYINT:
      case SHORT:
      case SMALLINT:
      case CHAR:
      case INTEGER:
      case LONG:
      case BIGINT:
      case BIGINTEGER:
      case FLOAT:
      case REAL:
      case DOUBLE:
      case BIGDECIMAL:
      case DECIMAL:
      case DATE:
      case TIME:
      case TIMESTAMP:
      case BLOB:
      case CLOB:
      case XML:
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:{
        returnDataType = parseDataType();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(proc, factory);
OptionsUtil.setOptions(proc);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
comment = getToken(1);
      stmt = statement(info);
      break;
      }
    default:
      ;
    }
proc.setVirtual(virtual);
                        proc.setFunction(function);
                        if (stmt != null){
                            if (!virtual) {
                                 {if (true) throw new MetadataException(QueryPlugin.Util.getString("SQLParser.function_def", procName));}
                            }
                                proc.setQueryPlan(getFullComment(comment, true) + stmt.toString());
                        }

                if (returnDataType != null){
                                BaseColumn result = addProcColumn(factory, proc, "return", returnDataType, false);
                                result.setProperties(c.getProperties());
                } else if (proc.getResultSet() != null) {
                    proc.getResultSet().setProperties(c.getProperties());
                }
                if (function && proc.getQueryPlan() == null) {
                        fm = replaceProcedureWithFunction(factory, proc);
                        if (fm != null) {
                          dbStore.functionCreated(fm);
                        }
                } else {
                    dbStore.procedureCreated(proc);
                }
                {if ("" != null) return procCmd;}
    throw new Error("Missing return statement in function");
}

/*
name=drop procedure
description=Drops a table or view.
example=[source,sql]\n----\nDROP FOREIGN TABLE table-name\n----\n
*/
  final public void dropProcedure(DatabaseStore dbStore) throws ParseException {String procedureName = null;
        Boolean virtual = null;
        boolean function = false;
    jj_consume_token(DROP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOREIGN:
    case VIRTUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRTUAL:{
        jj_consume_token(VIRTUAL);
virtual = true;
        break;
        }
      case FOREIGN:{
        jj_consume_token(FOREIGN);
virtual = false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PROCEDURE:{
      jj_consume_token(PROCEDURE);
      break;
      }
    case FUNCTION:{
      jj_consume_token(FUNCTION);
function = true;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    procedureName = id(null);
if (function){
                        dbStore.functionDropped(procedureName, virtual);
                } else {
                        dbStore.procedureDropped(procedureName, virtual);
            }
}

/*
name=procedure parameter
description=A procedure or function parameter
example=[source,sql]\n----\nOUT x INTEGER\n----\n
*/
  final public void procedureParameter(MetadataFactory factory, Procedure proc) throws ParseException {String name = null;
        ParsedDataType type = null;
        ProcedureParameter.Type ppType = ProcedureParameter.Type.In;
        ProcedureParameter param = null;
        Expression defaultValue = null;
        boolean notNull = false;
        boolean vararg = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN:
    case INOUT:
    case OUT:
    case VARIADIC:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IN:{
        jj_consume_token(IN);
ppType = ProcedureParameter.Type.In ;
        break;
        }
      case OUT:{
        jj_consume_token(OUT);
ppType = ProcedureParameter.Type.Out;
        break;
        }
      case INOUT:{
        jj_consume_token(INOUT);
ppType = ProcedureParameter.Type.InOut;
        break;
        }
      case VARIADIC:{
        jj_consume_token(VARIADIC);
ppType = ProcedureParameter.Type.In ; vararg = true;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    name = id(Boolean.TRUE);
    type = parseDataType();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(NULL);
notNull = true;
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RESULT:{
      jj_consume_token(RESULT);
if (ppType != ProcedureParameter.Type.Out) {
                {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.param_out", proc.getName(), name));}
            }
            ppType = ProcedureParameter.Type.ReturnValue;
            if (!RESULT_ANY_POSITION && !proc.getParameters().isEmpty()) {
               {if (true) throw new ParseException(QueryPlugin.Util.getString("SQLParser.param_result_first", proc.getName(), name));}
            }
      break;
      }
    default:
      ;
    }
param = factory.addProcedureParameter(name, type.type, ppType, proc);
                setTypeInfo(type, param);
                if (notNull) {
                        param.setNullType(Column.NullType.No_Nulls);
                }
                if (vararg) {
                        param.setVarArg(vararg);
                }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFAULT_KEYWORD:{
      jj_consume_token(DEFAULT_KEYWORD);
      defaultValue = expression(ParseInfo.DEFAULT_INSTANCE);
setDefault(param, defaultValue);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(param, factory);
OptionsUtil.setOptions(param);
      break;
      }
    default:
      ;
    }
}

/*
name=procedure result column
description=A procedure result column.
example=[source,sql]\n----\nx INTEGER\n----\n
*/
  final public void procedureRsColumn(MetadataFactory factory, Procedure proc) throws ParseException {String name = null;
        ParsedDataType type = null;
        boolean notNull = false;
        BaseColumn column = null;
    name = id(Boolean.TRUE);
    type = parseDataType();
column = addProcColumn(factory, proc, name, type, true);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(NULL);
column.setNullType(Column.NullType.No_Nulls);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(column, factory);
OptionsUtil.setOptions(column);
      break;
      }
    default:
      ;
    }
}

/*
name=create table
description=Defines a table or view.
example=[source,sql]\n----\nCREATE VIEW vw AS SELECT 1\n----\n
*/
  final public void createTable(DatabaseStore dbStore) throws ParseException {
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRTUAL:
    case VIEW:{
      createView(dbStore);
      break;
      }
    case FOREIGN:
    case GLOBAL:{
      createForeignOrGloablTable(dbStore);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/*
name=create foreign or global temporary table
description=Defines a foreign or global temporary table.
example=[source,sql]\n----\nFOREIGN TABLE ft (col integer)\n----\n
*/
  final public void createForeignOrGloablTable(DatabaseStore dbStore) throws ParseException {boolean globalTemp = false;
        String tableName = null;
        Table table = null;
        Token comment = null;
        Command query = null;
        MetadataFactory factory = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOREIGN:{
      jj_consume_token(FOREIGN);
      jj_consume_token(TABLE);
      break;
      }
    case GLOBAL:{
      jj_consume_token(GLOBAL);
      jj_consume_token(TEMPORARY);
      jj_consume_token(TABLE);
globalTemp = true;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    tableName = unqualifiedId();
factory = DatabaseStore.createMF(dbStore);
            table = factory.addTable(tableName);
            table.setVirtual(globalTemp);
            if (globalTemp) {
                table.setTableType(Table.Type.TemporaryTable);
            }
    createTableBody(table, factory);
dbStore.tableCreated(table);
}

/*
name=create view
description=Defines a view.
example=[source,sql]\n----\nVIEW vw AS SELECT 1\n----\n
*/
  final public void createView(DatabaseStore dbStore) throws ParseException {String tableName = null;
    Table table = null;
    Token comment = null;
    Command query = null;
    MetadataFactory factory = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRTUAL:{
      jj_consume_token(VIRTUAL);
      break;
      }
    default:
      ;
    }
    jj_consume_token(VIEW);
    tableName = unqualifiedId();
factory = DatabaseStore.createMF(dbStore);
        table = factory.addTable(tableName);
        table.setVirtual(true);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      createViewBody(table, factory);
      break;
      }
    default:
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPTIONS:{
        optionsClause(table, factory);
OptionsUtil.setOptions(table);
        break;
        }
      default:
        ;
      }
    }
    jj_consume_token(AS);
comment = getToken(1);
    query = queryExpression(ParseInfo.DEFAULT_INSTANCE);
table.setSelectTransformation(getFullComment(comment, true) + query.toString());
dbStore.tableCreated(table);
}

/*
name=drop table
description=Drops a table or view.
example=[source,sql]\n----\nDROP VIEW name\n----\n
*/
  final public void dropTableView(DatabaseStore dbStore) throws ParseException {boolean view = false;
        boolean globalTemp = false;
        String tableName = null;
    jj_consume_token(DROP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOREIGN:{
      jj_consume_token(FOREIGN);
      jj_consume_token(TABLE);
      break;
      }
    case VIRTUAL:
    case VIEW:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRTUAL:{
        jj_consume_token(VIRTUAL);
        break;
        }
      default:
        ;
      }
      jj_consume_token(VIEW);
view = true;
      break;
      }
    case GLOBAL:{
      jj_consume_token(GLOBAL);
      jj_consume_token(TEMPORARY);
      jj_consume_token(TABLE);
globalTemp = true; view = true;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    tableName = id(null);
dbStore.tableDropped(tableName, globalTemp, view);
}

/*
name=create foreign temp table
description=Defines a foreign temp table
example=[source,sql]\n----\nCREATE FOREIGN TEMPORARY TABLE t (x string) ON z\n----\n
*/
  final public Create createForeignTempTable(ParseInfo info) throws ParseException {Table table = null;
        String tableName = null;
        String model = null;
        MetadataFactory factory = getTempMetadataFactory();
    jj_consume_token(CREATE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LOCAL:{
      jj_consume_token(LOCAL);
      break;
      }
    default:
      ;
    }
    jj_consume_token(FOREIGN);
    jj_consume_token(TEMPORARY);
    jj_consume_token(TABLE);
    tableName = unqualifiedId();
table = new Table();
                //need to set a dummy/stable uuid
                table.setUUID("tid:0");
                table.setTableType(Table.Type.TemporaryTable);
                table.setName(tableName);
    createTableBody(table, factory);
    jj_consume_token(ON);
    model = id(null);
Create create = new Create();
                create.setTableMetadata(table);
                create.setOn(model);
                {if ("" != null) return create;}
    throw new Error("Missing return statement in function");
}

/*
name=create table body
description=Defines a table.
example=[source,sql]\n----\n(x string) OPTIONS (CARDINALITY 100)\n----\n
*/
  final public void createTableBody(Table table, MetadataFactory factory) throws ParseException {
    jj_consume_token(LPAREN);
    createColumn(factory, table);
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_56;
      }
      jj_consume_token(COMMA);
      if (jj_2_82(2)) {
        tableConstraint(factory, table);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INSTEAD:
        case ENABLED:
        case DISABLED:
        case VIEW:
        case KEY:
        case SERIAL:
        case TEXTAGG:
        case COUNT_BIG:
        case COUNT:
        case ROW_NUMBER:
        case RANK:
        case DENSE_RANK:
        case CURRENT:
        case UNBOUNDED:
        case PRECEDING:
        case FOLLOWING:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case EVERY:
        case STDDEV_POP:
        case STDDEV_SAMP:
        case VAR_SAMP:
        case VAR_POP:
        case DOCUMENT:
        case CONTENT:
        case TRIM:
        case EMPTY:
        case ORDINALITY:
        case PATH:
        case FIRST:
        case LAST:
        case NEXT:
        case SUBSTRING:
        case EXTRACT:
        case TO_CHARS:
        case TO_BYTES:
        case TIMESTAMPADD:
        case TIMESTAMPDIFF:
        case QUERYSTRING:
        case NAMESPACE:
        case RESULT:
        case INDEX:
        case ACCESSPATTERN:
        case AUTO_INCREMENT:
        case WELLFORMED:
        case SQL_TSI_FRAC_SECOND:
        case SQL_TSI_SECOND:
        case SQL_TSI_MINUTE:
        case SQL_TSI_HOUR:
        case SQL_TSI_DAY:
        case SQL_TSI_WEEK:
        case SQL_TSI_MONTH:
        case SQL_TSI_QUARTER:
        case SQL_TSI_YEAR:
        case TEXTTABLE:
        case ARRAYTABLE:
        case JSONTABLE:
        case SELECTOR:
        case SKIP_KEYWORD:
        case WIDTH:
        case PASSING:
        case NAME:
        case ENCODING:
        case COLUMNS:
        case DELIMITER:
        case QUOTE:
        case HEADER:
        case NULLS:
        case OBJECTTABLE:
        case VERSION:
        case INCLUDING:
        case EXCLUDING:
        case XMLDECLARATION:
        case VARIADIC:
        case EXCEPTION:
        case RAISE:
        case CHAIN:
        case JSON:
        case JSONARRAY_AGG:
        case JSONOBJECT:
        case PRESERVE:
        case GEOMETRY:
        case GEOGRAPHY:
        case UPSERT:
        case AFTER:
        case DEFAULT_KEYWORD:
        case TYPE:
        case TRANSLATOR:
        case JAAS:
        case CONDITION:
        case MASK:
        case ACCESS:
        case CONTROL:
        case NONE:
        case DATA:
        case DATABASE:
        case PRIVILEGES:
        case SCHEMA:
        case ROLE:
        case USE:
        case REPOSITORY:
        case RENAME:
        case DOMAIN:
        case USAGE:
        case POSITION:
        case LISTAGG:
        case OBJECT:
        case EXPLAIN:
        case ANALYZE:
        case TEXT:
        case FORMAT:
        case YAML:
        case POLICY:
        case EPOCH:
        case QUARTER:
        case ID:{
          createColumn(factory, table);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(table, factory);
OptionsUtil.setOptions(table);
      break;
      }
    default:
      ;
    }
if (table.getColumns() != null && !table.supportsUpdate()) {
                        for (Column c : table.getColumns()) {
                                c.setUpdatable(false);
                        }
                }
}

/*
name=create view body
description=Defines a view.
example=[source,sql]\n----\n(x) OPTIONS (CARDINALITY 100)\n----\n
*/
  final public void createViewBody(Table table, MetadataFactory factory) throws ParseException {
    jj_consume_token(LPAREN);
    createViewColumn(factory, table);
    label_57:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_57;
      }
      jj_consume_token(COMMA);
      if (jj_2_83(2)) {
        tableConstraint(factory, table);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INSTEAD:
        case ENABLED:
        case DISABLED:
        case VIEW:
        case KEY:
        case SERIAL:
        case TEXTAGG:
        case COUNT_BIG:
        case COUNT:
        case ROW_NUMBER:
        case RANK:
        case DENSE_RANK:
        case CURRENT:
        case UNBOUNDED:
        case PRECEDING:
        case FOLLOWING:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case EVERY:
        case STDDEV_POP:
        case STDDEV_SAMP:
        case VAR_SAMP:
        case VAR_POP:
        case DOCUMENT:
        case CONTENT:
        case TRIM:
        case EMPTY:
        case ORDINALITY:
        case PATH:
        case FIRST:
        case LAST:
        case NEXT:
        case SUBSTRING:
        case EXTRACT:
        case TO_CHARS:
        case TO_BYTES:
        case TIMESTAMPADD:
        case TIMESTAMPDIFF:
        case QUERYSTRING:
        case NAMESPACE:
        case RESULT:
        case INDEX:
        case ACCESSPATTERN:
        case AUTO_INCREMENT:
        case WELLFORMED:
        case SQL_TSI_FRAC_SECOND:
        case SQL_TSI_SECOND:
        case SQL_TSI_MINUTE:
        case SQL_TSI_HOUR:
        case SQL_TSI_DAY:
        case SQL_TSI_WEEK:
        case SQL_TSI_MONTH:
        case SQL_TSI_QUARTER:
        case SQL_TSI_YEAR:
        case TEXTTABLE:
        case ARRAYTABLE:
        case JSONTABLE:
        case SELECTOR:
        case SKIP_KEYWORD:
        case WIDTH:
        case PASSING:
        case NAME:
        case ENCODING:
        case COLUMNS:
        case DELIMITER:
        case QUOTE:
        case HEADER:
        case NULLS:
        case OBJECTTABLE:
        case VERSION:
        case INCLUDING:
        case EXCLUDING:
        case XMLDECLARATION:
        case VARIADIC:
        case EXCEPTION:
        case RAISE:
        case CHAIN:
        case JSON:
        case JSONARRAY_AGG:
        case JSONOBJECT:
        case PRESERVE:
        case GEOMETRY:
        case GEOGRAPHY:
        case UPSERT:
        case AFTER:
        case DEFAULT_KEYWORD:
        case TYPE:
        case TRANSLATOR:
        case JAAS:
        case CONDITION:
        case MASK:
        case ACCESS:
        case CONTROL:
        case NONE:
        case DATA:
        case DATABASE:
        case PRIVILEGES:
        case SCHEMA:
        case ROLE:
        case USE:
        case REPOSITORY:
        case RENAME:
        case DOMAIN:
        case USAGE:
        case POSITION:
        case LISTAGG:
        case OBJECT:
        case EXPLAIN:
        case ANALYZE:
        case TEXT:
        case FORMAT:
        case YAML:
        case POLICY:
        case EPOCH:
        case QUARTER:
        case ID:{
          createViewColumn(factory, table);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(table, factory);
OptionsUtil.setOptions(table);
      break;
      }
    default:
      ;
    }
if (table.getColumns() != null && !table.supportsUpdate()) {
            for (Column c : table.getColumns()) {
                c.setUpdatable(false);
            }
        }
}

/*
name=table constraint
description=Defines a constraint on a table or view.
example=[source,sql]\n----\nFOREIGN KEY (a, b) REFERENCES tbl (x, y)\n----\n
*/
  final public void tableConstraint(MetadataFactory factory, Table table) throws ParseException {String name = null;
    AbstractMetadataRecord constraint = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONSTRAINT:{
      jj_consume_token(CONSTRAINT);
      name = id(null);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIMARY:{
      constraint = primaryKey(factory, table, name);
      break;
      }
    case UNIQUE:
    case INDEX:
    case ACCESSPATTERN:{
      constraint = constraint(factory, table, name, ParseInfo.DEFAULT_INSTANCE);
      break;
      }
    case FOREIGN:{
      constraint = foreignKey(factory, table, name);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(constraint, factory);
OptionsUtil.setCommonProperties(constraint, constraint.getProperties());
      break;
      }
    default:
      ;
    }
}

/*
name=foreign key
description=Defines the foreign key referential constraint.
example=[source,sql]\n----\nFOREIGN KEY (a, b) REFERENCES tbl (x, y)\n----\n
*/
  final public AbstractMetadataRecord foreignKey(MetadataFactory factory, Table table, String name) throws ParseException {List<String> columnNames = null;
        String viewName = null;
        Table reference = null;
        KeyRecord pk = null;
        Column column = null;
        List<String> pkColumnNames = null;
        KeyRecord key = null;
    jj_consume_token(FOREIGN);
    jj_consume_token(KEY);
    columnNames = columnList(true, false);
    jj_consume_token(REFERENCES);
    viewName = id(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      pkColumnNames = columnList(true, false);
      break;
      }
    default:
      ;
    }
{if ("" != null) return factory.addForeignKey(name != null?name:("FK"+table.getForeignKeys().size()), columnNames, pkColumnNames, viewName, table);}
    throw new Error("Missing return statement in function");
}

/*
name=primary key
description=Defines the primary key.
example=[source,sql]\n----\nPRIMARY KEY (a, b)\n----\n
*/
  final public AbstractMetadataRecord primaryKey(MetadataFactory factory, Table table, String name) throws ParseException {List<String> columnNames = null;
        Column column = null;
        KeyRecord key = null;
    jj_consume_token(PRIMARY);
    jj_consume_token(KEY);
    columnNames = columnList(true, false);
if (table.getPrimaryKey() != null){
                {if (true) throw new MetadataException(QueryPlugin.Util.getString("SQLParser.pk_exists", table.getName()));}
                }
                {if ("" != null) return factory.addPrimaryKey(name!=null?name:"PK", columnNames, table);}
    throw new Error("Missing return statement in function");
}

/*
name=other constraints
description=Defines ACCESSPATTERN and UNIQUE constraints and INDEXes.
example=[source,sql]\n----\nUNIQUE (a)\n----\n
*/
  final public AbstractMetadataRecord constraint(MetadataFactory factory, Table table, String name, ParseInfo info) throws ParseException {KeyRecord keyrecord = null;
        Column column = null;
        List<String> columnNames = null;
        Token type = null;
        KeyRecord key = null;
        List<Expression> expressions = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNIQUE:
    case ACCESSPATTERN:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNIQUE:{
        type = jj_consume_token(UNIQUE);
        break;
        }
      case ACCESSPATTERN:{
        type = jj_consume_token(ACCESSPATTERN);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      columnNames = columnList(true, false);
if (type.image.equalsIgnoreCase("UNIQUE")) {
                {if ("" != null) return factory.addIndex(name != null?name:("UNIQUE"+table.getUniqueKeys().size()), false, columnNames, table);}
        } else if (type.image.equalsIgnoreCase("ACCESSPATTERN")) {
                {if ("" != null) return factory.addAccessPattern(name != null?name:("AP"+table.getAccessPatterns().size()), columnNames, table);}
        }
      break;
      }
    case INDEX:{
      type = jj_consume_token(INDEX);
      jj_consume_token(LPAREN);
      expressions = expressionList(info);
      jj_consume_token(RPAREN);
{if ("" != null) return addFBI(factory, expressions, table, name);}
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/*
name=column list
description=A list of column names.
example=[source,sql]\n----\n(a, b)\n----\n
*/
  final public List columnList(boolean validate, boolean asElementSymbols) throws ParseException {ArrayList list = new ArrayList();
        String id = null;
    jj_consume_token(LPAREN);
    id = id(validate?Boolean.TRUE:null);
if (asElementSymbols) {
                        list.add(new ElementSymbol(id));
                } else {
                        list.add(id);
                }
    label_58:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_58;
      }
      jj_consume_token(COMMA);
      id = id(validate?Boolean.TRUE:null);
if (asElementSymbols) {
                        list.add(new ElementSymbol(id));
                } else {
                        list.add(id);
                }
    }
    jj_consume_token(RPAREN);
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
}

/*
name=table element
description=Defines a table column.
example=[source,sql]\n----\nx INTEGER NOT NULL\n----\n
*/
  final public void createColumn(MetadataFactory factory, Table table) throws ParseException {String element = null;
        ParsedDataType type = null;
        boolean autoIncrement = false;
        boolean notNull = false;
        Expression defaultValue = null;
        Column column = null;
        List<String> columnName = new ArrayList<String>();
    element = id(Boolean.TRUE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SERIAL:{
      jj_consume_token(SERIAL);
type = new ParsedDataType("INTEGER");
        autoIncrement = true;
        notNull = true;
      break;
      }
    case STRING:
    case VARBINARY:
    case VARCHAR:
    case BOOLEAN:
    case BYTE:
    case TINYINT:
    case SHORT:
    case SMALLINT:
    case CHAR:
    case INTEGER:
    case LONG:
    case BIGINT:
    case BIGINTEGER:
    case FLOAT:
    case REAL:
    case DOUBLE:
    case BIGDECIMAL:
    case DECIMAL:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case BLOB:
    case CLOB:
    case XML:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      type = parseDataType();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        jj_consume_token(NOT);
        jj_consume_token(NULL);
notNull = true;
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AUTO_INCREMENT:{
        jj_consume_token(AUTO_INCREMENT);
autoIncrement = true;
        break;
        }
      default:
        ;
      }
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    postCreateColumn(factory, table, element, type, autoIncrement, notNull);
}

/*
name=view element
description=Defines a view column with optional type.
example=[source,sql]\n----\nx INTEGER NOT NULL\n----\n
*/
  final public void createViewColumn(MetadataFactory factory, Table table) throws ParseException {String element = null;
    ParsedDataType type = null;
    boolean autoIncrement = false;
    boolean notNull = false;
    element = id(Boolean.TRUE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:
    case VARBINARY:
    case VARCHAR:
    case BOOLEAN:
    case BYTE:
    case TINYINT:
    case SHORT:
    case SMALLINT:
    case CHAR:
    case INTEGER:
    case LONG:
    case BIGINT:
    case BIGINTEGER:
    case FLOAT:
    case REAL:
    case DOUBLE:
    case BIGDECIMAL:
    case DECIMAL:
    case DATE:
    case TIME:
    case TIMESTAMP:
    case BLOB:
    case CLOB:
    case XML:
    case INSTEAD:
    case ENABLED:
    case DISABLED:
    case VIEW:
    case KEY:
    case SERIAL:
    case TEXTAGG:
    case COUNT_BIG:
    case COUNT:
    case ROW_NUMBER:
    case RANK:
    case DENSE_RANK:
    case CURRENT:
    case UNBOUNDED:
    case PRECEDING:
    case FOLLOWING:
    case SUM:
    case AVG:
    case MIN:
    case MAX:
    case EVERY:
    case STDDEV_POP:
    case STDDEV_SAMP:
    case VAR_SAMP:
    case VAR_POP:
    case DOCUMENT:
    case CONTENT:
    case TRIM:
    case EMPTY:
    case ORDINALITY:
    case PATH:
    case FIRST:
    case LAST:
    case NEXT:
    case SUBSTRING:
    case EXTRACT:
    case TO_CHARS:
    case TO_BYTES:
    case TIMESTAMPADD:
    case TIMESTAMPDIFF:
    case QUERYSTRING:
    case NAMESPACE:
    case RESULT:
    case ACCESSPATTERN:
    case AUTO_INCREMENT:
    case WELLFORMED:
    case SQL_TSI_FRAC_SECOND:
    case SQL_TSI_SECOND:
    case SQL_TSI_MINUTE:
    case SQL_TSI_HOUR:
    case SQL_TSI_DAY:
    case SQL_TSI_WEEK:
    case SQL_TSI_MONTH:
    case SQL_TSI_QUARTER:
    case SQL_TSI_YEAR:
    case TEXTTABLE:
    case ARRAYTABLE:
    case JSONTABLE:
    case SELECTOR:
    case SKIP_KEYWORD:
    case WIDTH:
    case PASSING:
    case NAME:
    case ENCODING:
    case COLUMNS:
    case DELIMITER:
    case QUOTE:
    case HEADER:
    case NULLS:
    case OBJECTTABLE:
    case VERSION:
    case INCLUDING:
    case EXCLUDING:
    case XMLDECLARATION:
    case VARIADIC:
    case RAISE:
    case CHAIN:
    case JSON:
    case JSONARRAY_AGG:
    case JSONOBJECT:
    case PRESERVE:
    case GEOMETRY:
    case GEOGRAPHY:
    case UPSERT:
    case AFTER:
    case TYPE:
    case TRANSLATOR:
    case JAAS:
    case CONDITION:
    case MASK:
    case ACCESS:
    case CONTROL:
    case NONE:
    case DATA:
    case DATABASE:
    case PRIVILEGES:
    case SCHEMA:
    case ROLE:
    case USE:
    case REPOSITORY:
    case RENAME:
    case DOMAIN:
    case USAGE:
    case POSITION:
    case LISTAGG:
    case OBJECT:
    case EXPLAIN:
    case ANALYZE:
    case TEXT:
    case FORMAT:
    case YAML:
    case POLICY:
    case EPOCH:
    case QUARTER:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SERIAL:{
        jj_consume_token(SERIAL);
type = new ParsedDataType("INTEGER");
        autoIncrement = true;
        notNull = true;
        break;
        }
      case STRING:
      case VARBINARY:
      case VARCHAR:
      case BOOLEAN:
      case BYTE:
      case TINYINT:
      case SHORT:
      case SMALLINT:
      case CHAR:
      case INTEGER:
      case LONG:
      case BIGINT:
      case BIGINTEGER:
      case FLOAT:
      case REAL:
      case DOUBLE:
      case BIGDECIMAL:
      case DECIMAL:
      case DATE:
      case TIME:
      case TIMESTAMP:
      case BLOB:
      case CLOB:
      case XML:
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:{
        type = parseDataType();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
          jj_consume_token(NULL);
notNull = true;
          break;
          }
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AUTO_INCREMENT:{
          jj_consume_token(AUTO_INCREMENT);
autoIncrement = true;
          break;
          }
        default:
          ;
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    postCreateColumn(factory, table, element, type, autoIncrement, notNull);
}

/*
name=post create column
description=Common options trailing a column
example=[source,sql]\n----\nPRIMARY KEY\n----\n
*/
  final public void postCreateColumn(MetadataFactory factory, Table table, String element, ParsedDataType type, boolean autoIncrement, boolean notNull) throws ParseException {Column column = null;
    List<String> columnName = new ArrayList<String>();
    Expression defaultValue = null;
boolean inferType = false;
       if (type == null) {
         type = new ParsedDataType("STRING");
         inferType = true;
       }
       column = factory.addColumn(element, type.type, table);
       column.setUpdatable(true);
       setTypeInfo(type, column);
       columnName.add(element);
       if (inferType) {
         column.setProperty(MetadataValidator.UNTYPED, "true");
       }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIMARY:
    case UNIQUE:
    case INDEX:{
      inlineConstraint(factory, table, columnName);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFAULT_KEYWORD:{
      jj_consume_token(DEFAULT_KEYWORD);
      defaultValue = expression(ParseInfo.DEFAULT_INSTANCE);
setDefault(column, defaultValue);
      break;
      }
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(column, factory);
OptionsUtil.setOptions(column);
      break;
      }
    default:
      ;
    }
if (notNull) {
           column.setNullType(Column.NullType.No_Nulls);
        }
        column.setAutoIncremented(autoIncrement);
}

/*
name=inline constraint
description=Defines a constraint on a single column
example=[source,sql]\n----\nx INTEGER PRIMARY KEY\n----\n
*/
  final public void inlineConstraint(MetadataFactory factory, Table table, List<String> columnName) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIMARY:{
      jj_consume_token(PRIMARY);
      jj_consume_token(KEY);
if (table.getPrimaryKey() != null) {
            {if (true) throw new MetadataException(QueryPlugin.Util.getString("SQLParser.pk_exists", table.getName()));}
       }
       factory.addPrimaryKey("PK", columnName, table);
      break;
      }
    case UNIQUE:{
      jj_consume_token(UNIQUE);
factory.addIndex("UNIQUE"+table.getUniqueKeys().size(), false, columnName, table);
      break;
      }
    case INDEX:{
      jj_consume_token(INDEX);
factory.addIndex("INDEX"+table.getIndexes().size(), true, columnName, table);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/*
name=options clause
description=A list of statement options.
example=[source,sql]\n----\nOPTIONS ('x' 'y', 'a' 'b')\n----\n
*/
  final public void optionsClause(AbstractMetadataRecord record, NamespaceContainer namespaceContainer) throws ParseException {
    jj_consume_token(OPTIONS);
    jj_consume_token(LPAREN);
    optionPair(record, namespaceContainer);
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_59;
      }
      jj_consume_token(COMMA);
      optionPair(record, namespaceContainer);
    }
    jj_consume_token(RPAREN);
}

/*
name=option pair
description=An option key/value pair.
example=[source,sql]\n----\n'key' 'value'\n----\n
*/
  final public void optionPair(AbstractMetadataRecord record, NamespaceContainer namespaceContainer) throws ParseException {Constant value = null;
        String key = null;
        Token t = null;
        String strVal = null;
    key = id(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATE:
    case TIME:
    case TIMESTAMP:
    case FALSE:
    case NULL:
    case TRUE:
    case UNKNOWN:
    case ESCAPEDTYPE:
    case STRINGVAL:
    case BINARYSTRINGVAL:{
      value = nonNumericLiteral();
      break;
      }
    case DECIMALVAL:
    case FLOATVAL:
    case UNSIGNEDINTEGER:
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        strVal = plusMinus();
        break;
        }
      default:
        ;
      }
      value = unsignedNumericLiteral(strVal);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
String val = MetadataFactory.resolvePropertyKey(key);
                if (!value.isNull()) {
                        val = value.getValue().toString();
                }
                record.setProperty(key, val);
}

/*
name=alter option pair
description=Alter An option key/value pair.
example=[source,sql]\n----\n'key' 'value'\n----\n
*/
  final public void alterOptionPair(String objectName, Database.ResourceType type, DatabaseStore dbStore) throws ParseException {Constant value = null;
    String key = null;
    Token t = null;
    String strVal = null;
    key = id(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATE:
    case TIME:
    case TIMESTAMP:
    case FALSE:
    case NULL:
    case TRUE:
    case UNKNOWN:
    case ESCAPEDTYPE:
    case STRINGVAL:
    case BINARYSTRINGVAL:{
      value = nonNumericLiteral();
      break;
      }
    case DECIMALVAL:
    case FLOATVAL:
    case UNSIGNEDINTEGER:
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        strVal = plusMinus();
        break;
        }
      default:
        ;
      }
      value = unsignedNumericLiteral(strVal);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
String val = null;
        if (!value.isNull()) {
            val = value.getValue().toString();
        }
        dbStore.addOrSetOption(objectName, type, key, val, true);
}

  final public void alterStatement(DatabaseStore dbStore) throws ParseException {boolean virtual = false;
    jj_consume_token(ALTER);
    if (jj_2_84(3)) {
      alterTable(dbStore, ParseInfo.DEFAULT_INSTANCE);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOREIGN:
      case PROCEDURE:
      case VIRTUAL:{
        alterProcedure(dbStore, ParseInfo.DEFAULT_INSTANCE);
        break;
        }
      case TRIGGER:{
        alterTrigger(dbStore, ParseInfo.DEFAULT_INSTANCE);
        break;
        }
      case SERVER:{
        alterServer(dbStore);
        break;
        }
      case TRANSLATOR:
      case DATA:{
        alterTranslator(dbStore);
        break;
        }
      case DATABASE:{
        alterDatabase(dbStore);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/*
name=ALTER TABLE
description=alters options of database
example=[source,sql]\n----\nALTER TABLE foo ADD COLUMN x xml\n----\n
*/
  final public void alterTable(DatabaseStore dbStore, ParseInfo info) throws ParseException {String objectName = null;
    QueryCommand command = null;
    Token comment = null;
    boolean virtual = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VIRTUAL:
    case VIEW:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRTUAL:{
        jj_consume_token(VIRTUAL);
        break;
        }
      default:
        ;
      }
      jj_consume_token(VIEW);
      objectName = id(null);
virtual = true;
      break;
      }
    case FOREIGN:
    case TABLE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOREIGN:{
        jj_consume_token(FOREIGN);
        break;
        }
      default:
        ;
      }
      jj_consume_token(TABLE);
      objectName = id(null);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
comment = getToken(1).specialToken;
      command = queryExpression(info);
if (comment != null) {
                command.setCacheHint(getQueryCacheOption(comment.image));
            }
            dbStore.setViewDefinition(objectName, command.toString());
      break;
      }
    default:
      if (jj_2_85(2)) {
        alterAddColumn(objectName, Database.ResourceType.TABLE, dbStore);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADD:{
          alterAddConstraint(objectName, Database.ResourceType.TABLE, dbStore);
          break;
          }
        case OPTIONS:{
          alterOptionsList(objectName, Database.ResourceType.TABLE, dbStore);
          break;
          }
        case DROP:{
          alterDropColumn(objectName, Database.ResourceType.TABLE, dbStore);
          break;
          }
        case ALTER:{
          jj_consume_token(ALTER);
          jj_consume_token(COLUMN);
          alterColumn(objectName, Database.ResourceType.TABLE, Database.ResourceType.COLUMN, dbStore);
          break;
          }
        case RENAME:{
          jj_consume_token(RENAME);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TO:{
            alterRenameTable(objectName, Database.ResourceType.TABLE, dbStore);
            break;
            }
          case COLUMN:{
            jj_consume_token(COLUMN);
            alterRenameColumn(objectName, Database.ResourceType.TABLE, dbStore);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

/*
name=RENAME Table
description=alters table name
example=[source,sql]\n----\nALTER TABLE foo RENAME TO BAR;\n----\n
*/
  final public void alterRenameTable(String objectName, Database.ResourceType type, DatabaseStore dbStore) throws ParseException {String id = null;
    jj_consume_token(TO);
    id = id(null);
dbStore.modifyTableName(objectName, type, id);
}

/*
name=ADD constraint
description=alters table and adds a constraint
example=[source,sql]\n----\nADD PRIMARY KEY (ID)\n----\n
*/
  final public void alterAddConstraint(String objectName, Database.ResourceType type, DatabaseStore dbStore) throws ParseException {Database.ResourceType childType = Database.ResourceType.COLUMN;
    MetadataFactory factory = DatabaseStore.createMF(dbStore);
    Table table = dbStore.getTableForCreateColumn(objectName, type);
    jj_consume_token(ADD);
    tableConstraint(factory, table);
}

/*
name=ADD column
description=alters table and adds a column
example=[source,sql]\n----\nADD COLUMN bar type OPTIONS (ADD updatable true)\n----\n
*/
  final public void alterAddColumn(String objectName, Database.ResourceType type, DatabaseStore dbStore) throws ParseException {Database.ResourceType childType = Database.ResourceType.COLUMN;
        MetadataFactory factory = null;
        Table table = null;
    jj_consume_token(ADD);
    jj_consume_token(COLUMN);
factory = DatabaseStore.createMF(dbStore);
                table = dbStore.getTableForCreateColumn(objectName, type);
    createColumn(factory, table);
}

/*
name=DROP column
description=alters table and adds a column
example=[source,sql]\n----\nDROP COLUMN bar\n----\n
*/
  final public void alterDropColumn(String objectName, Database.ResourceType type, DatabaseStore dbStore) throws ParseException {MetadataFactory factory = null;
        Table table = null;
        String childName = null;
        Column column = null;
    jj_consume_token(DROP);
    jj_consume_token(COLUMN);
    childName = id(null);
dbStore.removeColumn(objectName, type, childName);
}

/*
name=alter column options
description=alters a set of column options
example=[source,sql]\n----\nALTER COLUMN bar OPTIONS (ADD updatable true)\n----\n
*/
  final public void alterColumn(String objectName, Database.ResourceType type, Database.ResourceType childType, DatabaseStore dbStore) throws ParseException {String childName = null;
    ParsedDataType datatype = null;
    boolean autoIncrement = false;
    boolean notNull = false;
    childName = id(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE:{
      jj_consume_token(TYPE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SERIAL:{
        jj_consume_token(SERIAL);
datatype = new ParsedDataType("INTEGER");
        autoIncrement = true;
        notNull = true;
        break;
        }
      case STRING:
      case VARBINARY:
      case VARCHAR:
      case BOOLEAN:
      case BYTE:
      case TINYINT:
      case SHORT:
      case SMALLINT:
      case CHAR:
      case INTEGER:
      case LONG:
      case BIGINT:
      case BIGINTEGER:
      case FLOAT:
      case REAL:
      case DOUBLE:
      case BIGDECIMAL:
      case DECIMAL:
      case DATE:
      case TIME:
      case TIMESTAMP:
      case BLOB:
      case CLOB:
      case XML:
      case INSTEAD:
      case ENABLED:
      case DISABLED:
      case VIEW:
      case KEY:
      case TEXTAGG:
      case COUNT_BIG:
      case COUNT:
      case ROW_NUMBER:
      case RANK:
      case DENSE_RANK:
      case CURRENT:
      case UNBOUNDED:
      case PRECEDING:
      case FOLLOWING:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case EVERY:
      case STDDEV_POP:
      case STDDEV_SAMP:
      case VAR_SAMP:
      case VAR_POP:
      case DOCUMENT:
      case CONTENT:
      case TRIM:
      case EMPTY:
      case ORDINALITY:
      case PATH:
      case FIRST:
      case LAST:
      case NEXT:
      case SUBSTRING:
      case EXTRACT:
      case TO_CHARS:
      case TO_BYTES:
      case TIMESTAMPADD:
      case TIMESTAMPDIFF:
      case QUERYSTRING:
      case NAMESPACE:
      case RESULT:
      case ACCESSPATTERN:
      case AUTO_INCREMENT:
      case WELLFORMED:
      case SQL_TSI_FRAC_SECOND:
      case SQL_TSI_SECOND:
      case SQL_TSI_MINUTE:
      case SQL_TSI_HOUR:
      case SQL_TSI_DAY:
      case SQL_TSI_WEEK:
      case SQL_TSI_MONTH:
      case SQL_TSI_QUARTER:
      case SQL_TSI_YEAR:
      case TEXTTABLE:
      case ARRAYTABLE:
      case JSONTABLE:
      case SELECTOR:
      case SKIP_KEYWORD:
      case WIDTH:
      case PASSING:
      case NAME:
      case ENCODING:
      case COLUMNS:
      case DELIMITER:
      case QUOTE:
      case HEADER:
      case NULLS:
      case OBJECTTABLE:
      case VERSION:
      case INCLUDING:
      case EXCLUDING:
      case XMLDECLARATION:
      case VARIADIC:
      case RAISE:
      case CHAIN:
      case JSON:
      case JSONARRAY_AGG:
      case JSONOBJECT:
      case PRESERVE:
      case GEOMETRY:
      case GEOGRAPHY:
      case UPSERT:
      case AFTER:
      case TYPE:
      case TRANSLATOR:
      case JAAS:
      case CONDITION:
      case MASK:
      case ACCESS:
      case CONTROL:
      case NONE:
      case DATA:
      case DATABASE:
      case PRIVILEGES:
      case SCHEMA:
      case ROLE:
      case USE:
      case REPOSITORY:
      case RENAME:
      case DOMAIN:
      case USAGE:
      case POSITION:
      case LISTAGG:
      case OBJECT:
      case EXPLAIN:
      case ANALYZE:
      case TEXT:
      case FORMAT:
      case YAML:
      case POLICY:
      case EPOCH:
      case QUARTER:
      case ID:{
        datatype = parseDataType();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          jj_consume_token(NOT);
          jj_consume_token(NULL);
notNull = true;
          break;
          }
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AUTO_INCREMENT:{
          jj_consume_token(AUTO_INCREMENT);
autoIncrement = true;
          break;
          }
        default:
          ;
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
dbStore.alterBaseColumn(objectName, type, childName, datatype, autoIncrement, notNull);
      break;
      }
    case OPTIONS:{
      alterChildOptionsList(objectName, type, childName, childType, dbStore);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/*
name=rename column options
description=renames either a table column or procedure's parameter name
example=[source,sql]\n----\nRENAME COLUMN bar TO foo\n----\n
*/
  final public void alterRenameColumn(String objectName, Database.ResourceType type, DatabaseStore dbStore) throws ParseException {String oldName = null;
    String newName = null;
    oldName = id(null);
    jj_consume_token(TO);
    newName = id(null);
dbStore.renameBaseColumn(objectName, type, oldName, newName);
}

/*
name=ALTER PROCEDURE
description=alters options of database
example=[source,sql]\n----\nALTER PROCEDURE foo OPTIONS (ADD x y)\n----\n
*/
  final public void alterProcedure(DatabaseStore dbStore, ParseInfo info) throws ParseException {String objectName = null;
    Statement stmt = null;
    Token comment = null;
    boolean virtual = true;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOREIGN:
    case VIRTUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRTUAL:{
        jj_consume_token(VIRTUAL);
        break;
        }
      case FOREIGN:{
        jj_consume_token(FOREIGN);
virtual=false;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      ;
    }
    jj_consume_token(PROCEDURE);
    objectName = id(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
comment = getToken(1).specialToken;
      stmt = statement(info);
CreateProcedureCommand cup = new CreateProcedureCommand(asBlock(stmt));
            if (comment != null) {
                cup.setCacheHint(getQueryCacheOption(comment.image));
            }
            dbStore.setProcedureDefinition(objectName, cup.toString());
      break;
      }
    case OPTIONS:{
      alterOptionsList(objectName, Database.ResourceType.PROCEDURE, dbStore);
      break;
      }
    case ALTER:{
      jj_consume_token(ALTER);
      jj_consume_token(PARAMETER);
      alterColumn(objectName, Database.ResourceType.PROCEDURE, Database.ResourceType.PARAMETER, dbStore);
      break;
      }
    case RENAME:{
      jj_consume_token(RENAME);
      jj_consume_token(PARAMETER);
      alterRenameColumn(objectName, Database.ResourceType.PROCEDURE, dbStore);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/*
name=ALTER TRIGGER
description=alters options of table triggers
example=[source,sql]\n----\nALTER TRIGGER ON vw INSTEAD OF INSERT ENABLED\n----\n
*/
  final public void alterTrigger(DatabaseStore dbStore, ParseInfo info) throws ParseException {String objectName = null;
    Boolean enabled = null;
    Token event = null;
    TriggerAction triggerAction = null;
    jj_consume_token(TRIGGER);
    jj_consume_token(ON);
    objectName = id(null);
    jj_consume_token(INSTEAD);
    jj_consume_token(OF);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSERT:{
      event = jj_consume_token(INSERT);
      break;
      }
    case UPDATE:{
      event = jj_consume_token(UPDATE);
      break;
      }
    case DELETE:{
      event = jj_consume_token(DELETE);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS:{
      jj_consume_token(AS);
      triggerAction = forEachRowTriggerAction(info);
      break;
      }
    case ENABLED:{
      jj_consume_token(ENABLED);
enabled=true;
      break;
      }
    case DISABLED:{
      jj_consume_token(DISABLED);
enabled=false;
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
if (enabled != null){
            dbStore.enableTableTriggerPlan(objectName, Table.TriggerEvent.valueOf(event.image.toUpperCase()), enabled);
        } else {
            dbStore.setTableTriggerPlan(null, objectName, Table.TriggerEvent.valueOf(event.image.toUpperCase()), triggerAction.toString(), false);
        }
}

/*
name=ALTER SERVER
description=alters options of database
example=[source,sql]\n----\nALTER SERVER foo OPTIONS (ADD x y)\n----\n
*/
  final public void alterServer(DatabaseStore dbStore) throws ParseException {String objectName = null;
    jj_consume_token(SERVER);
    objectName = id(null);
    alterOptionsList(objectName, Database.ResourceType.SERVER, dbStore);
}

/*
name=ALTER DATA WRAPPER
description=alters options of data wrapper
example=[source,sql]\n----\nALTER DATA WRAPPER foo OPTIONS (ADD x y)\n----\n
*/
  final public void alterTranslator(DatabaseStore dbStore) throws ParseException {String objectName = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATA:{
      jj_consume_token(DATA);
      jj_consume_token(WRAPPER);
      break;
      }
    case TRANSLATOR:{
      jj_consume_token(TRANSLATOR);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    objectName = id(null);
    alterOptionsList(objectName, Database.ResourceType.DATAWRAPPER, dbStore);
}

/*
name=ALTER DATABASE
description=alters options of database
example=[source,sql]\n----\nALTER DATABASE foo OPTIONS (ADD x y)\n----\n
*/
  final public void alterDatabase(DatabaseStore dbStore) throws ParseException {String objectName = null;
    jj_consume_token(DATABASE);
    objectName = id(null);
    alterOptionsList(objectName, Database.ResourceType.DATABASE, dbStore);
}

/*
name=alter options list
description=a list of alterations to options
example=[source,sql]\n----\nOPTIONS (ADD updatable true)\n----\n
*/
  final public void alterOptionsList(String objectName, Database.ResourceType type, DatabaseStore dbStore) throws ParseException {
    jj_consume_token(OPTIONS);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:
    case SET:{
      addSetOption(objectName, type, dbStore);
      break;
      }
    case DROP:{
      dropOption(objectName, type, dbStore);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_60:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_60;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:
      case SET:{
        addSetOption(objectName, type, dbStore);
        break;
        }
      case DROP:{
        dropOption(objectName, type, dbStore);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
}

/*
name=drop option
description=drop option
example=[source,sql]\n----\nDROP updatable\n----\n
*/
  final public void dropOption(String objectName, Database.ResourceType type, DatabaseStore dbStore) throws ParseException {String key = null;
    jj_consume_token(DROP);
    key = id(null);
dbStore.removeOption(objectName, type, key);
}

/*
name=add set option
description=add or set an option pair
example=[source,sql]\n----\nADD updatable true\n----\n
*/
  final public void addSetOption(String objectName, Database.ResourceType type, DatabaseStore dbStore) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:{
      jj_consume_token(ADD);
      break;
      }
    case SET:{
      jj_consume_token(SET);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    alterOptionPair(objectName, type, dbStore);
}

/*
name=alter child options list
description=a list of alterations to options
example=[source,sql]\n----\nOPTIONS (ADD updatable true)\n----\n
*/
  final public void alterChildOptionsList(String objectName, Database.ResourceType type, String childName, Database.ResourceType childType, DatabaseStore dbStore) throws ParseException {
    jj_consume_token(OPTIONS);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:
    case SET:{
      addSetChildOption(objectName, type, childName, childType, dbStore);
      break;
      }
    case DROP:{
      dropChildOption(objectName, type, childName, childType, dbStore);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_61:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_61;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:
      case SET:{
        addSetChildOption(objectName, type, childName, childType, dbStore);
        break;
        }
      case DROP:{
        dropChildOption(objectName, type, childName, childType, dbStore);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
}

/*
name=drop option
description=drop option
example=[source,sql]\n----\nDROP updatable\n----\n
*/
  final public void dropChildOption(String objectName, Database.ResourceType type, String childName, Database.ResourceType childType, DatabaseStore dbStore) throws ParseException {String key = null;
    jj_consume_token(DROP);
    key = id(null);
dbStore.removeOption(objectName, type, childName, childType, key);
}

/*
name=add set child option
description=add or set an option pair
example=[source,sql]\n----\nADD updatable true\n----\n
*/
  final public void addSetChildOption(String objectName, Database.ResourceType type, String childName, Database.ResourceType childType, DatabaseStore dbStore) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:{
      jj_consume_token(ADD);
      break;
      }
    case SET:{
      jj_consume_token(SET);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    alterChildOptionPair(objectName, type, childName, childType, dbStore);
}

/*
name=alter child option pair
description=Alter An option key/value pair.
example=[source,sql]\n----\n'key' 'value'\n----\n
*/
  final public void alterChildOptionPair(String objectName, Database.ResourceType type, String childName, Database.ResourceType childType, DatabaseStore dbStore) throws ParseException {Constant value = null;
    String key = null;
    Token t = null;
    String strVal = null;
    key = id(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATE:
    case TIME:
    case TIMESTAMP:
    case FALSE:
    case NULL:
    case TRUE:
    case UNKNOWN:
    case ESCAPEDTYPE:
    case STRINGVAL:
    case BINARYSTRINGVAL:{
      value = nonNumericLiteral();
      break;
      }
    case DECIMALVAL:
    case FLOATVAL:
    case UNSIGNEDINTEGER:
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        strVal = plusMinus();
        break;
        }
      default:
        ;
      }
      value = unsignedNumericLiteral(strVal);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
String val = null;
        if (!value.isNull()) {
            val = value.getValue().toString();
        }
        dbStore.addOrSetOption(objectName, type, childName, childType, key, val, true);
}

/*
name=Import foreign schema
description=imports schema metadata from server
example=[source,sql]\n----\nIMPORT FOREIGN SCHEMA foo FROM SERVER bar\n----\n
*/
  final public void importSchema(DatabaseStore dbStore) throws ParseException {String foreignSchemaName = null;
    String serverType = null;
    String schemaName = null;
    String serverName = null;
    String importIntoSchemaName = null;
    ArrayList<String> includeTables = new ArrayList<String>();
    ArrayList<String> excludeTables = new ArrayList<String>();
    Server server = new Server("__temp__");
    jj_consume_token(IMPORT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOREIGN:{
      jj_consume_token(FOREIGN);
      jj_consume_token(SCHEMA);
      foreignSchemaName = id(null);
      break;
      }
    default:
      ;
    }
    jj_consume_token(FROM);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SERVER:{
      jj_consume_token(SERVER);
serverType = "native";
      break;
      }
    case REPOSITORY:{
      jj_consume_token(REPOSITORY);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    serverName = id(null);
    jj_consume_token(INTO);
    schemaName = id(null);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPTIONS:{
      optionsClause(server, dbStore.getCurrentNamespaceContainer());
OptionsUtil.setOptions(server);
      break;
      }
    default:
      ;
    }
if (serverType == null){
            serverType = serverName;
            serverName = null;
        }
        dbStore.importSchema(schemaName, serverType, serverName, foreignSchemaName, includeTables, excludeTables, server.getProperties());
}

/*
name=Import VDB
description=imports another VDB into current database
example=[source,sql]\n----\nIMPORT DATABASE vdb VERSION '1.2.3' WITH ACCESS CONTROL\n----\n
*/
  final public void importDatabase(DatabaseStore dbStore) throws ParseException {String dbName = null;
    String version = null;
    boolean importAccessControls = false;
    jj_consume_token(IMPORT);
    jj_consume_token(DATABASE);
    dbName = id(null);
    jj_consume_token(VERSION);
    version = stringVal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITH:{
      jj_consume_token(WITH);
      jj_consume_token(ACCESS);
      jj_consume_token(CONTROL);
importAccessControls=true;
      break;
      }
    default:
      ;
    }
dbStore.importDatabase(dbName, version, importAccessControls);
}

/*
name=identifier list
*/
  final public void identifierList(List<String> strings) throws ParseException {String name = null;
    name = id(null);
strings.add(name);
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        break label_62;
      }
      jj_consume_token(COMMA);
      name = id(null);
strings.add(name);
    }
}

/*
name=grant type
*/
  final public void readGrantTypes(ArrayList<Permission.Privilege> privileges) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:{
      jj_consume_token(SELECT);
privileges.add(Permission.Privilege.SELECT);
      break;
      }
    case INSERT:{
      jj_consume_token(INSERT);
privileges.add(Permission.Privilege.INSERT);
      break;
      }
    case UPDATE:{
      jj_consume_token(UPDATE);
privileges.add(Permission.Privilege.UPDATE);
      break;
      }
    case DELETE:{
      jj_consume_token(DELETE);
privileges.add(Permission.Privilege.DELETE);
      break;
      }
    case EXECUTE:{
      jj_consume_token(EXECUTE);
privileges.add(Permission.Privilege.EXECUTE);
      break;
      }
    case ALTER:{
      jj_consume_token(ALTER);
privileges.add(Permission.Privilege.ALTER);
      break;
      }
    case DROP:{
      jj_consume_token(DROP);
privileges.add(Permission.Privilege.DROP);
      break;
      }
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_48()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_49()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_50()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_51()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_52()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_53()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_54()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_55()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_56()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_57()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_58()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_59()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_60()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_61()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_62()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_63()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_64()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_65()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_66()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_67()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_68()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_69()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_70()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_71()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_72()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_73()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_74(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_74()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_75(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_75()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_76(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_76()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_77(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_77()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_78(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_78()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_79(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_79()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_80(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_80()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_81(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_81()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_82(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_82()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_83(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_83()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_84(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_84()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_85(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_85()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_function_4591_13_574()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_function_4587_13_556()
 {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4591_13_574()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_createTable_6126_5_108()
 {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_createTable_6126_15_191()) {
    jj_scanpos = xsp;
    if (jj_3R_createTable_6127_17_192()) return true;
    }
    return false;
  }

  private boolean jj_3R_objectTable_3052_6_644()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_objectColumn_3086_9_643()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(224)) jj_scanpos = xsp;
    if (jj_scan_token(PROCEDURE)) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_scan_token(SUBSTRING)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4587_13_556()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4595_15_557()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_objectTable_3039_12_665()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    return false;
  }

  private boolean jj_3R_dropProcedure_6028_90_220()
 {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_objectTable_3033_11_642()
 {
    if (jj_scan_token(PASSING)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_objectTable_3039_12_665()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_objectTable_3030_10_641()
 {
    if (jj_scan_token(LANGUAGE)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_function_4565_9_170()
 {
    if (jj_scan_token(CAST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_parseDataType_5151_5_440()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_objectTable_3029_9_84()
 {
    if (jj_scan_token(OBJECTTABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_objectTable_3030_10_641()) jj_scanpos = xsp;
    if (jj_3R_stringVal_636_9_325()) return true;
    xsp = jj_scanpos;
    if (jj_3R_objectTable_3033_11_642()) jj_scanpos = xsp;
    if (jj_scan_token(COLUMNS)) return true;
    if (jj_3R_objectColumn_3086_9_643()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_objectTable_3052_6_644()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) jj_scanpos = xsp;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_createProcedure_1493_5_63()
 {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(224)) jj_scanpos = xsp;
    if (jj_scan_token(PROCEDURE)) return true;
    return false;
  }

  private boolean jj_3R_function_4551_10_169()
 {
    if (jj_scan_token(CONVERT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_parseDataType_5151_5_440()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_function_4551_9_97()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4551_10_169()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4565_9_170()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4698_9_171()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4708_9_172()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4714_11_173()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4718_11_174()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4722_11_175()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4738_17_176()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4742_17_177()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4746_17_178()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4750_17_179()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4754_13_180()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4756_11_181()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4773_9_182()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4781_13_183()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4783_5_184()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4786_9_185()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_sqlStatement_1473_6_398()
 {
    if (jj_3R_dynamicCommand_1540_5_437()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_userCommand_939_9_74()) return true;
    return false;
  }

  private boolean jj_3R_sqlStatement_1472_5_365()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_sqlStatement_1473_6_398()) return true;
    }
    return false;
  }

  private boolean jj_3R_xmlQuery_2998_12_610()
 {
    if (jj_scan_token(EMPTY)) return true;
    return false;
  }

  private boolean jj_3R_xmlQuery_2996_12_609()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_xmlQuery_2996_11_591()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlQuery_2996_12_609()) {
    jj_scanpos = xsp;
    if (jj_3R_xmlQuery_2998_12_610()) return true;
    }
    if (jj_scan_token(ON)) return true;
    if (jj_scan_token(EMPTY)) return true;
    return false;
  }

  private boolean jj_3R_dropProcedure_6028_46_279()
 {
    if (jj_scan_token(FOREIGN)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(INTO)) return true;
    return false;
  }

  private boolean jj_3R_searchedCaseExpression_4521_10_551()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_searchedCaseExpression_4511_17_190()
 {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_criteria_3304_9_187()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_xmlQuery_2979_12_608()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    return false;
  }

  private boolean jj_3R_xmlQuery_2973_11_590()
 {
    if (jj_scan_token(PASSING)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_xmlQuery_2979_12_608()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_searchedCaseExpression_4509_9_101()
 {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    if (jj_3R_searchedCaseExpression_4511_17_190()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_searchedCaseExpression_4511_17_190()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_searchedCaseExpression_4521_10_551()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_xmlQuery_2970_11_589()
 {
    if (jj_3R_xmlNamespaces_5002_9_106()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_xmlQuery_2969_9_259()
 {
    if (jj_scan_token(XMLQUERY)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlQuery_2970_11_589()) jj_scanpos = xsp;
    if (jj_3R_stringVal_636_9_325()) return true;
    xsp = jj_scanpos;
    if (jj_3R_xmlQuery_2973_11_590()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlQuery_2996_11_591()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_dropProcedure_6028_17_219()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_dropProcedure_6028_17_278()) {
    jj_scanpos = xsp;
    if (jj_3R_dropProcedure_6028_46_279()) return true;
    }
    return false;
  }

  private boolean jj_3R_dropProcedure_6028_17_278()
 {
    if (jj_scan_token(VIRTUAL)) return true;
    return false;
  }

  private boolean jj_3R_dropProcedure_6028_9_132()
 {
    if (jj_scan_token(DROP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_dropProcedure_6028_17_219()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_3R_dropProcedure_6028_90_220()) return true;
    }
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_caseExpression_4487_10_553()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_createDDLProcedure_5961_71_215()
 {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_caseExpression_4478_17_552()
 {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_windowFrameBound_4452_36_694()
 {
    if (jj_scan_token(PRECEDING)) return true;
    return false;
  }

  private boolean jj_3R_windowFrameBound_4451_36_693()
 {
    if (jj_scan_token(FOLLOWING)) return true;
    return false;
  }

  private boolean jj_3R_caseExpression_4475_9_520()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    Token xsp;
    if (jj_3R_caseExpression_4478_17_552()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_caseExpression_4478_17_552()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_caseExpression_4487_10_553()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_assignStatement_1408_5_72()
 {
    if (jj_3R_id_703_9_75()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_xmlExists_2935_8_363()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    return false;
  }

  private boolean jj_3R_declareStatement_1375_31_402()
 {
    if (jj_scan_token(EXCEPTION)) return true;
    return false;
  }

  private boolean jj_3R_xmlExists_2929_7_326()
 {
    if (jj_scan_token(PASSING)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_xmlExists_2935_8_363()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_windowFrameBound_4451_19_692()
 {
    if (jj_3R_intVal_3204_9_512()) return true;
    return false;
  }

  private boolean jj_3R_xmlExists_2926_7_324()
 {
    if (jj_3R_xmlNamespaces_5002_9_106()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_xmlExists_2925_5_282()
 {
    if (jj_scan_token(XMLEXISTS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlExists_2926_7_324()) jj_scanpos = xsp;
    if (jj_3R_stringVal_636_9_325()) return true;
    xsp = jj_scanpos;
    if (jj_3R_xmlExists_2929_7_326()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_windowFrameBound_4454_5_689()
 {
    if (jj_scan_token(CURRENT)) return true;
    if (jj_scan_token(ROW)) return true;
    return false;
  }

  private boolean jj_3R_windowFrameBound_4451_5_688()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(308)) {
    jj_scanpos = xsp;
    if (jj_3R_windowFrameBound_4451_19_692()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_windowFrameBound_4451_36_693()) {
    jj_scanpos = xsp;
    if (jj_3R_windowFrameBound_4452_36_694()) return true;
    }
    return false;
  }

  private boolean jj_3R_textColumn_2895_25_682()
 {
    if (jj_scan_token(SELECTOR)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    return false;
  }

  private boolean jj_3R_windowFrameBound_4450_4_679()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_windowFrameBound_4451_5_688()) {
    jj_scanpos = xsp;
    if (jj_3R_windowFrameBound_4454_5_689()) return true;
    }
    return false;
  }

  private boolean jj_3R_createDDLProcedure_5961_27_277()
 {
    if (jj_scan_token(FOREIGN)) return true;
    return false;
  }

  private boolean jj_3R_declareStatement_1375_6_401()
 {
    if (jj_3R_parseDataType_5151_5_440()) return true;
    return false;
  }

  private boolean jj_3R_declareStatement_1374_5_368()
 {
    if (jj_scan_token(DECLARE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_declareStatement_1375_6_401()) {
    jj_scanpos = xsp;
    if (jj_3R_declareStatement_1375_31_402()) return true;
    }
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(NO)) return true;
    if (jj_scan_token(TRIM)) return true;
    return false;
  }

  private boolean jj_3R_createDDLProcedure_5961_15_214()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(224)) {
    jj_scanpos = xsp;
    if (jj_3R_createDDLProcedure_5961_27_277()) return true;
    }
    return false;
  }

  private boolean jj_3R_windowFrame_4425_13_649()
 {
    if (jj_scan_token(ROWS)) return true;
    return false;
  }

  private boolean jj_3R_textColumn_2885_17_681()
 {
    if (jj_scan_token(WIDTH)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_windowFrame_4429_6_651()
 {
    if (jj_3R_windowFrameBound_4450_4_679()) return true;
    return false;
  }

  private boolean jj_3R_windowFrame_4427_5_650()
 {
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_windowFrameBound_4450_4_679()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_windowFrameBound_4450_4_679()) return true;
    return false;
  }

  private boolean jj_3R_createDDLProcedure_5961_5_129()
 {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_createDDLProcedure_5961_15_214()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_3R_createDDLProcedure_5961_71_215()) return true;
    }
    if (jj_3R_unqualifiedId_684_5_199()) return true;
    return false;
  }

  private boolean jj_3R_windowFrame_4425_4_625()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_3R_windowFrame_4425_13_649()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_windowFrame_4427_5_650()) {
    jj_scanpos = xsp;
    if (jj_3R_windowFrame_4429_6_651()) return true;
    }
    return false;
  }

  private boolean jj_3R_textColumn_2880_13_680()
 {
    if (jj_scan_token(HEADER)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_textColumn_2878_9_653()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_textColumn_2880_13_680()) jj_scanpos = xsp;
    if (jj_3R_parseBasicDataType_5129_5_502()) return true;
    xsp = jj_scanpos;
    if (jj_3R_textColumn_2885_17_681()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_textColumn_2895_25_682()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ifStatement_1346_5_290()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_textColumn_2873_11_652()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(ORDINALITY)) return true;
    return false;
  }

  private boolean jj_3R_textColumn_2871_9_627()
 {
    if (jj_3R_id_703_9_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_textColumn_2873_11_652()) {
    jj_scanpos = xsp;
    if (jj_3R_textColumn_2878_9_653()) return true;
    }
    return false;
  }

  private boolean jj_3R_windowSpecification_4399_6_613()
 {
    if (jj_3R_windowFrame_4425_4_625()) return true;
    return false;
  }

  private boolean jj_3R_windowSpecification_4398_6_612()
 {
    if (jj_3R_orderby_3812_9_376()) return true;
    return false;
  }

  private boolean jj_3R_windowSpecification_4397_6_611()
 {
    if (jj_scan_token(PARTITION)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_expressionList_1838_9_379()) return true;
    return false;
  }

  private boolean jj_3R_dropServer_5932_5_120()
 {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(SERVER)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_windowSpecification_4387_9_186()
 {
    if (jj_scan_token(OVER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_windowSpecification_4397_6_611()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_windowSpecification_4398_6_612()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_windowSpecification_4399_6_613()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_loopStatement_1316_5_139()
 {
    if (jj_scan_token(LOOP)) return true;
    if (jj_scan_token(ON)) return true;
    return false;
  }

  private boolean jj_3R_unescapedFunction_4228_146_596()
 {
    if (jj_3R_windowSpecification_4387_9_186()) return true;
    return false;
  }

  private boolean jj_3R_branchingStatement_1252_49_441()
 {
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(NO)) return true;
    if (jj_scan_token(TRIM)) return true;
    return false;
  }

  private boolean jj_3R_arrayExpression_4365_5_550()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_queryExpression_1945_9_240()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_arrayExpression_4358_11_598()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_textTable_2822_11_632()
 {
    if (jj_scan_token(SKIP_KEYWORD)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    return false;
  }

  private boolean jj_3R_arrayExpression_4357_10_572()
 {
    if (jj_3R_expression_4033_5_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_arrayExpression_4358_11_598()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_whileStatement_1292_5_140()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_textTable_2813_17_656()
 {
    if (jj_3R_intVal_3204_9_512()) return true;
    return false;
  }

  private boolean jj_3R_returnStatement_1274_19_405()
 {
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_arrayExpression_4356_6_549()
 {
    if (jj_scan_token(LSBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arrayExpression_4357_10_572()) jj_scanpos = xsp;
    if (jj_scan_token(RSBRACE)) return true;
    return false;
  }

  private boolean jj_3R_arrayExpression_4355_5_519()
 {
    if (jj_scan_token(ARRAY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arrayExpression_4356_6_549()) {
    jj_scanpos = xsp;
    if (jj_3R_arrayExpression_4365_5_550()) return true;
    }
    return false;
  }

  private boolean jj_3R_textTable_2811_11_631()
 {
    if (jj_scan_token(HEADER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_textTable_2813_17_656()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_createServer_5886_5_113()
 {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(SERVER)) return true;
    if (jj_3R_unqualifiedId_684_5_199()) return true;
    return false;
  }

  private boolean jj_3R_textTable_2808_11_655()
 {
    if (jj_scan_token(QUOTE)) return true;
    if (jj_3R_charVal_3633_9_470()) return true;
    return false;
  }

  private boolean jj_3R_unsignedValueExpressionPrimary_4336_17_500()
 {
    if (jj_3R_caseExpression_4475_9_520()) return true;
    return false;
  }

  private boolean jj_3R_returnStatement_1274_9_370()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_returnStatement_1274_19_405()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_textTable_2806_11_654()
 {
    if (jj_scan_token(ESCAPE)) return true;
    if (jj_3R_charVal_3633_9_470()) return true;
    return false;
  }

  private boolean jj_3R_textTable_2806_11_630()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_textTable_2806_11_654()) {
    jj_scanpos = xsp;
    if (jj_3R_textTable_2808_11_655()) return true;
    }
    return false;
  }

  private boolean jj_3R_textTable_2792_25_86()
 {
    if (jj_scan_token(NO)) return true;
    if (jj_scan_token(ROW)) return true;
    if (jj_scan_token(DELIMITER)) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_searchedCaseExpression_4509_9_101()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_subquery_3502_9_92()) return true;
    return false;
  }

  private boolean jj_3R_textTable_2802_11_629()
 {
    if (jj_scan_token(DELIMITER)) return true;
    if (jj_3R_charVal_3633_9_470()) return true;
    return false;
  }

  private boolean jj_3R_unsignedValueExpressionPrimary_4319_29_517()
 {
    if (jj_3R_nonReserved_651_5_247()) return true;
    return false;
  }

  private boolean jj_3R_unsignedValueExpressionPrimary_4330_17_499()
 {
    if (jj_3R_arrayExpression_4355_5_519()) return true;
    return false;
  }

  private boolean jj_3R_unsignedValueExpressionPrimary_4328_17_498()
 {
    if (jj_3R_nestedExpression_4267_5_518()) return true;
    return false;
  }

  private boolean jj_3R_textTable_2797_11_87()
 {
    if (jj_scan_token(ROW)) return true;
    if (jj_scan_token(DELIMITER)) return true;
    if (jj_3R_charVal_3633_9_470()) return true;
    return false;
  }

  private boolean jj_3R_unescapedFunction_4228_113_595()
 {
    if (jj_3R_filterClause_2412_9_594()) return true;
    return false;
  }

  private boolean jj_3R_unsignedValueExpressionPrimary_4322_17_497()
 {
    if (jj_3R_subquery_3502_9_92()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_textTable_2792_25_86()) {
    jj_scanpos = xsp;
    if (jj_3R_textTable_2797_11_87()) return true;
    }
    return false;
  }

  private boolean jj_3R_branchingStatement_1255_10_404()
 {
    if (jj_scan_token(LEAVE)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_unsignedValueExpressionPrimary_4314_19_516()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_unsignedValueExpressionPrimary_4314_17_496()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unsignedValueExpressionPrimary_4314_19_516()) {
    jj_scanpos = xsp;
    if (jj_3R_unsignedValueExpressionPrimary_4319_29_517()) return true;
    }
    return false;
  }

  private boolean jj_3R_branchingStatement_1251_10_403()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_branchingStatement_1252_49_441()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_textTable_2785_10_628()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_textColumn_2871_9_627()) return true;
    return false;
  }

  private boolean jj_3R_branchingStatement_1250_9_369()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_branchingStatement_1251_10_403()) {
    jj_scanpos = xsp;
    if (jj_3R_branchingStatement_1255_10_404()) return true;
    }
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_unescapedFunction_4228_5_100()) return true;
    return false;
  }

  private boolean jj_3R_textTable_2777_11_626()
 {
    if (jj_scan_token(SELECTOR)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_unsignedValueExpressionPrimary_4306_17_495()
 {
    if (jj_scan_token(ESCAPEDFUNCTION)) return true;
    if (jj_3R_function_4551_9_97()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_revokeGrant_5849_7_207()
 {
    if (jj_scan_token(USAGE)) return true;
    return false;
  }

  private boolean jj_3R_unsignedValueExpressionPrimary_4303_17_494()
 {
    if (jj_3R_parameterReference_4214_5_515()) return true;
    return false;
  }

  private boolean jj_3R_textTable_2775_9_81()
 {
    if (jj_scan_token(TEXTTABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_textTable_2777_11_626()) jj_scanpos = xsp;
    if (jj_scan_token(COLUMNS)) return true;
    if (jj_3R_textColumn_2871_9_627()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_textTable_2785_10_628()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_textTable_2802_11_629()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_textTable_2806_11_630()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_textTable_2811_11_631()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_textTable_2822_11_632()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) jj_scanpos = xsp;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_revokeGrant_5847_7_206()
 {
    if (jj_scan_token(TEMPORARY)) return true;
    return false;
  }

  private boolean jj_3R_revokeGrant_5845_7_205()
 {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_unescapedFunction_4228_83_95()
 {
    if (jj_3R_orderedAgg_2269_9_168()) return true;
    return false;
  }

  private boolean jj_3R_unsignedValueExpressionPrimary_4301_5_469()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unsignedValueExpressionPrimary_4303_17_494()) {
    jj_scanpos = xsp;
    if (jj_3R_unsignedValueExpressionPrimary_4306_17_495()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_unsignedValueExpressionPrimary_4314_17_496()) {
    jj_scanpos = xsp;
    if (jj_3R_unsignedValueExpressionPrimary_4322_17_497()) {
    jj_scanpos = xsp;
    if (jj_3R_unsignedValueExpressionPrimary_4328_17_498()) {
    jj_scanpos = xsp;
    if (jj_3R_unsignedValueExpressionPrimary_4330_17_499()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3R_unsignedValueExpressionPrimary_4336_17_500()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_revokeGrant_5832_9_273()
 {
    if (jj_3R_readGrantTypes_7126_5_317()) return true;
    return false;
  }

  private boolean jj_3R_revokeGrant_5831_6_204()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_revokeGrant_5832_9_273()) jj_scanpos = xsp;
    if (jj_scan_token(ON)) return true;
    return false;
  }

  private boolean jj_3R_compoundStatement_1221_10_237()
 {
    if (jj_scan_token(EXCEPTION)) return true;
    return false;
  }

  private boolean jj_3R_revokeGrant_5830_5_117()
 {
    if (jj_scan_token(REVOKE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_revokeGrant_5831_6_204()) {
    jj_scanpos = xsp;
    if (jj_3R_revokeGrant_5845_7_205()) {
    jj_scanpos = xsp;
    if (jj_3R_revokeGrant_5847_7_206()) {
    jj_scanpos = xsp;
    if (jj_3R_revokeGrant_5849_7_207()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_compoundStatement_1214_15_289()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_compoundStatement_1214_14_236()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_compoundStatement_1214_15_289()) jj_scanpos = xsp;
    if (jj_scan_token(ATOMIC)) return true;
    return false;
  }

  private boolean jj_3R_unescapedFunction_4230_61_597()
 {
    if (jj_3R_filterClause_2412_9_594()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_statement_1154_5_73()) return true;
    return false;
  }

  private boolean jj_3R_jsonColumn_2745_9_683()
 {
    if (jj_scan_token(PATH)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_compoundStatement_1214_5_141()
 {
    if (jj_scan_token(BEGIN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_compoundStatement_1214_14_236()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_compoundStatement_1221_10_237()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_jsonColumn_2742_9_661()
 {
    if (jj_3R_parseBasicDataType_5129_5_502()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_jsonColumn_2745_9_683()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_nestedExpression_4275_10_548()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_unescapedFunction_4233_46_98()
 {
    if (jj_3R_windowSpecification_4387_9_186()) return true;
    return false;
  }

  private boolean jj_3R_jsonColumn_2737_6_660()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(ORDINALITY)) return true;
    return false;
  }

  private boolean jj_3R_nestedExpression_4268_10_547()
 {
    if (jj_3R_expression_4033_5_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_81()
 {
    if (jj_3R_booleanPrimary_3396_5_133()) return true;
    return false;
  }

  private boolean jj_3R_unescapedFunction_4228_48_94()
 {
    if (jj_3R_aggregateSymbol_2357_9_167()) return true;
    return false;
  }

  private boolean jj_3R_jsonColumn_2735_5_636()
 {
    if (jj_3R_id_703_9_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_jsonColumn_2737_6_660()) {
    jj_scanpos = xsp;
    if (jj_3R_jsonColumn_2742_9_661()) return true;
    }
    return false;
  }

  private boolean jj_3R_delimitedStatement_1193_11_334()
 {
    if (jj_3R_returnStatement_1274_9_370()) return true;
    return false;
  }

  private boolean jj_3R_delimitedStatement_1192_11_333()
 {
    if (jj_3R_branchingStatement_1250_9_369()) return true;
    return false;
  }

  private boolean jj_3R_nestedExpression_4267_5_518()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_nestedExpression_4268_10_547()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_nestedExpression_4275_10_548()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_delimitedStatement_1191_11_332()
 {
    if (jj_3R_declareStatement_1374_5_368()) return true;
    return false;
  }

  private boolean jj_3R_jsonTable_2698_38_659()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_delimitedStatement_1188_11_329()
 {
    if (jj_3R_sqlStatement_1472_5_365()) return true;
    return false;
  }

  private boolean jj_3R_delimitedStatement_1190_7_331()
 {
    if (jj_3R_raiseStatement_1087_5_367()) return true;
    return false;
  }

  private boolean jj_3R_delimitedStatement_1189_7_330()
 {
    if (jj_3R_errorStatement_1066_5_366()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_assignStatement_1408_5_72()) return true;
    return false;
  }

  private boolean jj_3R_delimitedStatement_1187_6_291()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_delimitedStatement_1188_11_329()) {
    jj_scanpos = xsp;
    if (jj_3R_delimitedStatement_1189_7_330()) {
    jj_scanpos = xsp;
    if (jj_3R_delimitedStatement_1190_7_331()) {
    jj_scanpos = xsp;
    if (jj_3R_delimitedStatement_1191_11_332()) {
    jj_scanpos = xsp;
    if (jj_3R_delimitedStatement_1192_11_333()) {
    jj_scanpos = xsp;
    if (jj_3R_delimitedStatement_1193_11_334()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_grant_5784_7_203()
 {
    if (jj_scan_token(USAGE)) return true;
    return false;
  }

  private boolean jj_3R_unescapedFunction_4245_9_189()
 {
    if (jj_scan_token(XMLCAST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_parseDataType_5151_5_440()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_grant_5782_7_202()
 {
    if (jj_scan_token(TEMPORARY)) return true;
    return false;
  }

  private boolean jj_3R_grant_5780_7_201()
 {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_statement_1155_25_68()
 {
    if (jj_3R_id_703_9_75()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_unescapedFunction_4228_21_93()
 {
    if (jj_3R_textAgg_2298_9_166()) return true;
    return false;
  }

  private boolean jj_3R_jsonTable_2698_15_658()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_statement_1166_10_142()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_statement_1167_7_238()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_1168_7_239()) return true;
    }
    return false;
  }

  private boolean jj_3R_jsonTable_2704_6_637()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_jsonColumn_2735_5_636()) return true;
    return false;
  }

  private boolean jj_3R_statement_1168_7_239()
 {
    if (jj_3R_delimitedStatement_1187_6_291()) return true;
    return false;
  }

  private boolean jj_3R_statement_1167_7_238()
 {
    if (jj_3R_ifStatement_1346_5_290()) return true;
    return false;
  }

  private boolean jj_3R_statement_1159_12_71()
 {
    if (jj_3R_compoundStatement_1214_5_141()) return true;
    return false;
  }

  private boolean jj_3R_statement_1158_12_70()
 {
    if (jj_3R_whileStatement_1292_5_140()) return true;
    return false;
  }

  private boolean jj_3R_jsonTable_2698_6_635()
 {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_jsonTable_2698_15_658()) {
    jj_scanpos = xsp;
    if (jj_3R_jsonTable_2698_38_659()) return true;
    }
    return false;
  }

  private boolean jj_3R_statement_1157_12_69()
 {
    if (jj_3R_loopStatement_1316_5_139()) return true;
    return false;
  }

  private boolean jj_3R_grant_5765_9_272()
 {
    if (jj_3R_readGrantTypes_7126_5_317()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_function_4551_9_97()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unescapedFunction_4233_46_98()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_arrayTable_2666_35_657()
 {
    if (jj_scan_token(ROWS)) return true;
    return false;
  }

  private boolean jj_3R_jsonTable_2696_5_83()
 {
    if (jj_scan_token(JSONTABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_valueExpressionPrimary_4175_9_345()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_jsonTable_2698_6_635()) jj_scanpos = xsp;
    if (jj_scan_token(COLUMNS)) return true;
    if (jj_3R_jsonColumn_2735_5_636()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_jsonTable_2704_6_637()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) jj_scanpos = xsp;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_statement_1155_25_68()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_statement_1157_12_69()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_1158_12_70()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_1159_12_71()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_analyticAggregateSymbol_2395_9_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unescapedFunction_4230_61_597()) jj_scanpos = xsp;
    if (jj_3R_windowSpecification_4387_9_186()) return true;
    return false;
  }

  private boolean jj_3R_grant_5764_6_200()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_grant_5765_9_272()) jj_scanpos = xsp;
    if (jj_scan_token(ON)) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unescapedFunction_4228_21_93()) {
    jj_scanpos = xsp;
    if (jj_3R_unescapedFunction_4228_48_94()) {
    jj_scanpos = xsp;
    if (jj_3R_unescapedFunction_4228_83_95()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_unescapedFunction_4228_113_595()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_unescapedFunction_4228_146_596()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_unescapedFunction_4228_5_188()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_unescapedFunction_4228_5_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unescapedFunction_4228_5_188()) {
    jj_scanpos = xsp;
    if (jj_3R_unescapedFunction_4245_9_189()) return true;
    }
    return false;
  }

  private boolean jj_3R_grant_5763_5_116()
 {
    if (jj_scan_token(GRANT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_grant_5764_6_200()) {
    jj_scanpos = xsp;
    if (jj_3R_grant_5780_7_201()) {
    jj_scanpos = xsp;
    if (jj_3R_grant_5782_7_202()) {
    jj_scanpos = xsp;
    if (jj_3R_grant_5784_7_203()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_arrayTable_2666_28_633()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(185)) {
    jj_scanpos = xsp;
    if (jj_3R_arrayTable_2666_35_657()) return true;
    }
    return false;
  }

  private boolean jj_3R_statement_1154_5_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_1166_10_142()) return true;
    }
    return false;
  }

  private boolean jj_3R_parameterReference_4216_5_531()
 {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    return false;
  }

  private boolean jj_3R_parameterReference_4214_5_530()
 {
    if (jj_scan_token(QMARK)) return true;
    return false;
  }

  private boolean jj_3R_parameterReference_4214_5_515()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parameterReference_4214_5_530()) {
    jj_scanpos = xsp;
    if (jj_3R_parameterReference_4216_5_531()) return true;
    }
    return false;
  }

  private boolean jj_3R_xmlSerialize_2628_50_605()
 {
    if (jj_scan_token(CONTENT)) return true;
    return false;
  }

  private boolean jj_3R_xmlSerialize_2635_42_607()
 {
    if (jj_scan_token(EXCLUDING)) return true;
    return false;
  }

  private boolean jj_3R_arrayTable_2666_5_82()
 {
    if (jj_scan_token(ARRAYTABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_arrayTable_2666_28_633()) jj_scanpos = xsp;
    if (jj_3R_valueExpressionPrimary_4175_9_345()) return true;
    if (jj_scan_token(COLUMNS)) return true;
    if (jj_3R_createElementsWithTypes_1629_10_634()) return true;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) jj_scanpos = xsp;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_exception_1127_5_472()
 {
    if (jj_scan_token(SQLEXCEPTION)) return true;
    return false;
  }

  private boolean jj_3R_dropPolicy_5724_5_119()
 {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(POLICY)) return true;
    return false;
  }

  private boolean jj_3R_valueExpressionPrimary_4181_10_501()
 {
    if (jj_scan_token(LSBRACE)) return true;
    if (jj_3R_plusExpression_4081_9_252()) return true;
    if (jj_scan_token(RSBRACE)) return true;
    return false;
  }

  private boolean jj_3R_valueExpressionPrimary_4179_12_429()
 {
    if (jj_3R_unsignedValueExpressionPrimary_4301_5_469()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_valueExpressionPrimary_4181_10_501()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_valueExpressionPrimary_4177_12_428()
 {
    if (jj_3R_unsignedNumericLiteral_5267_17_468()) return true;
    return false;
  }

  private boolean jj_3R_valueExpressionPrimary_4176_12_427()
 {
    if (jj_3R_plusMinus_4107_9_386()) return true;
    return false;
  }

  private boolean jj_3R_xmlSerialize_2628_24_604()
 {
    if (jj_scan_token(DOCUMENT)) return true;
    return false;
  }

  private boolean jj_3R_exceptionReference_1108_9_439()
 {
    if (jj_3R_exception_1127_5_472()) return true;
    return false;
  }

  private boolean jj_3R_valueExpressionPrimary_4176_11_382()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_valueExpressionPrimary_4176_12_427()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_valueExpressionPrimary_4177_12_428()) {
    jj_scanpos = xsp;
    if (jj_3R_valueExpressionPrimary_4179_12_429()) return true;
    }
    return false;
  }

  private boolean jj_3R_exceptionReference_1106_9_438()
 {
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_exceptionReference_1106_9_400()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_exceptionReference_1106_9_438()) {
    jj_scanpos = xsp;
    if (jj_3R_exceptionReference_1108_9_439()) return true;
    }
    return false;
  }

  private boolean jj_3R_valueExpressionPrimary_4175_10_381()
 {
    if (jj_3R_nonNumericLiteral_5210_9_426()) return true;
    return false;
  }

  private boolean jj_3R_valueExpressionPrimary_4175_9_345()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_valueExpressionPrimary_4175_10_381()) {
    jj_scanpos = xsp;
    if (jj_3R_valueExpressionPrimary_4176_11_382()) return true;
    }
    return false;
  }

  private boolean jj_3R_xmlSerialize_2635_13_606()
 {
    if (jj_scan_token(INCLUDING)) return true;
    return false;
  }

  private boolean jj_3R_xmlSerialize_2631_17_585()
 {
    if (jj_scan_token(AS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_xmlSerialize_2635_11_588()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlSerialize_2635_13_606()) {
    jj_scanpos = xsp;
    if (jj_3R_xmlSerialize_2635_42_607()) return true;
    }
    if (jj_scan_token(XMLDECLARATION)) return true;
    return false;
  }

  private boolean jj_3R_xmlSerialize_2634_11_587()
 {
    if (jj_scan_token(VERSION)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_xmlSerialize_2633_11_586()
 {
    if (jj_scan_token(ENCODING)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_xmlSerialize_2628_10_584()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlSerialize_2628_24_604()) {
    jj_scanpos = xsp;
    if (jj_3R_xmlSerialize_2628_50_605()) return true;
    }
    return false;
  }

  private boolean jj_3R_xmlSerialize_2627_9_258()
 {
    if (jj_scan_token(XMLSERIALIZE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlSerialize_2628_10_584()) jj_scanpos = xsp;
    if (jj_3R_expression_4033_5_99()) return true;
    xsp = jj_scanpos;
    if (jj_3R_xmlSerialize_2631_17_585()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlSerialize_2633_11_586()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlSerialize_2634_11_587()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlSerialize_2635_11_588()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_raiseStatement_1088_6_399()
 {
    if (jj_scan_token(SQLWARNING)) return true;
    return false;
  }

  private boolean jj_3R_raiseStatement_1087_5_367()
 {
    if (jj_scan_token(RAISE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_raiseStatement_1088_6_399()) jj_scanpos = xsp;
    if (jj_3R_exceptionReference_1106_9_400()) return true;
    return false;
  }

  private boolean jj_3R_timesOperator_4152_9_430()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(448)) {
    jj_scanpos = xsp;
    if (jj_scan_token(449)) return true;
    }
    return false;
  }

  private boolean jj_3R_timesExpression_4127_25_385()
 {
    if (jj_3R_timesOperator_4152_9_430()) return true;
    if (jj_3R_valueExpressionPrimary_4175_9_345()) return true;
    return false;
  }

  private boolean jj_3R_createPolicy_5681_5_118()
 {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(POLICY)) return true;
    return false;
  }

  private boolean jj_3R_makedepOptions_2602_11_529()
 {
    if (jj_scan_token(NO)) return true;
    return false;
  }

  private boolean jj_3R_makedepOptions_2602_10_514()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_makedepOptions_2602_11_529()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) return true;
    return false;
  }

  private boolean jj_3R_makedepOptions_2601_10_513()
 {
    if (jj_scan_token(MAX)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    return false;
  }

  private boolean jj_3R_errorStatement_1066_5_366()
 {
    if (jj_scan_token(ERROR)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_makedepOptions_2600_3_486()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_makedepOptions_2601_10_513()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_makedepOptions_2602_10_514()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_makedepOptions_2600_2_455()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_makedepOptions_2600_3_486()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_tablePrimary_2580_19_615()
 {
    if (jj_scan_token(MAKENOTDEP)) return true;
    return false;
  }

  private boolean jj_3R_timesExpression_4125_9_307()
 {
    if (jj_3R_valueExpressionPrimary_4175_9_345()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_timesExpression_4127_25_385()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_subqueryFromClause_3227_9_85()) return true;
    return false;
  }

  private boolean jj_3R_tablePrimary_2579_17_614()
 {
    if (jj_scan_token(MAKEDEP)) return true;
    if (jj_3R_makedepOptions_2600_2_455()) return true;
    return false;
  }

  private boolean jj_3R_tablePrimary_2579_17_599()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_tablePrimary_2579_17_614()) {
    jj_scanpos = xsp;
    if (jj_3R_tablePrimary_2580_19_615()) return true;
    }
    return false;
  }

  private boolean jj_3R_tablePrimary_2582_11_600()
 {
    if (jj_scan_token(MAKEIND)) return true;
    if (jj_3R_makedepOptions_2600_2_455()) return true;
    return false;
  }

  private boolean jj_3R_dropRole_5657_5_115()
 {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(ROLE)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_tablePrimary_2572_17_413()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_joinedTable_2484_9_338()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_tablePrimary_2570_17_412()
 {
    if (jj_3R_subqueryFromClause_3227_9_85()) return true;
    return false;
  }

  private boolean jj_3R_tablePrimary_2568_13_411()
 {
    if (jj_3R_unaryFromClause_3260_9_444()) return true;
    return false;
  }

  private boolean jj_3R_plusMinus_4107_9_386()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(450)) {
    jj_scanpos = xsp;
    if (jj_scan_token(451)) return true;
    }
    return false;
  }

  private boolean jj_3R_tableElement_1034_10_67()
 {
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_crossJoin_2510_69_249()
 {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_objectTable_3029_9_84()) return true;
    return false;
  }

  private boolean jj_3R_tablePrimary_2564_13_410()
 {
    if (jj_3R_xmlTable_3114_9_443()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_textTable_2775_9_81()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_jsonTable_2696_5_83()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_arrayTable_2666_5_82()) return true;
    return false;
  }

  private boolean jj_3R_plusExpression_4083_25_356()
 {
    if (jj_3R_plusMinus_4107_9_386()) return true;
    if (jj_3R_timesExpression_4125_9_307()) return true;
    return false;
  }

  private boolean jj_3R_tablePrimary_2558_9_372()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_tablePrimary_2564_13_410()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_tablePrimary_2568_13_411()) {
    jj_scanpos = xsp;
    if (jj_3R_tablePrimary_2570_17_412()) {
    jj_scanpos = xsp;
    if (jj_3R_tablePrimary_2572_17_413()) return true;
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_tablePrimary_2579_17_599()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_tablePrimary_2582_11_600()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_qualifiedJoin_2531_25_250()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_qualifiedJoin_2531_25_300()) {
    jj_scanpos = xsp;
    if (jj_3R_qualifiedJoin_2532_19_301()) {
    jj_scanpos = xsp;
    if (jj_3R_qualifiedJoin_2533_20_302()) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_qualifiedJoin_2531_25_300()
 {
    if (jj_scan_token(RIGHT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(164)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_plusExpression_4081_9_252()
 {
    if (jj_3R_timesExpression_4125_9_307()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_plusExpression_4083_25_356()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_qualifiedJoin_2533_20_302()
 {
    if (jj_scan_token(FULL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(164)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_createRole_5617_5_114()
 {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(ROLE)) return true;
    if (jj_3R_unqualifiedId_684_5_199()) return true;
    return false;
  }

  private boolean jj_3R_qualifiedJoin_2532_19_301()
 {
    if (jj_scan_token(LEFT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(164)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_dropDataWrapper_5597_23_218()
 {
    if (jj_scan_token(DATA)) return true;
    if (jj_scan_token(WRAPPER)) return true;
    return false;
  }

  private boolean jj_3R_commonValueExpression_4056_25_318()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(457)) {
    jj_scanpos = xsp;
    if (jj_scan_token(456)) return true;
    }
    if (jj_3R_plusExpression_4081_9_252()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_tableElement_1034_10_67()) return true;
    return false;
  }

  private boolean jj_3R_qualifiedJoin_2531_9_155()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_qualifiedJoin_2531_25_250()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_tableReference_2459_9_251()) return true;
    if (jj_scan_token(ON)) return true;
    if (jj_3R_criteria_3304_9_187()) return true;
    return false;
  }

  private boolean jj_3R_createTempTable_990_9_65()
 {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) jj_scanpos = xsp;
    if (jj_scan_token(TEMPORARY)) return true;
    return false;
  }

  private boolean jj_3R_dropDataWrapper_5597_5_131()
 {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(FOREIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_dropDataWrapper_5597_23_218()) {
    jj_scanpos = xsp;
    if (jj_scan_token(385)) return true;
    }
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_readGrantTypes_7132_5_355()
 {
    if (jj_scan_token(DROP)) return true;
    return false;
  }

  private boolean jj_3R_readGrantTypes_7131_5_354()
 {
    if (jj_scan_token(ALTER)) return true;
    return false;
  }

  private boolean jj_3R_readGrantTypes_7130_5_353()
 {
    if (jj_scan_token(EXECUTE)) return true;
    return false;
  }

  private boolean jj_3R_readGrantTypes_7129_5_352()
 {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  private boolean jj_3R_crossJoin_2510_18_248()
 {
    if (jj_scan_token(CROSS)) return true;
    return false;
  }

  private boolean jj_3R_commonValueExpression_4054_9_160()
 {
    if (jj_3R_plusExpression_4081_9_252()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_commonValueExpression_4056_25_318()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_readGrantTypes_7128_5_351()
 {
    if (jj_scan_token(UPDATE)) return true;
    return false;
  }

  private boolean jj_3R_readGrantTypes_7127_5_350()
 {
    if (jj_scan_token(INSERT)) return true;
    return false;
  }

  private boolean jj_3R_readGrantTypes_7126_5_317()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_readGrantTypes_7126_5_349()) {
    jj_scanpos = xsp;
    if (jj_3R_readGrantTypes_7127_5_350()) {
    jj_scanpos = xsp;
    if (jj_3R_readGrantTypes_7128_5_351()) {
    jj_scanpos = xsp;
    if (jj_3R_readGrantTypes_7129_5_352()) {
    jj_scanpos = xsp;
    if (jj_3R_readGrantTypes_7130_5_353()) {
    jj_scanpos = xsp;
    if (jj_3R_readGrantTypes_7131_5_354()) {
    jj_scanpos = xsp;
    if (jj_3R_readGrantTypes_7132_5_355()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_readGrantTypes_7126_5_349()
 {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_createDataWrapper_5569_25_216()
 {
    if (jj_scan_token(DATA)) return true;
    if (jj_scan_token(WRAPPER)) return true;
    return false;
  }

  private boolean jj_3R_crossJoin_2510_9_154()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_crossJoin_2510_18_248()) {
    jj_scanpos = xsp;
    if (jj_3R_crossJoin_2510_69_249()) return true;
    }
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_tablePrimary_2558_9_372()) return true;
    return false;
  }

  private boolean jj_3R_joinedTable_2487_27_80()
 {
    if (jj_3R_qualifiedJoin_2531_9_155()) return true;
    return false;
  }

  private boolean jj_3R_dropTable_968_9_245()
 {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  private boolean jj_3R_createDataWrapper_5575_7_217()
 {
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  private boolean jj_3R_joinedTable_2486_25_79()
 {
    if (jj_3R_crossJoin_2510_9_154()) return true;
    return false;
  }

  private boolean jj_3R_createDataWrapper_5569_5_130()
 {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(FOREIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_createDataWrapper_5569_25_216()) {
    jj_scanpos = xsp;
    if (jj_scan_token(385)) return true;
    }
    if (jj_3R_unqualifiedId_684_5_199()) return true;
    xsp = jj_scanpos;
    if (jj_3R_createDataWrapper_5575_7_217()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_expression_4033_5_99()
 {
    if (jj_3R_criteria_3304_9_187()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_joinedTable_2486_25_79()) {
    jj_scanpos = xsp;
    if (jj_3R_joinedTable_2487_27_80()) return true;
    }
    return false;
  }

  private boolean jj_3R_userCommand_949_9_151()
 {
    if (jj_3R_compoundStatement_1214_5_141()) return true;
    return false;
  }

  private boolean jj_3R_joinedTable_2484_9_338()
 {
    if (jj_3R_tablePrimary_2558_9_372()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_option_4009_18_487()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_userCommand_948_9_150()
 {
    if (jj_3R_createTrigger_751_9_111()) return true;
    return false;
  }

  private boolean jj_3R_userCommand_947_9_149()
 {
    if (jj_3R_alter_793_9_246()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_createForeignTempTable_6235_9_66()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_createTempTable_990_9_65()) return true;
    return false;
  }

  private boolean jj_3R_importDatabase_7089_5_123()
 {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_scan_token(DATABASE)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_option_4005_18_459()
 {
    if (jj_3R_id_703_9_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_option_4009_18_487()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_userCommand_944_9_148()
 {
    if (jj_3R_dropTable_968_9_245()) return true;
    return false;
  }

  private boolean jj_3R_userCommand_943_9_147()
 {
    if (jj_3R_delete_1911_9_244()) return true;
    return false;
  }

  private boolean jj_3R_userCommand_942_9_146()
 {
    if (jj_3R_update_1868_9_243()) return true;
    return false;
  }

  private boolean jj_3R_option_4004_17_425()
 {
    if (jj_scan_token(NOCACHE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_option_4005_18_459()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_userCommand_941_9_145()
 {
    if (jj_3R_insert_1801_9_242()) return true;
    return false;
  }

  private boolean jj_3R_userCommand_940_9_144()
 {
    if (jj_3R_storedProcedure_1714_9_241()) return true;
    return false;
  }

  private boolean jj_3R_userCommand_939_10_143()
 {
    if (jj_3R_queryExpression_1945_9_240()) return true;
    return false;
  }

  private boolean jj_3R_userCommand_939_9_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_userCommand_939_10_143()) {
    jj_scanpos = xsp;
    if (jj_3R_userCommand_940_9_144()) {
    jj_scanpos = xsp;
    if (jj_3R_userCommand_941_9_145()) {
    jj_scanpos = xsp;
    if (jj_3R_userCommand_942_9_146()) {
    jj_scanpos = xsp;
    if (jj_3R_userCommand_943_9_147()) {
    jj_scanpos = xsp;
    if (jj_3R_userCommand_944_9_148()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_userCommand_947_9_149()) {
    jj_scanpos = xsp;
    if (jj_3R_userCommand_948_9_150()) {
    jj_scanpos = xsp;
    if (jj_3R_userCommand_949_9_151()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_tableReference_2466_17_304()
 {
    if (jj_3R_joinedTable_2484_9_338()) return true;
    return false;
  }

  private boolean jj_3R_option_3997_18_458()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_dropSchema_5509_41_275()
 {
    if (jj_scan_token(FOREIGN)) return true;
    return false;
  }

  private boolean jj_3R_createDomain_5544_5_112()
 {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(DOMAIN)) return true;
    return false;
  }

  private boolean jj_3R_tableReference_2460_17_303()
 {
    if (jj_scan_token(ESCAPEDJOIN)) return true;
    if (jj_3R_joinedTable_2484_9_338()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_option_3992_17_424()
 {
    if (jj_scan_token(MAKENOTDEP)) return true;
    if (jj_3R_id_703_9_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_option_3997_18_458()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_option_3986_18_457()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_id_703_9_75()) return true;
    if (jj_3R_makedepOptions_2600_2_455()) return true;
    return false;
  }

  private boolean jj_3R_tableReference_2459_9_251()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_tableReference_2460_17_303()) {
    jj_scanpos = xsp;
    if (jj_3R_tableReference_2466_17_304()) return true;
    }
    return false;
  }

  private boolean jj_3R_importSchema_7058_15_211()
 {
    if (jj_scan_token(FOREIGN)) return true;
    return false;
  }

  private boolean jj_3R_option_3981_17_423()
 {
    if (jj_scan_token(MAKEIND)) return true;
    if (jj_3R_id_703_9_75()) return true;
    if (jj_3R_makedepOptions_2600_2_455()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_option_3986_18_457()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_useSchema_5525_5_127()
 {
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(SCHEMA)) return true;
    return false;
  }

  private boolean jj_3R_option_3975_18_456()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_id_703_9_75()) return true;
    if (jj_3R_makedepOptions_2600_2_455()) return true;
    return false;
  }

  private boolean jj_3R_explainOption_916_7_138()
 {
    if (jj_scan_token(FORMAT)) return true;
    return false;
  }

  private boolean jj_3R_importSchema_7058_5_122()
 {
    if (jj_scan_token(IMPORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_importSchema_7058_15_211()) jj_scanpos = xsp;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_from_2436_18_525()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_tableReference_2459_9_251()) return true;
    return false;
  }

  private boolean jj_3R_explainOption_912_7_137()
 {
    if (jj_scan_token(ANALYZE)) return true;
    return false;
  }

  private boolean jj_3R_explainOption_912_7_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_explainOption_912_7_137()) {
    jj_scanpos = xsp;
    if (jj_3R_explainOption_916_7_138()) return true;
    }
    return false;
  }

  private boolean jj_3R_option_3970_17_380()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_option_3970_17_422()) {
    jj_scanpos = xsp;
    if (jj_3R_option_3981_17_423()) {
    jj_scanpos = xsp;
    if (jj_3R_option_3992_17_424()) {
    jj_scanpos = xsp;
    if (jj_3R_option_4004_17_425()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_option_3970_17_422()
 {
    if (jj_scan_token(MAKEDEP)) return true;
    if (jj_3R_id_703_9_75()) return true;
    if (jj_3R_makedepOptions_2600_2_455()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_option_3975_18_456()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_dropSchema_5509_13_212()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_dropSchema_5509_13_274()) {
    jj_scanpos = xsp;
    if (jj_3R_dropSchema_5509_41_275()) return true;
    }
    return false;
  }

  private boolean jj_3R_dropSchema_5509_13_274()
 {
    if (jj_scan_token(VIRTUAL)) return true;
    return false;
  }

  private boolean jj_3R_fetchLimit_3946_33_485()
 {
    if (jj_3R_intParam_3891_4_451()) return true;
    return false;
  }

  private boolean jj_3R_dropSchema_5509_5_126()
 {
    if (jj_scan_token(DROP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_dropSchema_5509_13_212()) jj_scanpos = xsp;
    if (jj_scan_token(SCHEMA)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_option_3968_9_344()
 {
    if (jj_scan_token(OPTION)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_option_3970_17_380()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_from_2429_9_508()
 {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_tableReference_2459_9_251()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_from_2436_18_525()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_explainOption_912_7_64()) return true;
    return false;
  }

  private boolean jj_3R_filterClause_2412_9_594()
 {
    if (jj_scan_token(FILTER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_booleanPrimary_3396_5_133()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_fetchLimit_3946_5_454()
 {
    if (jj_scan_token(FETCH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(326)) {
    jj_scanpos = xsp;
    if (jj_scan_token(328)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_fetchLimit_3946_33_485()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(185)) {
    jj_scanpos = xsp;
    if (jj_scan_token(186)) return true;
    }
    if (jj_scan_token(ONLY)) return true;
    return false;
  }

  private boolean jj_3R_createSchema_5466_15_213()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_createSchema_5466_15_276()) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    return false;
  }

  private boolean jj_3R_createSchema_5466_15_276()
 {
    if (jj_scan_token(VIRTUAL)) return true;
    return false;
  }

  private boolean jj_3R_sortSpecification_3842_101_480()
 {
    if (jj_scan_token(LAST)) return true;
    return false;
  }

  private boolean jj_3R_analyticAggregateSymbol_2395_9_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(302)) {
    jj_scanpos = xsp;
    if (jj_scan_token(303)) {
    jj_scanpos = xsp;
    if (jj_scan_token(304)) {
    jj_scanpos = xsp;
    if (jj_scan_token(305)) {
    jj_scanpos = xsp;
    if (jj_scan_token(306)) return true;
    }
    }
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_createSchema_5466_5_128()
 {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_createSchema_5466_15_213()) jj_scanpos = xsp;
    if (jj_scan_token(SCHEMA)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_limit_3925_9_419()
 {
    if (jj_scan_token(OFFSET)) return true;
    if (jj_3R_intParam_3891_4_451()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(185)) {
    jj_scanpos = xsp;
    if (jj_scan_token(186)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_limit_3926_6_453()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_limit_3928_5_420()
 {
    if (jj_3R_fetchLimit_3946_5_454()) return true;
    return false;
  }

  private boolean jj_3R_limit_3926_6_453()
 {
    if (jj_3R_fetchLimit_3946_5_454()) return true;
    return false;
  }

  private boolean jj_3R_aggregateSymbol_2367_27_678()
 {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_aggregateSymbol_2367_27_648()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_aggregateSymbol_2367_27_678()) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    return false;
  }

  private boolean jj_3R_limit_3917_10_484()
 {
    if (jj_scan_token(OFFSET)) return true;
    if (jj_3R_intParam_3891_4_451()) return true;
    return false;
  }

  private boolean jj_3R_limit_3916_10_483()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_intParam_3891_4_451()) return true;
    return false;
  }

  private boolean jj_3R_limit_3916_10_452()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_limit_3916_10_483()) {
    jj_scanpos = xsp;
    if (jj_3R_limit_3917_10_484()) return true;
    }
    return false;
  }

  private boolean jj_3R_limit_3915_6_418()
 {
    if (jj_scan_token(LIMIT)) return true;
    if (jj_3R_intParam_3891_4_451()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_limit_3916_10_452()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_limit_3914_5_377()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_limit_3915_6_418()) {
    jj_scanpos = xsp;
    if (jj_3R_limit_3925_9_419()) {
    jj_scanpos = xsp;
    if (jj_3R_limit_3928_5_420()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_aggregateSymbol_2365_17_253()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(301)) {
    jj_scanpos = xsp;
    if (jj_scan_token(300)) {
    jj_scanpos = xsp;
    if (jj_scan_token(311)) {
    jj_scanpos = xsp;
    if (jj_scan_token(312)) {
    jj_scanpos = xsp;
    if (jj_scan_token(313)) {
    jj_scanpos = xsp;
    if (jj_scan_token(314)) {
    jj_scanpos = xsp;
    if (jj_scan_token(315)) {
    jj_scanpos = xsp;
    if (jj_scan_token(316)) {
    jj_scanpos = xsp;
    if (jj_scan_token(317)) {
    jj_scanpos = xsp;
    if (jj_scan_token(318)) {
    jj_scanpos = xsp;
    if (jj_scan_token(319)) {
    jj_scanpos = xsp;
    if (jj_scan_token(197)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_aggregateSymbol_2367_27_648()) jj_scanpos = xsp;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(301)) {
    jj_scanpos = xsp;
    if (jj_scan_token(300)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STAR)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_alter_816_19_298()
 {
    if (jj_scan_token(TRIGGER)) return true;
    return false;
  }

  private boolean jj_3R_aggregateSymbol_2357_9_167()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_aggregateSymbol_2365_17_253()) return true;
    }
    return false;
  }

  private boolean jj_3R_intParam_3896_4_482()
 {
    if (jj_3R_unsignedValueExpressionPrimary_4301_5_469()) return true;
    return false;
  }

  private boolean jj_3R_useDatabase_5426_5_125()
 {
    if (jj_scan_token(USE)) return true;
    if (jj_scan_token(DATABASE)) return true;
    return false;
  }

  private boolean jj_3R_intParam_3891_4_481()
 {
    if (jj_3R_intVal_3204_9_512()) return true;
    return false;
  }

  private boolean jj_3R_intParam_3891_4_451()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_intParam_3891_4_481()) {
    jj_scanpos = xsp;
    if (jj_3R_intParam_3896_4_482()) return true;
    }
    return false;
  }

  private boolean jj_3R_alter_805_19_297()
 {
    if (jj_scan_token(PROCEDURE)) return true;
    return false;
  }

  private boolean jj_3R_alter_795_17_296()
 {
    if (jj_scan_token(VIEW)) return true;
    return false;
  }

  private boolean jj_3R_textAgg_2327_17_623()
 {
    if (jj_3R_orderby_3812_9_376()) return true;
    return false;
  }

  private boolean jj_3R_alter_793_9_246()
 {
    if (jj_scan_token(ALTER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_alter_795_17_296()) {
    jj_scanpos = xsp;
    if (jj_3R_alter_805_19_297()) {
    jj_scanpos = xsp;
    if (jj_3R_alter_816_19_298()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_textAgg_2323_11_622()
 {
    if (jj_scan_token(ENCODING)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_sortKey_3862_5_448()
 {
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_alterOptionsList_6934_3_287()
 {
    if (jj_scan_token(OPTIONS)) return true;
    return false;
  }

  private boolean jj_3R_textAgg_2319_11_621()
 {
    if (jj_scan_token(HEADER)) return true;
    return false;
  }

  private boolean jj_3R_createDatabase_5394_5_124()
 {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(DATABASE)) return true;
    return false;
  }

  private boolean jj_3R_textAgg_2316_11_647()
 {
    if (jj_scan_token(NO)) return true;
    if (jj_scan_token(QUOTE)) return true;
    return false;
  }

  private boolean jj_3R_sortSpecification_3842_19_479()
 {
    if (jj_scan_token(FIRST)) return true;
    return false;
  }

  private boolean jj_3R_textAgg_2314_11_646()
 {
    if (jj_scan_token(QUOTE)) return true;
    if (jj_3R_charVal_3633_9_470()) return true;
    return false;
  }

  private boolean jj_3R_textAgg_2314_11_620()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_textAgg_2314_11_646()) {
    jj_scanpos = xsp;
    if (jj_3R_textAgg_2316_11_647()) return true;
    }
    return false;
  }

  private boolean jj_3R_sortSpecification_3841_18_478()
 {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  private boolean jj_3R_textAgg_2310_11_619()
 {
    if (jj_scan_token(DELIMITER)) return true;
    if (jj_3R_charVal_3633_9_470()) return true;
    return false;
  }

  private boolean jj_3R_alterDatabase_6920_5_269()
 {
    if (jj_scan_token(DATABASE)) return true;
    if (jj_3R_id_703_9_75()) return true;
    if (jj_3R_alterOptionsList_6934_3_287()) return true;
    return false;
  }

  private boolean jj_3R_sortSpecification_3842_10_450()
 {
    if (jj_scan_token(NULLS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_sortSpecification_3842_19_479()) {
    jj_scanpos = xsp;
    if (jj_3R_sortSpecification_3842_101_480()) return true;
    }
    return false;
  }

  private boolean jj_3R_sortSpecification_3841_10_449()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_sortSpecification_3841_18_478()) return true;
    }
    return false;
  }

  private boolean jj_3R_createTrigger_751_29_198()
 {
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_createNameSpace_5376_9_109()
 {
    if (jj_scan_token(SET)) return true;
    if (jj_scan_token(NAMESPACE)) return true;
    return false;
  }

  private boolean jj_3R_sortSpecification_3840_9_416()
 {
    if (jj_3R_sortKey_3862_5_448()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_sortSpecification_3841_10_449()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_sortSpecification_3842_10_450()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_textAgg_2303_10_618()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_3R_createTable_6126_5_108()) return true;
    return false;
  }

  private boolean jj_3R_textAgg_2298_9_166()
 {
    if (jj_scan_token(TEXTAGG)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) jj_scanpos = xsp;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_textAgg_2303_10_618()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_textAgg_2310_11_619()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_textAgg_2314_11_620()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_textAgg_2319_11_621()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_textAgg_2323_11_622()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_textAgg_2327_17_623()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_alterTranslator_6906_6_316()
 {
    if (jj_scan_token(DATA)) return true;
    if (jj_scan_token(WRAPPER)) return true;
    return false;
  }

  private boolean jj_3R_alterTranslator_6906_5_268()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_alterTranslator_6906_6_316()) {
    jj_scanpos = xsp;
    if (jj_scan_token(385)) return true;
    }
    if (jj_3R_id_703_9_75()) return true;
    if (jj_3R_alterOptionsList_6934_3_287()) return true;
    return false;
  }

  private boolean jj_3_80()
 {
    if (jj_3R_dropProcedure_6028_9_132()) return true;
    return false;
  }

  private boolean jj_3_79()
 {
    if (jj_3R_dropDataWrapper_5597_5_131()) return true;
    return false;
  }

  private boolean jj_3R_createTrigger_751_9_111()
 {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(TRIGGER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_createTrigger_751_29_198()) jj_scanpos = xsp;
    if (jj_scan_token(ON)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3_78()
 {
    if (jj_3R_createDataWrapper_5569_5_130()) return true;
    return false;
  }

  private boolean jj_3_73()
 {
    if (jj_3R_useDatabase_5426_5_125()) return true;
    return false;
  }

  private boolean jj_3_77()
 {
    if (jj_3R_createDDLProcedure_5961_5_129()) return true;
    return false;
  }

  private boolean jj_3_76()
 {
    if (jj_3R_createSchema_5466_5_128()) return true;
    return false;
  }

  private boolean jj_3R_orderby_3817_10_417()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_sortSpecification_3840_9_416()) return true;
    return false;
  }

  private boolean jj_3_72()
 {
    if (jj_3R_createDatabase_5394_5_124()) return true;
    return false;
  }

  private boolean jj_3_75()
 {
    if (jj_3R_useSchema_5525_5_127()) return true;
    return false;
  }

  private boolean jj_3R_alterServer_6892_5_267()
 {
    if (jj_scan_token(SERVER)) return true;
    if (jj_3R_id_703_9_75()) return true;
    if (jj_3R_alterOptionsList_6934_3_287()) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_3R_importDatabase_7089_5_123()) return true;
    return false;
  }

  private boolean jj_3_74()
 {
    if (jj_3R_dropSchema_5509_5_126()) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    if (jj_3R_importSchema_7058_5_122()) return true;
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_3R_dropTableView_6211_9_121()) return true;
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_3R_dropServer_5932_5_120()) return true;
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_3R_dropPolicy_5724_5_119()) return true;
    return false;
  }

  private boolean jj_3R_orderby_3812_9_376()
 {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_sortSpecification_3840_9_416()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_orderby_3817_10_417()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_66()
 {
    if (jj_3R_createPolicy_5681_5_118()) return true;
    return false;
  }

  private boolean jj_3_65()
 {
    if (jj_3R_revokeGrant_5830_5_117()) return true;
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_3R_grant_5763_5_116()) return true;
    return false;
  }

  private boolean jj_3R_orderedAgg_2272_11_624()
 {
    if (jj_3R_orderby_3812_9_376()) return true;
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_3R_dropRole_5657_5_115()) return true;
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_3R_createRole_5617_5_114()) return true;
    return false;
  }

  private boolean jj_3_61()
 {
    if (jj_3R_createServer_5886_5_113()) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_3R_createDomain_5544_5_112()) return true;
    return false;
  }

  private boolean jj_3R_nonReserved_651_92_299()
 {
    if (jj_3R_basicNonReserved_661_5_337()) return true;
    return false;
  }

  private boolean jj_3R_orderedAgg_2269_9_168()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(261)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(375)) return true;
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    xsp = jj_scanpos;
    if (jj_3R_orderedAgg_2272_11_624()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_3R_createTrigger_751_9_111()) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_3R_alterStatement_6654_5_110()) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_3R_createNameSpace_5376_9_109()) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_3R_createTable_6126_5_108()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_createProcedure_1493_5_63()) return true;
    return false;
  }

  private boolean jj_3R_alterTrigger_6871_5_266()
 {
    if (jj_scan_token(TRIGGER)) return true;
    if (jj_scan_token(ON)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_having_3794_5_528()
 {
    if (jj_scan_token(HAVING)) return true;
    if (jj_3R_criteria_3304_9_187()) return true;
    return false;
  }

  private boolean jj_3R_allInGroupSymbol_2251_9_555()
 {
    if (jj_scan_token(ALL_IN_GROUP)) return true;
    return false;
  }

  private boolean jj_3R_id_711_11_153()
 {
    if (jj_3R_nonReserved_651_5_247()) return true;
    return false;
  }

  private boolean jj_3R_alterProcedure_6855_5_315()
 {
    if (jj_scan_token(RENAME)) return true;
    return false;
  }

  private boolean jj_3R_alterProcedure_6854_5_314()
 {
    if (jj_scan_token(ALTER)) return true;
    return false;
  }

  private boolean jj_3R_alterProcedure_6843_16_348()
 {
    if (jj_scan_token(FOREIGN)) return true;
    return false;
  }

  private boolean jj_3R_alterProcedure_6853_5_313()
 {
    if (jj_3R_alterOptionsList_6934_3_287()) return true;
    return false;
  }

  private boolean jj_3R_derivedColumn_2233_18_397()
 {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_id_703_9_152()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_id_703_9_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_id_703_9_152()) {
    jj_scanpos = xsp;
    if (jj_3R_id_711_11_153()) return true;
    }
    return false;
  }

  private boolean jj_3R_groupBy_3775_6_546()
 {
    if (jj_3R_expressionList_1838_9_379()) return true;
    return false;
  }

  private boolean jj_3R_unsignedNumericLiteral_5294_22_493()
 {
    if (jj_scan_token(DECIMALVAL)) return true;
    return false;
  }

  private boolean jj_3R_alterProcedure_6844_6_312()
 {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3R_alterProcedure_6843_6_311()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(224)) {
    jj_scanpos = xsp;
    if (jj_3R_alterProcedure_6843_16_348()) return true;
    }
    return false;
  }

  private boolean jj_3R_groupBy_3768_10_545()
 {
    if (jj_scan_token(ROLLUP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expressionList_1838_9_379()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_unsignedNumericLiteral_5286_27_492()
 {
    if (jj_scan_token(FLOATVAL)) return true;
    return false;
  }

  private boolean jj_3R_alterProcedure_6843_5_265()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_alterProcedure_6843_6_311()) jj_scanpos = xsp;
    if (jj_scan_token(PROCEDURE)) return true;
    if (jj_3R_id_703_9_75()) return true;
    xsp = jj_scanpos;
    if (jj_3R_alterProcedure_6844_6_312()) {
    jj_scanpos = xsp;
    if (jj_3R_alterProcedure_6853_5_313()) {
    jj_scanpos = xsp;
    if (jj_3R_alterProcedure_6854_5_314()) {
    jj_scanpos = xsp;
    if (jj_3R_alterProcedure_6855_5_315()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_groupBy_3767_9_527()
 {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_groupBy_3768_10_545()) {
    jj_scanpos = xsp;
    if (jj_3R_groupBy_3775_6_546()) return true;
    }
    return false;
  }

  private boolean jj_3R_derivedColumn_2230_9_362()
 {
    if (jj_3R_expression_4033_5_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_derivedColumn_2233_18_397()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_unqualifiedId_688_7_271()
 {
    if (jj_3R_nonReserved_651_5_247()) return true;
    return false;
  }

  private boolean jj_3R_selectExpression_2209_18_573()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) jj_scanpos = xsp;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_unqualifiedId_684_5_199()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unqualifiedId_684_5_270()) {
    jj_scanpos = xsp;
    if (jj_3R_unqualifiedId_688_7_271()) return true;
    }
    return false;
  }

  private boolean jj_3R_unqualifiedId_684_5_270()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_existsCriteria_3746_9_281()
 {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_3R_subquery_3502_9_92()) return true;
    return false;
  }

  private boolean jj_3R_selectExpression_2206_9_554()
 {
    if (jj_3R_expression_4033_5_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_selectExpression_2209_18_573()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_unsignedNumericLiteral_5267_18_491()
 {
    if (jj_scan_token(UNSIGNEDINTEGER)) return true;
    return false;
  }

  private boolean jj_3R_unsignedNumericLiteral_5267_17_468()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unsignedNumericLiteral_5267_18_491()) {
    jj_scanpos = xsp;
    if (jj_3R_unsignedNumericLiteral_5286_27_492()) {
    jj_scanpos = xsp;
    if (jj_3R_unsignedNumericLiteral_5294_22_493()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_selectSymbol_2188_17_544()
 {
    if (jj_3R_allInGroupSymbol_2251_9_555()) return true;
    return false;
  }

  private boolean jj_3R_setCrit_3713_27_433()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    return false;
  }

  private boolean jj_3R_selectSymbol_2186_17_543()
 {
    if (jj_3R_selectExpression_2206_9_554()) return true;
    return false;
  }

  private boolean jj_3R_basicNonReserved_661_5_337()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(293)) {
    jj_scanpos = xsp;
    if (jj_scan_token(296)) {
    jj_scanpos = xsp;
    if (jj_scan_token(294)) {
    jj_scanpos = xsp;
    if (jj_scan_token(295)) {
    jj_scanpos = xsp;
    if (jj_scan_token(297)) {
    jj_scanpos = xsp;
    if (jj_scan_token(299)) {
    jj_scanpos = xsp;
    if (jj_scan_token(301)) {
    jj_scanpos = xsp;
    if (jj_scan_token(300)) {
    jj_scanpos = xsp;
    if (jj_scan_token(302)) {
    jj_scanpos = xsp;
    if (jj_scan_token(303)) {
    jj_scanpos = xsp;
    if (jj_scan_token(304)) {
    jj_scanpos = xsp;
    if (jj_scan_token(311)) {
    jj_scanpos = xsp;
    if (jj_scan_token(312)) {
    jj_scanpos = xsp;
    if (jj_scan_token(313)) {
    jj_scanpos = xsp;
    if (jj_scan_token(314)) {
    jj_scanpos = xsp;
    if (jj_scan_token(315)) {
    jj_scanpos = xsp;
    if (jj_scan_token(316)) {
    jj_scanpos = xsp;
    if (jj_scan_token(317)) {
    jj_scanpos = xsp;
    if (jj_scan_token(318)) {
    jj_scanpos = xsp;
    if (jj_scan_token(319)) {
    jj_scanpos = xsp;
    if (jj_scan_token(320)) {
    jj_scanpos = xsp;
    if (jj_scan_token(321)) {
    jj_scanpos = xsp;
    if (jj_scan_token(322)) {
    jj_scanpos = xsp;
    if (jj_scan_token(323)) {
    jj_scanpos = xsp;
    if (jj_scan_token(324)) {
    jj_scanpos = xsp;
    if (jj_scan_token(325)) {
    jj_scanpos = xsp;
    if (jj_scan_token(326)) {
    jj_scanpos = xsp;
    if (jj_scan_token(327)) {
    jj_scanpos = xsp;
    if (jj_scan_token(328)) {
    jj_scanpos = xsp;
    if (jj_scan_token(329)) {
    jj_scanpos = xsp;
    if (jj_scan_token(330)) {
    jj_scanpos = xsp;
    if (jj_scan_token(331)) {
    jj_scanpos = xsp;
    if (jj_scan_token(332)) {
    jj_scanpos = xsp;
    if (jj_scan_token(333)) {
    jj_scanpos = xsp;
    if (jj_scan_token(334)) {
    jj_scanpos = xsp;
    if (jj_scan_token(335)) {
    jj_scanpos = xsp;
    if (jj_scan_token(336)) {
    jj_scanpos = xsp;
    if (jj_scan_token(337)) {
    jj_scanpos = xsp;
    if (jj_scan_token(339)) {
    jj_scanpos = xsp;
    if (jj_scan_token(340)) {
    jj_scanpos = xsp;
    if (jj_scan_token(341)) {
    jj_scanpos = xsp;
    if (jj_scan_token(342)) {
    jj_scanpos = xsp;
    if (jj_scan_token(343)) {
    jj_scanpos = xsp;
    if (jj_scan_token(344)) {
    jj_scanpos = xsp;
    if (jj_scan_token(345)) {
    jj_scanpos = xsp;
    if (jj_scan_token(346)) {
    jj_scanpos = xsp;
    if (jj_scan_token(347)) {
    jj_scanpos = xsp;
    if (jj_scan_token(348)) {
    jj_scanpos = xsp;
    if (jj_scan_token(349)) {
    jj_scanpos = xsp;
    if (jj_scan_token(350)) {
    jj_scanpos = xsp;
    if (jj_scan_token(351)) {
    jj_scanpos = xsp;
    if (jj_scan_token(352)) {
    jj_scanpos = xsp;
    if (jj_scan_token(353)) {
    jj_scanpos = xsp;
    if (jj_scan_token(354)) {
    jj_scanpos = xsp;
    if (jj_scan_token(355)) {
    jj_scanpos = xsp;
    if (jj_scan_token(356)) {
    jj_scanpos = xsp;
    if (jj_scan_token(357)) {
    jj_scanpos = xsp;
    if (jj_scan_token(358)) {
    jj_scanpos = xsp;
    if (jj_scan_token(359)) {
    jj_scanpos = xsp;
    if (jj_scan_token(360)) {
    jj_scanpos = xsp;
    if (jj_scan_token(361)) {
    jj_scanpos = xsp;
    if (jj_scan_token(362)) {
    jj_scanpos = xsp;
    if (jj_scan_token(363)) {
    jj_scanpos = xsp;
    if (jj_scan_token(364)) {
    jj_scanpos = xsp;
    if (jj_scan_token(365)) {
    jj_scanpos = xsp;
    if (jj_scan_token(366)) {
    jj_scanpos = xsp;
    if (jj_scan_token(367)) {
    jj_scanpos = xsp;
    if (jj_scan_token(368)) {
    jj_scanpos = xsp;
    if (jj_scan_token(369)) {
    jj_scanpos = xsp;
    if (jj_scan_token(370)) {
    jj_scanpos = xsp;
    if (jj_scan_token(372)) {
    jj_scanpos = xsp;
    if (jj_scan_token(373)) {
    jj_scanpos = xsp;
    if (jj_scan_token(375)) {
    jj_scanpos = xsp;
    if (jj_scan_token(376)) {
    jj_scanpos = xsp;
    if (jj_scan_token(377)) {
    jj_scanpos = xsp;
    if (jj_scan_token(380)) {
    jj_scanpos = xsp;
    if (jj_scan_token(381)) {
    jj_scanpos = xsp;
    if (jj_scan_token(384)) {
    jj_scanpos = xsp;
    if (jj_scan_token(385)) {
    jj_scanpos = xsp;
    if (jj_scan_token(386)) {
    jj_scanpos = xsp;
    if (jj_scan_token(387)) {
    jj_scanpos = xsp;
    if (jj_scan_token(388)) {
    jj_scanpos = xsp;
    if (jj_scan_token(389)) {
    jj_scanpos = xsp;
    if (jj_scan_token(390)) {
    jj_scanpos = xsp;
    if (jj_scan_token(391)) {
    jj_scanpos = xsp;
    if (jj_scan_token(392)) {
    jj_scanpos = xsp;
    if (jj_scan_token(393)) {
    jj_scanpos = xsp;
    if (jj_scan_token(394)) {
    jj_scanpos = xsp;
    if (jj_scan_token(396)) {
    jj_scanpos = xsp;
    if (jj_scan_token(395)) {
    jj_scanpos = xsp;
    if (jj_scan_token(397)) {
    jj_scanpos = xsp;
    if (jj_scan_token(400)) {
    jj_scanpos = xsp;
    if (jj_scan_token(401)) {
    jj_scanpos = xsp;
    if (jj_scan_token(402)) {
    jj_scanpos = xsp;
    if (jj_scan_token(403)) {
    jj_scanpos = xsp;
    if (jj_scan_token(404)) {
    jj_scanpos = xsp;
    if (jj_scan_token(307)) {
    jj_scanpos = xsp;
    if (jj_scan_token(308)) {
    jj_scanpos = xsp;
    if (jj_scan_token(309)) {
    jj_scanpos = xsp;
    if (jj_scan_token(310)) {
    jj_scanpos = xsp;
    if (jj_scan_token(405)) {
    jj_scanpos = xsp;
    if (jj_scan_token(407)) {
    jj_scanpos = xsp;
    if (jj_scan_token(408)) {
    jj_scanpos = xsp;
    if (jj_scan_token(409)) {
    jj_scanpos = xsp;
    if (jj_scan_token(410)) {
    jj_scanpos = xsp;
    if (jj_scan_token(411)) {
    jj_scanpos = xsp;
    if (jj_scan_token(414)) {
    jj_scanpos = xsp;
    if (jj_scan_token(415)) {
    jj_scanpos = xsp;
    if (jj_scan_token(413)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_subquery_3502_9_92()) return true;
    return false;
  }

  private boolean jj_3R_selectSymbol_2185_9_523()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_selectSymbol_2186_17_543()) {
    jj_scanpos = xsp;
    if (jj_3R_selectSymbol_2188_17_544()) return true;
    }
    return false;
  }

  private boolean jj_3R_nonReserved_651_5_247()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(371)) {
    jj_scanpos = xsp;
    if (jj_scan_token(298)) {
    jj_scanpos = xsp;
    if (jj_scan_token(406)) {
    jj_scanpos = xsp;
    if (jj_scan_token(338)) {
    jj_scanpos = xsp;
    if (jj_scan_token(374)) {
    jj_scanpos = xsp;
    if (jj_scan_token(378)) {
    jj_scanpos = xsp;
    if (jj_scan_token(379)) {
    jj_scanpos = xsp;
    if (jj_scan_token(382)) {
    jj_scanpos = xsp;
    if (jj_3R_nonReserved_651_92_299()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5241_18_490()
 {
    if (jj_scan_token(TIMESTAMP)) return true;
    return false;
  }

  private boolean jj_3R_setCrit_3707_17_390()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_setCrit_3713_27_433()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5240_18_489()
 {
    if (jj_scan_token(TIME)) return true;
    return false;
  }

  private boolean jj_3R_setCrit_3706_17_389()
 {
    if (jj_3R_subquery_3502_9_92()) return true;
    return false;
  }

  private boolean jj_3R_select_2161_25_524()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_selectSymbol_2185_9_523()) return true;
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5239_16_488()
 {
    if (jj_scan_token(DATE)) return true;
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5238_15_467()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_nonNumericLiteral_5239_16_488()) {
    jj_scanpos = xsp;
    if (jj_3R_nonNumericLiteral_5240_18_489()) {
    jj_scanpos = xsp;
    if (jj_3R_nonNumericLiteral_5241_18_490()) return true;
    }
    }
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_stringVal_636_9_325()
 {
    if (jj_scan_token(STRINGVAL)) return true;
    return false;
  }

  private boolean jj_3R_setCrit_3703_10_388()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_select_2160_17_506()
 {
    if (jj_3R_selectSymbol_2185_9_523()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_select_2161_25_524()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_setCrit_3703_9_357()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_setCrit_3703_10_388()) jj_scanpos = xsp;
    if (jj_scan_token(IN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_setCrit_3706_17_389()) {
    jj_scanpos = xsp;
    if (jj_3R_setCrit_3707_17_390()) return true;
    }
    return false;
  }

  private boolean jj_3R_select_2154_18_522()
 {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_alterDropColumn_6767_9_288()
 {
    if (jj_scan_token(DROP)) return true;
    return false;
  }

  private boolean jj_3R_select_2155_10_505()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_select_2154_10_504()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_3R_select_2154_18_522()) return true;
    }
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5216_17_463()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_select_2153_9_475()
 {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_select_2154_10_504()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_select_2155_10_505()) {
    jj_scanpos = xsp;
    if (jj_3R_select_2160_17_506()) return true;
    }
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5215_17_462()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5214_17_461()
 {
    if (jj_scan_token(BINARYSTRINGVAL)) return true;
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5220_9_466()
 {
    if (jj_scan_token(ESCAPEDTYPE)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5211_17_460()
 {
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5218_9_465()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5217_9_464()
 {
    if (jj_scan_token(UNKNOWN)) return true;
    return false;
  }

  private boolean jj_3R_isNullCrit_3678_10_391()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_isNullCrit_3677_9_358()
 {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_isNullCrit_3678_10_391()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_alterAddColumn_6746_9_136()
 {
    if (jj_scan_token(ADD)) return true;
    if (jj_scan_token(COLUMN)) return true;
    return false;
  }

  private boolean jj_3R_nonNumericLiteral_5210_9_426()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_nonNumericLiteral_5211_17_460()) {
    jj_scanpos = xsp;
    if (jj_3R_nonNumericLiteral_5214_17_461()) {
    jj_scanpos = xsp;
    if (jj_3R_nonNumericLiteral_5215_17_462()) {
    jj_scanpos = xsp;
    if (jj_3R_nonNumericLiteral_5216_17_463()) {
    jj_scanpos = xsp;
    if (jj_3R_nonNumericLiteral_5217_9_464()) {
    jj_scanpos = xsp;
    if (jj_3R_nonNumericLiteral_5218_9_465()) {
    jj_scanpos = xsp;
    if (jj_3R_nonNumericLiteral_5220_9_466()) {
    jj_scanpos = xsp;
    if (jj_3R_nonNumericLiteral_5238_15_467()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_into_2133_9_507()
 {
    if (jj_scan_token(INTO)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_alterAddConstraint_6731_5_286()
 {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_betweenCrit_3653_10_159()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_betweenCrit_3653_9_88()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_betweenCrit_3653_10_159()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    return false;
  }

  private boolean jj_3R_queryExpressionBody_2006_116_78()
 {
    if (jj_scan_token(EXCEPT)) return true;
    return false;
  }

  private boolean jj_3R_intervalType_5181_9_563()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(342)) {
    jj_scanpos = xsp;
    if (jj_scan_token(343)) {
    jj_scanpos = xsp;
    if (jj_scan_token(344)) {
    jj_scanpos = xsp;
    if (jj_scan_token(345)) {
    jj_scanpos = xsp;
    if (jj_scan_token(346)) {
    jj_scanpos = xsp;
    if (jj_scan_token(347)) {
    jj_scanpos = xsp;
    if (jj_scan_token(348)) {
    jj_scanpos = xsp;
    if (jj_scan_token(349)) {
    jj_scanpos = xsp;
    if (jj_scan_token(350)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_query_2106_6_511()
 {
    if (jj_3R_having_3794_5_528()) return true;
    return false;
  }

  private boolean jj_3R_query_2102_10_477()
 {
    if (jj_3R_from_2429_9_508()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_query_2104_6_509()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_query_2105_6_510()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_query_2106_6_511()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_query_2105_6_510()
 {
    if (jj_3R_groupBy_3767_9_527()) return true;
    return false;
  }

  private boolean jj_3R_query_2104_6_509()
 {
    if (jj_3R_where_3287_5_526()) return true;
    return false;
  }

  private boolean jj_3R_parseDataType_5156_24_503()
 {
    if (jj_3R_basicNonReserved_661_5_337()) return true;
    return false;
  }

  private boolean jj_3R_query_2101_6_476()
 {
    if (jj_3R_into_2133_9_507()) return true;
    return false;
  }

  private boolean jj_3R_charVal_3633_9_470()
 {
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_query_2100_5_442()
 {
    if (jj_3R_select_2153_9_475()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_query_2101_6_476()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_query_2102_10_477()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_alterTable_6697_7_235()
 {
    if (jj_scan_token(RENAME)) return true;
    return false;
  }

  private boolean jj_3R_parseDataType_5162_6_601()
 {
    if (jj_scan_token(LSBRACE)) return true;
    if (jj_scan_token(RSBRACE)) return true;
    return false;
  }

  private boolean jj_3R_alterTable_6696_7_234()
 {
    if (jj_scan_token(ALTER)) return true;
    return false;
  }

  private boolean jj_3R_alterTable_6695_7_233()
 {
    if (jj_3R_alterDropColumn_6767_9_288()) return true;
    return false;
  }

  private boolean jj_3R_alterTable_6694_7_232()
 {
    if (jj_3R_alterOptionsList_6934_3_287()) return true;
    return false;
  }

  private boolean jj_3R_alterTable_6693_7_231()
 {
    if (jj_3R_alterAddConstraint_6731_5_286()) return true;
    return false;
  }

  private boolean jj_3_85()
 {
    if (jj_3R_alterAddColumn_6746_9_136()) return true;
    return false;
  }

  private boolean jj_3R_parseDataType_5156_5_474()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(419)) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataType_5156_24_503()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseDataType_5162_6_601()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_queryPrimary_2078_9_409()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_queryExpressionBody_2005_9_293()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_regexMatchCrit_3612_10_163()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_parseDataType_5151_5_473()
 {
    if (jj_3R_parseBasicDataType_5129_5_502()) return true;
    return false;
  }

  private boolean jj_3R_parseDataType_5151_5_440()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataType_5151_5_473()) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataType_5156_5_474()) return true;
    }
    return false;
  }

  private boolean jj_3R_regexMatchCrit_3612_9_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_regexMatchCrit_3612_10_163()) jj_scanpos = xsp;
    if (jj_scan_token(LIKE_REGEX)) return true;
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    return false;
  }

  private boolean jj_3R_alterTable_6684_7_230()
 {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3R_alterTable_6681_6_229()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) jj_scanpos = xsp;
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_queryPrimary_2072_9_408()
 {
    if (jj_scan_token(TABLE)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_alterTable_6680_6_228()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(224)) jj_scanpos = xsp;
    if (jj_scan_token(VIEW)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_queryPrimary_2067_12_446()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expressionList_1838_9_379()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_alterTable_6679_5_135()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_alterTable_6680_6_228()) {
    jj_scanpos = xsp;
    if (jj_3R_alterTable_6681_6_229()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_alterTable_6684_7_230()) {
    jj_scanpos = xsp;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3R_alterTable_6693_7_231()) {
    jj_scanpos = xsp;
    if (jj_3R_alterTable_6694_7_232()) {
    jj_scanpos = xsp;
    if (jj_3R_alterTable_6695_7_233()) {
    jj_scanpos = xsp;
    if (jj_3R_alterTable_6696_7_234()) {
    jj_scanpos = xsp;
    if (jj_3R_alterTable_6697_7_235()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5076_68_686()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5077_65_687()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    return false;
  }

  private boolean jj_3R_queryPrimary_2062_9_407()
 {
    if (jj_scan_token(VALUES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expressionList_1838_9_379()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_queryPrimary_2067_12_446()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_queryPrimary_2061_9_406()
 {
    if (jj_3R_query_2100_5_442()) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5093_44_677()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_parseBasicDataType_5130_6_616()
 {
    if (jj_scan_token(LSBRACE)) return true;
    if (jj_scan_token(RSBRACE)) return true;
    return false;
  }

  private boolean jj_3R_alterStatement_6662_9_197()
 {
    if (jj_3R_alterDatabase_6920_5_269()) return true;
    return false;
  }

  private boolean jj_3R_queryPrimary_2060_5_371()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_queryPrimary_2061_9_406()) {
    jj_scanpos = xsp;
    if (jj_3R_queryPrimary_2062_9_407()) {
    jj_scanpos = xsp;
    if (jj_3R_queryPrimary_2072_9_408()) {
    jj_scanpos = xsp;
    if (jj_3R_queryPrimary_2078_9_409()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_alterStatement_6661_9_196()
 {
    if (jj_3R_alterTranslator_6906_5_268()) return true;
    return false;
  }

  private boolean jj_3R_parseBasicDataType_5129_5_502()
 {
    if (jj_3R_parseDataTypePrimary_5060_9_521()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_parseBasicDataType_5130_6_616()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_alterStatement_6660_9_195()
 {
    if (jj_3R_alterServer_6892_5_267()) return true;
    return false;
  }

  private boolean jj_3R_alterStatement_6659_9_194()
 {
    if (jj_3R_alterTrigger_6871_5_266()) return true;
    return false;
  }

  private boolean jj_3R_alterStatement_6658_9_193()
 {
    if (jj_3R_alterProcedure_6843_5_265()) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5091_39_676()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5089_41_674()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_84()
 {
    if (jj_3R_alterTable_6679_5_135()) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5090_39_675()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_matchCrit_3583_9_432()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(ESCAPE)) return true;
    if (jj_3R_charVal_3633_9_470()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_matchCrit_3579_13_162()
 {
    if (jj_scan_token(SIMILAR)) return true;
    if (jj_scan_token(TO)) return true;
    return false;
  }

  private boolean jj_3R_matchCrit_3582_9_387()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_matchCrit_3582_9_431()) {
    jj_scanpos = xsp;
    if (jj_3R_matchCrit_3583_9_432()) return true;
    }
    return false;
  }

  private boolean jj_3R_matchCrit_3582_9_431()
 {
    if (jj_scan_token(ESCAPE)) return true;
    if (jj_3R_charVal_3633_9_470()) return true;
    return false;
  }

  private boolean jj_3R_queryTerm_2036_18_447()
 {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_queryTerm_2036_18_414()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_queryTerm_2036_18_447()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    return false;
  }

  private boolean jj_3R_alterStatement_6654_5_110()
 {
    if (jj_scan_token(ALTER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_84()) {
    jj_scanpos = xsp;
    if (jj_3R_alterStatement_6658_9_193()) {
    jj_scanpos = xsp;
    if (jj_3R_alterStatement_6659_9_194()) {
    jj_scanpos = xsp;
    if (jj_3R_alterStatement_6660_9_195()) {
    jj_scanpos = xsp;
    if (jj_3R_alterStatement_6661_9_196()) {
    jj_scanpos = xsp;
    if (jj_3R_alterStatement_6662_9_197()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5080_43_673()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_matchCrit_3578_10_161()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_queryTerm_2035_17_374()
 {
    if (jj_scan_token(INTERSECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_queryTerm_2036_18_414()) jj_scanpos = xsp;
    if (jj_3R_queryPrimary_2060_5_371()) return true;
    return false;
  }

  private boolean jj_3R_matchCrit_3578_9_89()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_matchCrit_3578_10_161()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_3R_matchCrit_3579_13_162()) return true;
    }
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    xsp = jj_scanpos;
    if (jj_3R_matchCrit_3582_9_387()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5076_44_671()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5076_68_686()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5077_41_672()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5077_65_687()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5072_44_670()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_queryTerm_2034_9_336()
 {
    if (jj_3R_queryPrimary_2060_5_371()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_queryTerm_2035_17_374()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5093_17_542()
 {
    if (jj_scan_token(VARBINARY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5093_44_677()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5091_17_541()
 {
    if (jj_scan_token(CLOB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5091_39_676()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5068_39_669()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5090_17_540()
 {
    if (jj_scan_token(BLOB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5090_39_675()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5089_17_539()
 {
    if (jj_scan_token(OBJECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5089_41_674()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5062_42_668()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5061_41_667()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(OPTION)) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5080_17_538()
 {
    if (jj_scan_token(TIMESTAMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5080_43_673()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_queryExpressionBody_2007_18_375()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_queryExpressionBody_2007_18_415()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    return false;
  }

  private boolean jj_3R_queryExpressionBody_2007_18_415()
 {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5077_17_537()
 {
    if (jj_scan_token(DECIMAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5077_41_672()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_queryExpressionBody_2006_18_77()
 {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_subquery_3502_9_92()) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5076_17_536()
 {
    if (jj_scan_token(BIGDECIMAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5076_44_671()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(2).kind != JOIN;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_queryExpressionBody_2006_18_77()) {
    jj_scanpos = xsp;
    if (jj_3R_queryExpressionBody_2006_116_78()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_queryExpressionBody_2007_18_375()) jj_scanpos = xsp;
    if (jj_3R_queryTerm_2034_9_336()) return true;
    return false;
  }

  private boolean jj_3R_queryExpressionBody_2016_6_342()
 {
    if (jj_3R_option_3968_9_344()) return true;
    return false;
  }

  private boolean jj_3R_queryExpressionBody_2015_6_341()
 {
    if (jj_3R_limit_3914_5_377()) return true;
    return false;
  }

  private boolean jj_3R_queryExpressionBody_2014_6_340()
 {
    if (jj_3R_orderby_3812_9_376()) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5072_17_535()
 {
    if (jj_scan_token(BIGINTEGER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5072_44_670()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5068_17_534()
 {
    if (jj_scan_token(CHAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5068_39_669()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_queryExpressionBody_2005_9_293()
 {
    if (jj_3R_queryTerm_2034_9_336()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_queryExpressionBody_2014_6_340()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_queryExpressionBody_2015_6_341()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_queryExpressionBody_2016_6_342()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_subqueryCompareCriteria_3538_11_392()
 {
    if (jj_3R_subquery_3502_9_92()) return true;
    return false;
  }

  private boolean jj_3R_subqueryCompareCriteria_3539_7_393()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5062_17_533()
 {
    if (jj_scan_token(VARCHAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5062_42_668()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5061_17_532()
 {
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5061_41_667()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_subqueryCompareCriteria_3532_9_359()
 {
    if (jj_3R_operator_3427_9_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(197)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_subqueryCompareCriteria_3538_11_392()) {
    jj_scanpos = xsp;
    if (jj_3R_subqueryCompareCriteria_3539_7_393()) return true;
    }
    return false;
  }

  private boolean jj_3R_parseDataTypePrimary_5060_9_521()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_parseDataTypePrimary_5061_17_532()) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataTypePrimary_5062_17_533()) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataTypePrimary_5068_17_534()) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataTypePrimary_5072_17_535()) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataTypePrimary_5076_17_536()) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataTypePrimary_5077_17_537()) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataTypePrimary_5080_17_538()) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataTypePrimary_5089_17_539()) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataTypePrimary_5090_17_540()) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataTypePrimary_5091_17_541()) {
    jj_scanpos = xsp;
    if (jj_scan_token(374)) {
    jj_scanpos = xsp;
    if (jj_3R_parseDataTypePrimary_5093_17_542()) {
    jj_scanpos = xsp;
    if (jj_scan_token(378)) {
    jj_scanpos = xsp;
    if (jj_scan_token(379)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_withListElement_1980_11_373()
 {
    if (jj_3R_columnList_6429_9_364()) return true;
    return false;
  }

  private boolean jj_3R_withListElement_1979_9_335()
 {
    if (jj_3R_id_703_9_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_withListElement_1980_11_373()) jj_scanpos = xsp;
    if (jj_scan_token(AS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_queryExpression_1945_9_240()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_namespaceItem_5039_13_436()
 {
    if (jj_scan_token(DEFAULT_KEYWORD)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_subquery_3504_10_165()
 {
    if (jj_3R_storedProcedure_1714_9_241()) return true;
    return false;
  }

  private boolean jj_3R_subquery_3503_11_164()
 {
    if (jj_3R_queryExpression_1945_9_240()) return true;
    return false;
  }

  private boolean jj_3R_namespaceItem_5034_13_435()
 {
    if (jj_scan_token(NO)) return true;
    if (jj_scan_token(DEFAULT_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_subquery_3502_9_92()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_subquery_3503_11_164()) {
    jj_scanpos = xsp;
    if (jj_3R_subquery_3504_10_165()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_namespaceItem_5029_9_434()
 {
    if (jj_3R_stringVal_636_9_325()) return true;
    if (jj_scan_token(AS)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_namespaceItem_5029_9_395()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_namespaceItem_5029_9_434()) {
    jj_scanpos = xsp;
    if (jj_3R_namespaceItem_5034_13_435()) {
    jj_scanpos = xsp;
    if (jj_3R_namespaceItem_5039_13_436()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_queryExpression_1950_17_339()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_withListElement_1979_9_335()) return true;
    return false;
  }

  private boolean jj_3R_queryExpression_1945_10_292()
 {
    if (jj_scan_token(WITH)) return true;
    if (jj_3R_withListElement_1979_9_335()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_queryExpression_1950_17_339()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_queryExpression_1945_9_240()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_queryExpression_1945_10_292()) jj_scanpos = xsp;
    if (jj_3R_queryExpressionBody_2005_9_293()) return true;
    return false;
  }

  private boolean jj_3R_compareCrit_3473_9_360()
 {
    if (jj_3R_operator_3427_9_91()) return true;
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    return false;
  }

  private boolean jj_3R_xmlNamespaces_5007_10_396()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_namespaceItem_5029_9_395()) return true;
    return false;
  }

  private boolean jj_3R_xmlNamespaces_5002_9_106()
 {
    if (jj_scan_token(XMLNAMESPACES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_namespaceItem_5029_9_395()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_xmlNamespaces_5007_10_396()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_isDistinct_3452_11_394()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_xmlForest_4980_17_582()
 {
    if (jj_3R_xmlNamespaces_5002_9_106()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_isDistinct_3452_5_361()
 {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_isDistinct_3452_11_394()) jj_scanpos = xsp;
    if (jj_scan_token(DISTINCT)) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    return false;
  }

  private boolean jj_3R_delete_1911_9_244()
 {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_xmlForest_4978_9_256()
 {
    if (jj_scan_token(XMLFOREST)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlForest_4980_17_582()) jj_scanpos = xsp;
    if (jj_3R_derivedColumnList_4952_9_583()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_operator_3427_9_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(197)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(151)) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_operator_3427_9_91()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(441)) {
    jj_scanpos = xsp;
    if (jj_scan_token(442)) {
    jj_scanpos = xsp;
    if (jj_scan_token(443)) {
    jj_scanpos = xsp;
    if (jj_scan_token(444)) {
    jj_scanpos = xsp;
    if (jj_scan_token(445)) {
    jj_scanpos = xsp;
    if (jj_scan_token(446)) {
    jj_scanpos = xsp;
    if (jj_scan_token(447)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_derivedColumnList_4956_10_603()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    return false;
  }

  private boolean jj_3R_booleanPrimary_3406_25_323()
 {
    if (jj_3R_isDistinct_3452_5_361()) return true;
    return false;
  }

  private boolean jj_3R_booleanPrimary_3405_25_322()
 {
    if (jj_3R_compareCrit_3473_9_360()) return true;
    return false;
  }

  private boolean jj_3R_booleanPrimary_3404_25_321()
 {
    if (jj_3R_subqueryCompareCriteria_3532_9_359()) return true;
    return false;
  }

  private boolean jj_3R_booleanPrimary_3403_25_320()
 {
    if (jj_3R_isNullCrit_3677_9_358()) return true;
    return false;
  }

  private boolean jj_3R_booleanPrimary_3402_25_319()
 {
    if (jj_3R_setCrit_3703_9_357()) return true;
    return false;
  }

  private boolean jj_3R_derivedColumnList_4952_9_583()
 {
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_derivedColumnList_4956_10_603()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_regexMatchCrit_3612_9_90()) return true;
    return false;
  }

  private boolean jj_3R_booleanPrimary_3410_15_223()
 {
    if (jj_3R_xmlExists_2925_5_282()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_matchCrit_3578_9_89()) return true;
    return false;
  }

  private boolean jj_3R_booleanPrimary_3409_15_222()
 {
    if (jj_3R_existsCriteria_3746_9_281()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_betweenCrit_3653_9_88()) return true;
    return false;
  }

  private boolean jj_3R_booleanPrimary_3398_15_280()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_booleanPrimary_3402_25_319()) {
    jj_scanpos = xsp;
    if (jj_3R_booleanPrimary_3403_25_320()) {
    jj_scanpos = xsp;
    if (jj_3R_booleanPrimary_3404_25_321()) {
    jj_scanpos = xsp;
    if (jj_3R_booleanPrimary_3405_25_322()) {
    jj_scanpos = xsp;
    if (jj_3R_booleanPrimary_3406_25_323()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_update_1868_9_243()
 {
    if (jj_scan_token(UPDATE)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_booleanPrimary_3397_13_221()
 {
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_booleanPrimary_3398_15_280()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_jsonObject_4932_9_257()
 {
    if (jj_scan_token(JSONOBJECT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_derivedColumnList_4952_9_583()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_booleanPrimary_3396_5_133()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_booleanPrimary_3397_13_221()) {
    jj_scanpos = xsp;
    if (jj_3R_booleanPrimary_3409_15_222()) {
    jj_scanpos = xsp;
    if (jj_3R_booleanPrimary_3410_15_223()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_expressionList_1842_17_421()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_xmlAttributes_4911_10_617()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    return false;
  }

  private boolean jj_3R_expressionList_1838_9_379()
 {
    if (jj_3R_expression_4033_5_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expressionList_1842_17_421()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_columnList_6438_12_445()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_xmlAttributes_4906_9_107()
 {
    if (jj_scan_token(XMLATTRIBUTES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_xmlAttributes_4911_10_617()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_notCrit_3368_10_383()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_insert_1801_41_295()
 {
    if (jj_scan_token(UPSERT)) return true;
    return false;
  }

  private boolean jj_3R_notCrit_3368_9_346()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_notCrit_3368_10_383()) jj_scanpos = xsp;
    if (jj_3R_booleanPrimary_3396_5_133()) return true;
    return false;
  }

  private boolean jj_3R_columnList_6429_9_364()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_id_703_9_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_columnList_6438_12_445()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_xmlAttributes_4906_9_107()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_xmlNamespaces_5002_9_106()) return true;
    return false;
  }

  private boolean jj_3R_xmlElement_4881_10_581()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_compoundCritAnd_3346_10_384()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_notCrit_3368_9_346()) return true;
    return false;
  }

  private boolean jj_3R_insert_1801_19_294()
 {
    if (jj_scan_token(MERGE)) return true;
    return false;
  }

  private boolean jj_3R_compoundCritAnd_3345_9_308()
 {
    if (jj_3R_notCrit_3368_9_346()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_compoundCritAnd_3346_10_384()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_constraint_6407_10_328()
 {
    if (jj_scan_token(INDEX)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_insert_1801_9_242()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_3R_insert_1801_19_294()) {
    jj_scanpos = xsp;
    if (jj_3R_insert_1801_41_295()) return true;
    }
    }
    if (jj_scan_token(INTO)) return true;
    return false;
  }

  private boolean jj_3R_xmlElement_4871_9_255()
 {
    if (jj_scan_token(XMLELEMENT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(358)) jj_scanpos = xsp;
    if (jj_3R_id_703_9_75()) return true;
    xsp = jj_scanpos;
    if (jj_3_53()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_xmlElement_4881_10_581()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_constraint_6399_9_284()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_constraint_6399_9_327()) {
    jj_scanpos = xsp;
    if (jj_3R_constraint_6407_10_328()) return true;
    }
    return false;
  }

  private boolean jj_3R_constraint_6399_9_327()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(217)) {
    jj_scanpos = xsp;
    if (jj_scan_token(339)) return true;
    }
    if (jj_3R_columnList_6429_9_364()) return true;
    return false;
  }

  private boolean jj_3R_compoundCritOr_3323_10_347()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_compoundCritAnd_3345_9_308()) return true;
    return false;
  }

  private boolean jj_3R_compoundCritOr_3322_9_262()
 {
    if (jj_3R_compoundCritAnd_3345_9_308()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_compoundCritOr_3323_10_347()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_executeNamedParams_1770_25_378()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_id_703_9_75()) return true;
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(446)) jj_scanpos = xsp;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_queryString_4845_10_577()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    return false;
  }

  private boolean jj_3R_queryString_4843_9_104()
 {
    if (jj_scan_token(QUERYSTRING)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_queryString_4845_10_577()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_xmlParse_4814_36_579()
 {
    if (jj_scan_token(CONTENT)) return true;
    return false;
  }

  private boolean jj_3R_criteria_3304_9_187()
 {
    if (jj_3R_compoundCritOr_3322_9_262()) return true;
    return false;
  }

  private boolean jj_3R_primaryKey_6374_9_283()
 {
    if (jj_scan_token(PRIMARY)) return true;
    if (jj_scan_token(KEY)) return true;
    return false;
  }

  private boolean jj_3R_executeNamedParams_1757_9_76()
 {
    if (jj_3R_id_703_9_75()) return true;
    if (jj_scan_token(EQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(446)) jj_scanpos = xsp;
    if (jj_3R_expression_4033_5_99()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_executeNamedParams_1770_25_378()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_where_3287_5_526()
 {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_criteria_3304_9_187()) return true;
    return false;
  }

  private boolean jj_3R_xmlParse_4816_10_580()
 {
    if (jj_scan_token(WELLFORMED)) return true;
    return false;
  }

  private boolean jj_3R_foreignKey_6352_9_285()
 {
    if (jj_scan_token(FOREIGN)) return true;
    if (jj_scan_token(KEY)) return true;
    return false;
  }

  private boolean jj_3R_xmlParse_4814_10_578()
 {
    if (jj_scan_token(DOCUMENT)) return true;
    return false;
  }

  private boolean jj_3R_function_4775_48_593()
 {
    if (jj_scan_token(DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_function_4781_41_260()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_xmlParse_4813_9_254()
 {
    if (jj_scan_token(XMLPARSE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlParse_4814_10_578()) {
    jj_scanpos = xsp;
    if (jj_3R_xmlParse_4814_36_579()) return true;
    }
    if (jj_3R_expression_4033_5_99()) return true;
    xsp = jj_scanpos;
    if (jj_3R_xmlParse_4816_10_580()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_storedProcedure_1729_19_343()
 {
    if (jj_3R_expressionList_1838_9_379()) return true;
    return false;
  }

  private boolean jj_3R_storedProcedure_1729_18_305()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_storedProcedure_1729_19_343()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_executeNamedParams_1757_9_76()) return true;
    return false;
  }

  private boolean jj_3R_storedProcedure_1734_10_306()
 {
    if (jj_3R_option_3968_9_344()) return true;
    return false;
  }

  private boolean jj_3R_unaryFromClause_3261_12_645()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) jj_scanpos = xsp;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_unaryFromClause_3260_9_444()
 {
    if (jj_3R_id_703_9_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unaryFromClause_3261_12_645()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_tableConstraint_6328_6_227()
 {
    if (jj_3R_foreignKey_6352_9_285()) return true;
    return false;
  }

  private boolean jj_3R_tableConstraint_6327_6_226()
 {
    if (jj_3R_constraint_6399_9_284()) return true;
    return false;
  }

  private boolean jj_3R_function_4779_18_571()
 {
    if (jj_3R_filterClause_2412_9_594()) return true;
    return false;
  }

  private boolean jj_3R_function_4777_19_570()
 {
    if (jj_3R_orderby_3812_9_376()) return true;
    return false;
  }

  private boolean jj_3R_function_4776_19_569()
 {
    if (jj_3R_expressionList_1838_9_379()) return true;
    return false;
  }

  private boolean jj_3R_function_4786_9_185()
 {
    if (jj_scan_token(SESSION_USER)) return true;
    return false;
  }

  private boolean jj_3R_tableConstraint_6326_4_225()
 {
    if (jj_3R_primaryKey_6374_9_283()) return true;
    return false;
  }

  private boolean jj_3R_function_4784_10_261()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intVal_3204_9_512()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_function_4781_13_183()
 {
    if (jj_scan_token(CURRENT_DATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4781_41_260()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_tableConstraint_6325_4_224()
 {
    if (jj_scan_token(CONSTRAINT)) return true;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_function_4775_18_592()
 {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_function_4775_18_568()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4775_18_592()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4775_48_593()) return true;
    }
    return false;
  }

  private boolean jj_3R_storedProcedure_1714_9_241()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    if (jj_3R_id_703_9_75()) return true;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_storedProcedure_1729_18_305()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_storedProcedure_1734_10_306()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_tableConstraint_6325_3_134()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_tableConstraint_6325_4_224()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_tableConstraint_6326_4_225()) {
    jj_scanpos = xsp;
    if (jj_3R_tableConstraint_6327_6_226()) {
    jj_scanpos = xsp;
    if (jj_3R_tableConstraint_6328_6_227()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_function_4783_5_184()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_function_4784_10_261()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_function_4773_9_182()
 {
    if (jj_3R_id_703_9_75()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4775_18_568()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4776_19_569()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4777_19_570()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_function_4779_18_571()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_subqueryFromClause_3228_17_156()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(206)) {
    jj_scanpos = xsp;
    if (jj_scan_token(245)) return true;
    }
    return false;
  }

  private boolean jj_3R_subqueryFromClause_3231_11_157()
 {
    if (jj_3R_queryExpression_1945_9_240()) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_scan_token(POSITION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_subqueryFromClause_3232_7_158()
 {
    if (jj_3R_storedProcedure_1714_9_241()) return true;
    return false;
  }

  private boolean jj_3R_function_4759_14_567()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_subqueryFromClause_3227_9_85()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_subqueryFromClause_3228_17_156()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_subqueryFromClause_3231_11_157()) {
    jj_scanpos = xsp;
    if (jj_3R_subqueryFromClause_3232_7_158()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) jj_scanpos = xsp;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_scan_token(JSONOBJECT)) return true;
    return false;
  }

  private boolean jj_3_83()
 {
    if (jj_3R_tableConstraint_6325_3_134()) return true;
    return false;
  }

  private boolean jj_3R_function_4756_11_181()
 {
    if (jj_scan_token(LISTAGG)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4759_14_567()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(WITHIN)) return true;
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_orderby_3812_9_376()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_function_4754_13_180()
 {
    if (jj_scan_token(POSITION)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_commonValueExpression_4054_9_160()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_function_4750_17_179()
 {
    if (jj_3R_xmlQuery_2969_9_259()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_executeNamedParams_1757_9_76()) return true;
    return false;
  }

  private boolean jj_3R_function_4746_17_178()
 {
    if (jj_3R_xmlSerialize_2627_9_258()) return true;
    return false;
  }

  private boolean jj_3R_function_4742_17_177()
 {
    if (jj_3R_jsonObject_4932_9_257()) return true;
    return false;
  }

  private boolean jj_3R_function_4731_25_566()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_function_4738_17_176()
 {
    if (jj_3R_xmlForest_4978_9_256()) return true;
    return false;
  }

  private boolean jj_3R_intVal_3204_9_512()
 {
    if (jj_scan_token(UNSIGNEDINTEGER)) return true;
    return false;
  }

  private boolean jj_3R_null_4708_31_105()
 {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_82()
 {
    if (jj_3R_tableConstraint_6325_3_134()) return true;
    return false;
  }

  private boolean jj_3R_xmlColumn_3186_13_691()
 {
    if (jj_scan_token(PATH)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    return false;
  }

  private boolean jj_3R_function_4722_11_175()
 {
    if (jj_scan_token(XMLPI)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(358)) jj_scanpos = xsp;
    if (jj_3R_id_703_9_75()) return true;
    xsp = jj_scanpos;
    if (jj_3R_function_4731_25_566()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_xmlColumn_3183_13_690()
 {
    if (jj_scan_token(DEFAULT_KEYWORD)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_function_4711_18_565()
 {
    if (jj_3R_expressionList_1838_9_379()) return true;
    return false;
  }

  private boolean jj_3R_function_4718_11_174()
 {
    if (jj_3R_xmlElement_4871_9_255()) return true;
    return false;
  }

  private boolean jj_3R_xmlColumn_3180_13_685()
 {
    if (jj_3R_parseBasicDataType_5129_5_502()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlColumn_3183_13_690()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlColumn_3186_13_691()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(213)) {
    jj_scanpos = xsp;
    if (jj_3R_null_4708_31_105()) return true;
    }
    return false;
  }

  private boolean jj_3R_function_4714_11_173()
 {
    if (jj_3R_xmlParse_4813_9_254()) return true;
    return false;
  }

  private boolean jj_3R_function_4704_18_564()
 {
    if (jj_3R_expressionList_1838_9_379()) return true;
    return false;
  }

  private boolean jj_3R_xmlColumn_3175_10_684()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(ORDINALITY)) return true;
    return false;
  }

  private boolean jj_3R_xmlColumn_3173_9_663()
 {
    if (jj_3R_id_703_9_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlColumn_3175_10_684()) {
    jj_scanpos = xsp;
    if (jj_3R_xmlColumn_3180_13_685()) return true;
    }
    return false;
  }

  private boolean jj_3R_function_4708_9_172()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(213)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_function_4711_18_565()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_id_703_9_75()) return true;
    if (jj_3R_parseBasicDataType_5129_5_502()) return true;
    return false;
  }

  private boolean jj_3R_createElementsWithTypes_1629_10_634()
 {
    if (jj_3R_id_703_9_75()) return true;
    if (jj_3R_parseBasicDataType_5129_5_502()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_createForeignTempTable_6235_9_66()
 {
    if (jj_scan_token(CREATE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) jj_scanpos = xsp;
    if (jj_scan_token(FOREIGN)) return true;
    return false;
  }

  private boolean jj_3R_function_4698_9_171()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(219)) {
    jj_scanpos = xsp;
    if (jj_scan_token(233)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) {
    jj_scanpos = xsp;
    if (jj_scan_token(265)) {
    jj_scanpos = xsp;
    if (jj_scan_token(266)) {
    jj_scanpos = xsp;
    if (jj_scan_token(278)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_function_4704_18_564()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_function_4624_80_575()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(212)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_function_4627_14_602()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_queryString_4843_9_104()) return true;
    return false;
  }

  private boolean jj_3R_dropTableView_6214_17_210()
 {
    if (jj_scan_token(GLOBAL)) return true;
    if (jj_scan_token(TEMPORARY)) return true;
    return false;
  }

  private boolean jj_3R_dropTableView_6213_17_209()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(224)) jj_scanpos = xsp;
    if (jj_scan_token(VIEW)) return true;
    return false;
  }

  private boolean jj_3R_dropTableView_6212_17_208()
 {
    if (jj_scan_token(FOREIGN)) return true;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  private boolean jj_3R_function_4669_18_562()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_xmlTable_3138_12_664()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_xmlColumn_3173_9_663()) return true;
    return false;
  }

  private boolean jj_3R_dropTableView_6211_9_121()
 {
    if (jj_scan_token(DROP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_dropTableView_6212_17_208()) {
    jj_scanpos = xsp;
    if (jj_3R_dropTableView_6213_17_209()) {
    jj_scanpos = xsp;
    if (jj_3R_dropTableView_6214_17_210()) return true;
    }
    }
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(333)) {
    jj_scanpos = xsp;
    if (jj_scan_token(334)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_intervalType_5181_9_563()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_xmlTable_3133_11_640()
 {
    if (jj_scan_token(COLUMNS)) return true;
    if (jj_3R_xmlColumn_3173_9_663()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_xmlTable_3138_12_664()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_null_4624_53_103()
 {
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_xmlTable_3124_12_662()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(331)) {
    jj_scanpos = xsp;
    if (jj_scan_token(332)) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    xsp = jj_scanpos;
    if (jj_3R_function_4669_18_562()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_xmlTable_3118_11_639()
 {
    if (jj_scan_token(PASSING)) return true;
    if (jj_3R_derivedColumn_2230_9_362()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_xmlTable_3124_12_662()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_xmlTable_3115_11_638()
 {
    if (jj_3R_xmlNamespaces_5002_9_106()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_xmlTable_3114_9_443()
 {
    if (jj_scan_token(XMLTABLE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlTable_3115_11_638()) jj_scanpos = xsp;
    if (jj_3R_stringVal_636_9_325()) return true;
    xsp = jj_scanpos;
    if (jj_3R_xmlTable_3118_11_639()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_xmlTable_3133_11_640()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) jj_scanpos = xsp;
    if (jj_3R_id_703_9_75()) return true;
    return false;
  }

  private boolean jj_3R_createView_6178_5_263()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(224)) jj_scanpos = xsp;
    if (jj_scan_token(VIEW)) return true;
    if (jj_3R_unqualifiedId_684_5_199()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_4624_23_102()) {
    jj_scanpos = xsp;
    if (jj_3R_null_4624_53_103()) return true;
    }
    return false;
  }

  private boolean jj_3R_null_4624_23_102()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(212)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_function_4629_13_576()
 {
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_function_4627_14_602()
 {
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_function_4624_13_561()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4624_80_575()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4629_13_576()) return true;
    }
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3R_objectColumn_3090_11_666()
 {
    if (jj_scan_token(DEFAULT_KEYWORD)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_dynamicCommand_1540_25_471()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) return true;
    }
    return false;
  }

  private boolean jj_3R_objectColumn_3086_9_643()
 {
    if (jj_3R_id_703_9_75()) return true;
    if (jj_3R_parseBasicDataType_5129_5_502()) return true;
    if (jj_3R_stringVal_636_9_325()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_objectColumn_3090_11_666()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_createForeignOrGloablTable_6147_17_310()
 {
    if (jj_scan_token(GLOBAL)) return true;
    if (jj_scan_token(TEMPORARY)) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(TRIM)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_function_4624_13_561()) jj_scanpos = xsp;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_createForeignOrGloablTable_6146_17_309()
 {
    if (jj_scan_token(FOREIGN)) return true;
    if (jj_scan_token(TABLE)) return true;
    return false;
  }

  private boolean jj_3R_function_4611_13_560()
 {
    if (jj_scan_token(DOY)) return true;
    return false;
  }

  private boolean jj_3R_function_4610_13_559()
 {
    if (jj_scan_token(DOW)) return true;
    return false;
  }

  private boolean jj_3R_createForeignOrGloablTable_6145_9_264()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_createForeignOrGloablTable_6146_17_309()) {
    jj_scanpos = xsp;
    if (jj_3R_createForeignOrGloablTable_6147_17_310()) return true;
    }
    return false;
  }

  private boolean jj_3R_function_4604_13_558()
 {
    if (jj_scan_token(DAY)) return true;
    return false;
  }

  private boolean jj_3R_dynamicCommand_1540_5_437()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_dynamicCommand_1540_25_471()) jj_scanpos = xsp;
    if (jj_3R_expression_4033_5_99()) return true;
    return false;
  }

  private boolean jj_3R_function_4595_15_557()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_expressionList_1838_9_379()) return true;
    return false;
  }

  private boolean jj_3R_createTable_6127_17_192()
 {
    if (jj_3R_createForeignOrGloablTable_6145_9_264()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(EXTRACT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(233)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_3R_function_4604_13_558()) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(190)) {
    jj_scanpos = xsp;
    if (jj_scan_token(415)) {
    jj_scanpos = xsp;
    if (jj_scan_token(414)) {
    jj_scanpos = xsp;
    if (jj_3R_function_4610_13_559()) {
    jj_scanpos = xsp;
    if (jj_3R_function_4611_13_560()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_expression_4033_5_99()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_createTable_6126_15_191()
 {
    if (jj_3R_createView_6178_5_263()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new SQLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SQLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   return token;
	 }
	 token = oldToken;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 Token errortok = token.next;
	 int line = errortok.beginLine, column = errortok.beginColumn;
	 String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
	 return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

//  private void jj_add_error_token ( int kind, int pos) {
//	    if (pos >= 100) return;
//	    if (pos == jj_endpos + 1) {
//	      jj_lasttokens[jj_endpos++] = kind;
//	    } else if (jj_endpos != 0) {
//	      jj_expentry = new int[jj_endpos];
//	      for (int i = 0; i < jj_endpos; i++) {
//	        jj_expentry[i] = jj_lasttokens[i];
//	      }
//	      boolean exists = false;
//	      for (java.util.Iterator e = jj_expentries.iterator(); e.hasNext();) {
//	        int[] oldentry = (int[])(e.next());
//	        if (oldentry.length == jj_expentry.length) {
//	          exists = true;
//	          for (int i = 0; i < jj_expentry.length; i++) {
//	            if (oldentry[i] != jj_expentry[i]) {
//	              exists = false;
//	              break;
//	            }
//	          }
//	          if (exists) break;
//	        }
//	      }
//	      if (!exists) jj_expentries.add(jj_expentry);
//	      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
//	    }
//	  }

} // end class

